{"records":[{"@type":"d","@version":22,"@class":"OFunction","idempotent":false,"code":"try {\n    var db = orient.getDatabase();\n\n    // process log line sent from insertEvent.js\n    var logline = unescape(jsondata)\n    if(logline.trim().length == 0) return\n    var e = null\n    try {\n      e = removeSpaceFromKey(JSON.parse(logline));    \n    }\n    catch(err) {\n       print(Date() + err);\n       db.command('INSERT INTO FailedJSON SET line = ?', logline)\n       return\n    }\n\n    // every event gets a unique ID\n    var id = (new Date())*1\n    e.id = id\n\n    if('Hostname' in e) { e.Hostname = e.Hostname.toUpperCase() }\n\n    //for multi-tenancy support\n    if(organisation != undefined) { \n      if(organisation.length > 0) e.Organisation = organisation\n    }\n    if(!('Organisation' in e)) e.Organisation = 'MyCompany' \n\n    // default class if can't figure out which class later\n    classname = 'WinEvent' \n    e.ToBeProcessed = true\n\n    // This Keywords field is a huge negative number that breaks record insertion\n    if('Keywords' in e) e.Keywords = '' + e.Keywords // turn it into a string\n\n    // Pre-insertion processing...\n    var funcName = e.SourceName.replace(/-/g,'_')\n    if(funcName in this){\n        e = this[funcName](e); \n        if(e == 0) return; \n        // pre-processing that needs to continue returns a _classname\n        if(\"_classname\" in e) {\n           classname = e._classname\n           delete e._classname\n        }\n    }\n\n    //problematic for server-side parsing... it is repeated data anyway\n    // it is pre-processed in some functions (eg. DataFuseUserActions) before deleting\n    if('Message' in e) delete e.Message \n\n    //--Insert event------\n    var jsonstring = JSON.stringify(e)\n    var stmt = 'INSERT INTO '+ classname + ' CONTENT ' + jsonstring\n    var r = null\n    try { r = db.command(stmt); }\n    catch(err){\n        print(Date() + ' Error inserting ' + stmt)\n        db.command('INSERT INTO FailedJSON SET line = ?', logline)\n        return\n    }\n    //--End insert event------\n\n    // post-insertion processing...\n    // Linking edges that need RID of inserted record is done here\n    switch(classname) { \n    case \"CreatedProcess4688\":\n            if(!('Sequence' in e)) {\n              //print('Post-insertion sequence extraction for 4688 event: ' + e.NewProcessName) \n              UpdateLineageLookup(e)\n            }\n            break;\n        \n    case \"ProcessCreate\":\n            CheckForeign(r[0])\n            CheckSpoof(r[0])\n            TrackBeforeOrAfterExplorer(r[0])\n            if('Sequence' in e) {\n              TrackLineage(e.Sequence, r[0].field('@rid'), r[0])\n            }\n        \telse { // try to recover & hope that the parent's Sequence is available...\n                print('\\nProcessEvent extracting Sequence after event insertion...\\n')\n                var sequence = ''\n                var seq = db.query('SELECT FROM LineageLookup WHERE Organisation = ? AND Hostname = ? AND PID = ? AND Image = ?', \n                                   e.Organisation, e.Hostname, e.ParentProcessId, e.ParentImage)\n                if(seq.length > 0){ \n                   print('\\nProcessEvent:ProcessCreate found in LineageLookup: ' + seq[0].field('Sequence') + '\\n')\n                   sequence = seq[0].field('Sequence') + ' > ' + e.Image.split('\\\\').reverse()[0]\t\t\t\t   \n                }\n                else {\n                    print('\\nProcessEvent retrying with ParentProcessGuid ' + e.Image + '\\n')\n                    var parent = db.query(\"select from processcreate where Organisation = ? AND Hostname = ? AND ParentProcessGuid = ? limit 1\", e.Organisation, e.Hostname, e.ParentProcessGuid )\n                    if(parent.length == 0) {\n                       print('ProcessEvent unable to find parent process with ParentProcessGuid ' + e.ParentProcessGuid)\n                       break;\n                    }\n\t\t\t\t\tif(parent[0].field('Sequence')) {\n                         sequence = parent[0].field('Sequence') + ' > ' + e.Image.split('\\\\').reverse()[0]\n                    }\n                  \telse print('\\nProcessEvent found parent process with ParentProcessGuid but sequence is null \\n')\n                }\n              \n                if(sequence.length > 0) {\n                   print('ProcessEvent:ProcessCreate updated Sequence...')\n                   retry(\"db.command('UPDATE \"+ r[0].field('@rid') + \" SET Sequence = \\\"\" + sequence + \"\\\"')\")\n                   TrackLineage(sequence, r[0].field('@rid'), r[0])\n                }\n            }\n            break;\n\n    case \"ImageLoad\": //most signed Microsoft DLL are filtered by nxlog.conf\n            CheckForeign(r[0])\n            // track full-path-to-file AND Hashes\n            db.command('UPDATE ImageLoadedHashes set Count = Count + 1 UPSERT RETURN AFTER \\\n                     @rid, Count WHERE ImageLoaded = ? AND Hashes = ?',\n                     r[0].field('ImageLoaded'), r[0].field('Hashes') )\n\n          // track ONLY Hashes        \n            db.command('UPDATE ImageLoadedHashes set HashCount = HashCount + 1 \\\n                      UPSERT RETURN AFTER @rid, HashCount, BaseLined WHERE Hashes = ?', r[0].field('Hashes') )\n            ConnectToProcessCreate(r[0]);\n            break;\n\n    case \"UntrustedFile\":\n    case \"UserActionTracking\":\n    case \"SpoofParentProcessId\":\n    case \"NetworkConnect\":\n    case \"ProcessTerminate\":\n    case \"DriverLoad\":\n    case \"ProcessTampering\":\n    case \"CapturedFile\":\n           this[classname](r[0])\n           break;\n\n    case \"PipeCreated\":\t    \t\n    case \"PipeConnected\":   \n    case \"RawAccessRead\":   \n    case \"FileCreateTime\":  \t\n    case \"FileCreate\": \t     \n    case \"FileCreateStreamHash\":     \n    case \"RegistryEvent\":\n            var wpc = CheckProcessWatchlist(e)\n            if(wpc == null) return\n            // otherwise connect the event to ProcessCreate in watchlist\n            var sql = 'CREATE EDGE ' + edgeLookup(r[0].field('@class')) + ' FROM \\\n                          ' + wpc.field('PCrid') + ' TO ' + r[0].field('@rid')\n            retry(\"db.command('\" + sql + \"')\")\n            retry(\"db.command('UPDATE \"+ r[0].field('@rid') + \" SET ToBeProcessed = false')\")\n            break;\n\n    case \"CreateRemoteThread\":\n    case \"ProcessAccess\":\n           if(CheckProcessWatchlist(e) == null) return\n           this[classname](r[0])    \n           break;\n    }\n\n    return r\n}\ncatch(err) {\n  var msg = 'ProcessEvent: ' + err + ' | input: ' + jsondata + ' | ' + organisation\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"ProcessEvent\", Message = ?', msg)\n}","name":"ProcessEvent","language":"javascript","parameters":["jsondata","organisation"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// not in use, kept for reference\n\nvar db = orient.getDatabase();\nvar circularCheck = {} //each @rid should only be seen ONCE.\n\nfunction findParent(n, s) { // start from leaf child node\n  if(circularCheck[n] === undefined) {\n     circularCheck[n] = 1\n  }\n  else {\n     print('circular path detected ' + n)\n  \t return s + ' circular path'\n  }\n  var separator = s.length > 0 ? ' > ' : '';\n  var r = db.query('select from ' + n)\n  if(r.length == 0) return s; // no record, don't proceed\n  \n  // reached dead-end (circular path handled earlier)\n  if(r[0].getProperty('in_ParentOf') == null) {\n    var i = r[0].getProperty('Image').split(\"\\\\\")\n    if(r[0].getProperty('Image').indexOf('smss.exe') > 0) i[i.length-1] = 'System > ' + i[i.length-1]\n    return (i[i.length-1] + separator + s)      \n  }\n  //print('in_ParentOf RID = ' + r[0].getProperty('in_ParentOf'))\n  var p = db.query('select expand(out) from ' + r[0].getProperty('in_ParentOf').toString().replace('[','').replace(']',''))\n  var i = r[0].getProperty('Image').split(\"\\\\\")\n  return findParent(p[0].getProperty('@rid'), i[i.length-1] + separator + s);\n}\n\nreturn findParent(startrid,'')\n","name":"GetParentOfSequence","language":"javascript","parameters":["startrid"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"/*\n\tNO longer in use, kept for reference\n\tThis is a Dynamic Hook function. Using console:\n    alter class parentof Superclass +OTriggered\n    alter class parentof CUSTOM onAfterCreate='UpdateSequence'\n    This function is called whenever ParentOf edge is linked between a Parent & Child Process.\n    This function will upsert the lineage sequence class (named Sequence) to track new process lineage\n*/\nreturn\nvar db = orient.getDatabase();\n\nfunction fixSequence(prevSeq){\n\tprint('Found partial sequence, attempt to fix: ' + prevSeq + ' from ' + doc.field('in').field('@rid'))\n    for(var i = 0; i < 3; i++) {\n      var ps = db.query('SELECT GetParentOfSequence(?) as seq', doc.field('out').field('@rid'))\n      prevSeq = ps[0].field('seq')\n      if(prevSeq == null || prevSeq.indexOf('System >') < 0) continue;\n      //found valid sequence\n      db.command('UPDATE ? SET Sequence = ? RETURN AFTER Sequence', doc.field('out').field('@rid'), prevSeq)\n      print('GetParentOfSequence found: ' + prevSeq + ' for ' + doc.field('in').field('@rid'))\t\n      return prevSeq\n    }\n    var parentEXE = doc.field('out').field('Image').split('\\\\').reverse()[0];\n    var childEXE = doc.field('in').field('Image').split('\\\\').reverse()[0];\n    var partialSeq = parentEXE + ' > ' + childEXE\n    //print(partialSeq)\n    var seq = db.query('SELECT Sequence from seq WHERE Sequence like \"%' + partialSeq + '\"')\n    if(seq.length > 0) return seq[0].field('Sequence').replace(' > ' + childEXE, \"\")\n    return parentEXE\n}\n\nfunction upsertSequence(seq, rid){\n    if(seq.length == 0) return\n  \n    var sc = db.command('UPDATE seq SET Count = Count + 1 UPSERT \\\n\t\t\t\tRETURN AFTER @rid, Count, Score WHERE Sequence = ?',seq) \n    var toLink = false\n\tif(sc[0].field('Score') > 0) toLink = true\n    if(sc[0].field('Count') == 1) {\n       var wl = db.query('select from seq WHERE BaseLined = true AND Sequence = ?', stripDottedNumbers(seq))\n       if(wl.length == 0) toLink = true // not whitelisted\n    }\n    if(toLink) {\n\t\tsql = 'CREATE EDGE SequenceSighted FROM '+sc[0].field('@rid')+' TO '+ rid\n        retry(\"db.command('\" + sql + \"')\")\n    }\n    //print(doc.field('in').field('EventTime') + '\\n' +  doc.field('in').field('Organisation') + ' | ' + doc.field('in').field('Hostname') + ' : ' + seq + '|' + sc[0].field('Count'));\n}\n\n// Sometimes Sequence may not be assigned at Microsoft_Windows_Sysmon pre-processing function\nif(doc.field('in').field('Sequence') === null) {\n//  print('no pre-processed Sequence!')\n  var exename = doc.field('in').field('Image').split(\"\\\\\")\n  exename = exename[exename.length - 1]\n  var prevSeq = '' + doc.field('out').field('Sequence'); \n  for(var i = 0; i < 3; i++){ //retry mechanism\n    try{\n       //valid sequence always starts with 'System >' \n       if(prevSeq.indexOf('System > ') == 0) { \n          var seq = prevSeq + ' > ' + exename\n          var sql = 'UPDATE ' + doc.field('in').field('@rid') + ' SET \\\n                    Sequence = \"'+seq+'\" RETURN AFTER Sequence'\n          retry(\"db.command('\" + sql + \"')\")\n          upsertSequence(seq, doc.field('in').field('@rid'))    \n          break;\n        }\n        //prevSeq = fixSequence(prevSeq)\n    }\n    catch(err){\n      if(err.indexOf('UPDATE') >= 0) continue; \n    }\n  }\n  // update ProcessType if unable to recover any Sequence\n  if(prevSeq == null || prevSeq.indexOf('System >') < 0){\n    var sql = 'UPDATE ' + doc.field('in').field('@rid') + ' SET ProcessType = \"Orphan\"'\n    retry(\"db.command('\" + sql + \"')\")\n  }\n}\nelse upsertSequence(doc.field('in').field('Sequence'),doc.field('in').field('@rid'))","name":"UpdateSequence","language":"javascript","parameters":null},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"try{\n    var db = orient.getDatabase();\n    var rid = r.field('@rid')\n\n    var source = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ? limit 1', r.field('Organisation'), r.field('Hostname'),  r.field('SourceProcessGuid'));\n\n    if(source.length > 0) {\n        //print('CreateRemoteThread Source found')\n        retry(\"db.command('CREATE EDGE CreatedThread FROM \" + source[0].field('rid').field('@rid') + \" TO \" + rid + \"')\")\n    }\n\n    var target = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ? limit 1', r.field('Organisation'), r.field('Hostname'), r.field('TargetProcessGuid'))\n\n    if(target.length > 0) {\n        //print('CreateRemoteThread Target found')\n        retry(\"db.command('CREATE EDGE RemoteThreadFor FROM \" + rid + \" TO \" + target[0].field('rid').field('@rid') + \"')\")\n    }\n\n    retry(\"db.command('UPDATE \"+ rid + \" SET ToBeProcessed = false')\")\n}\ncatch(err){\n  var msg = 'CreateRemoteThread: ' + err + ' | input: ' + r.field('@rid')\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"CreateRemoteThread\", Message = ?', msg)\n}","name":"CreateRemoteThread","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"try{\n\n    var db = orient.getDatabase();\n    var rid = u.field('@rid')\n\n    // keeping this because of the parameterized SQL\n    function retry(command){\n        try {\n            eval(command) \n        }\n        catch(err){\n            var e = '' + err\n            if(e.indexOf('UPDATE') > 0) {\n                print('Retrying ' + command)\n                retry(command)\n            }\n            else {\n              db.command('INSERT INTO Errors Set Command = ?, Message = ?',command, e)\n              print('Failed: ' + command + ' | Error: ' + e)\n           }\n        }\n    }\n    var pc = null\n    var ua = '' + u\n    if(ua.indexOf('Foreground Transition') > 0) {\n      print('\\nForeground transit from: ')\n      print(u.getProperty('@rid') + ' ' + u.getProperty('FromProcessId') + ' to ' + u.getProperty('ToProcessId') + '\\n'); \n\n      if(u.getProperty('FromProcessGuid') == null) {\n        retry(\"db.command('CREATE EDGE SwitchedFrom FROM (SELECT FROM ProcessCreate WHERE Organisation = ? \\\n             AND Hostname = ? AND ProcessId = ? Order By id Desc Limit 1) TO ?', \\\n    u.getProperty('Organisation'),u.getProperty('Hostname'),u.getProperty('FromProcessId'),u.getProperty('@rid'))\")\n      }\n      else {\n         retry(\"db.command('CREATE EDGE SwitchedFrom FROM (SELECT FROM ProcessCreate WHERE Organisation = ? \\\n             AND Hostname = ? AND ProcessGuid = ? Order By id Desc Limit 1) TO ?', \\\n    u.getProperty('Organisation'),u.getProperty('Hostname'),u.getProperty('FromProcessGuid'),u.getProperty('@rid'))\")\n      }\n\n      if(u.getProperty('ToProcessGuid') == null) {\n        retry(\"db.command('CREATE EDGE SwitchedTo FROM ? TO (SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessId = ? Order By id Desc  LIMIT 1)', \\\n    u.getProperty('@rid'),u.getProperty('Organisation'),u.getProperty('Hostname'),u.getProperty('ToProcessId'))\")\n\n        pc = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessId = ? Order By id Desc LIMIT 1', u.getProperty('Organisation'),u.getProperty('Hostname'),u.getProperty('ToProcessId'))\n      }\n      else {\n        retry(\"db.command('CREATE EDGE SwitchedTo FROM ? TO (SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ? Order By id Desc  LIMIT 1)', \\\n    u.getProperty('@rid'),u.getProperty('Organisation'),u.getProperty('Hostname'),u.getProperty('ToProcessGuid'))\")\n\n        pc = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ? Order By id Desc LIMIT 1', u.getProperty('Organisation'),u.getProperty('Hostname'),u.getProperty('ToProcessGuid'))\n      }\n\n    //means somehow ProcessCreate was missing, eg. DataFusion was installed after the Process was created\n      if(pc.length == 0) { \n          print(\"ProcessCreate not available for \" + u.getProperty('@rid'));\n          return \n      }\n    //  print(pc[0].getProperty('ProcessType'));\n    }\n    else { // Click, MouseMove, Enter...\n      if(u.getProperty('ProcessGuid')==null) {\n        pc = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? \\\n        AND ProcessId = ? Order By id Desc LIMIT 1', u.getProperty('Organisation'),u.getProperty('Hostname'),u.getProperty('ProcessId'))\n      }\n      else {\n        pc = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? \\\n        AND ProcessGuid = ? Order By id Desc LIMIT 1', u.getProperty('Organisation'),u.getProperty('Hostname'),u.getProperty('ProcessGuid'))\n      }\n\n       //means somehow ProcessCreate was missing, eg. DataFusion was installed after the Process was created\n        if(pc.length == 0) return \n\n        retry(\"db.command('CREATE EDGE ActedOn FROM ? TO ?',u.getProperty('@rid'),pc[0].getProperty('@rid'))\")\n    }\n\n    if(pc[0].getProperty('ProcessType') != 'AfterExplorerForeground'){\n      print('1. Assigning to AfterExplorerForeground for ' + pc[0].getProperty('@rid') + '\\n' + pc[0].getProperty('Organisation') + ':' + pc[0].getProperty('Hostname') + ':' + pc[0].getProperty('Image') + '\\n');\n      retry(\"db.command('UPDATE ? SET ProcessType = ?', pc[0].getProperty('@rid'),'AfterExplorerForeground')\")      \n    }\n\n    retry(\"db.command('UPDATE \" + rid + \" SET ToBeProcessed = false')\") \n\n}\ncatch(err){\n  var msg = 'UserActionTracking: ' + err + ' | input: ' + rid\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"UserActionTracking\", Message = ?', msg)\n}\n\n\n","name":"UserActionTracking","language":"javascript","parameters":["u"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// r is a non-ProcessCreate event, find ProcessCreate then link it to this event\ntry{\n    var db = orient.getDatabase();\n    var rid = r.field('@rid')\n    var pc = db.query('SELECT FROM ProcessCreate where Organisation = ? AND Hostname = ? AND ProcessGuid = ? limit 1', r.field('Organisation'), r.field('Hostname'), r.field('ProcessGuid'))\n\n    //regardless ProcessCreate exist or not, the non-ProcessCreate is processed\n    retry(\"db.command('UPDATE \"+ rid + \" SET ToBeProcessed = false')\") \n    if(pc.length == 0) return\n\n    var sql = 'CREATE EDGE ' + edgeLookup(r.field('@class')) + ' FROM ' + pc[0].field('@rid') + ' TO ' + rid\n    retry(\"db.command('\" + sql + \"')\")\n}\ncatch(err){\n  var msg = 'ConnectToProcessCreate: ' + err + ' | input: ' + r.field('@rid')\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"ConnectToProcessCreate\", Message = ?', msg)\n}","name":"ConnectToProcessCreate","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"return // no longer in use but keeping for reference\n\nvar db = orient.getDatabase();\n\nvar r = db.query('select from (select from pc where ToBeProcessed=true order by id asc limit 100) order by Hostname asc, RecordNumber asc')\n\nfunction handleRetry(child_rid){\n\tprint('set retry for ' + child_rid)\n    try {\n    \tvar c = db.command('UPDATE ? SET ParentRetry = ParentRetry + 1 RETURN AFTER ParentRetry', child_rid)\n      \tif(c[0].field('ParentRetry') > 0) { // this is deliberate\n            retry(\"db.command('\"+'UPDATE '+child_rid+' SET ToBeProcessed = false'+\"')\")\n         \treturn true  // done retrying       \t\n      \t}\n      \telse {\n        \tprint('retried ' + c[0].field('ParentRetry'))\n         \treturn false // for retrying\n      \t}\t\n    }\n    catch(err) {\n\t\tvar e = '' + err\n        if(e.indexOf('UPDATE') > 0) {\n        \tprint('Retrying connectParent for ' + child_rid)\n            handleRetry(child_rid)\n        }\n        else {\n        \tprint('handleRetry Failed: ' + e)\n            db.command('INSERT INTO Errors Set Message = ?', e)\n        }\n    }\n}\n\n// used when retry complete still no parent\nfunction recoverSeq(child) {\n    var parentEXE = child.field('ParentImage').split('\\\\').reverse()[0];\n    var childEXE = child.field('Image').split('\\\\').reverse()[0];\n    var partialSeq = parentEXE + ' > ' + childEXE\n    var seq = db.command('UPDATE seq SET Count = Count + 1 UPSERT RETURN AFTER @rid, Sequence, Count, Score \\\n\t\t\t\t\t\t  WHERE Sequence like \"%' + partialSeq + '\"')\n    if(seq[0].field('Sequence') == null) {\n       print('Fail to recover sequence for ' + child.field('Image'))\n       return true\n    }\n    if(seq.length == 0) return true\n    \n    print(\"recoverSeq|\" + child.field('Hostname') + \"|\" + seq[0].field('Sequence'))\n    var sql = 'UPDATE ' + child.field('@rid') + ' SET Sequence = \"'+seq[0].field('Sequence')+'\"'\n    retry(\"db.command('\" + sql + \"')\")\n    var s = seq[0].field('Sequence')\n    if(s == null) return false\n    if(s.indexOf('services.exe > svchost.exe > wuauclt.exe > AM_') > 0) return true\n    if(seq[0].field('Score') > 0 || seq[0].field('Count') == 1) {\n        sql = 'CREATE EDGE SequenceSighted FROM ' + seq[0].field('@rid') + ' TO ' + child.field('@rid')\n        retry(\"db.command('\" + sql + \"')\")\n        print('Sequence sighted in recoverSeq, linked '  + seq[0].field('@rid') + ' TO \\\n\t\t' + child.field('@rid'))      \n    }\n\treturn true\n}\n\nfunction linkToParent(parentRID, childRID){\n\tretry(\"db.command('\"+'CREATE EDGE ParentOf from '+parentRID+' TO '+childRID+\"')\")\n\tretry(\"db.command('\"+'UPDATE '+childRID+' SET ToBeProcessed = false'+\"')\")\n}\n\nfunction connectParent(child) {\t\n    // this field is pre-populated by Microsoft_Windows_Sysmon pre-processing function\n    if(child.field('ParentRID') != null){\n    \tlinkToParent(child.field('ParentRID'),child.field('@rid'))\n        return true\n    }\n    \n    var parent = db.query('SELECT FROM ProcessCreate where Organisation = ? AND Hostname = ? AND \\\n\tProcessGuid = ?', child.field('Organisation'), child.field('Hostname'), child.field('ParentProcessGuid'))\n    if(parent.length > 0) {\n\t\tparent = parent[0]\n        if(parent.field('Sequence') == null) {\n            if( handleRetry(child.field('@rid')) == false) return false\n        }\n        linkToParent(parent.field('@rid'),child.field('@rid'))\n        return true   \n    }\n  \telse {\n       if(child.field('ProcessType') == 'Orphan') {\n       \t\tprint('Found orphan @ ' + child.field('Hostname') + ' | ' + child.field('Image'))\n            retry(\"db.command('\"+'UPDATE '+child.field('@rid')+' SET ToBeProcessed = false'+\"')\")\n            return true\n       }\n       else {\n           if(handleRetry(child.field('@rid')) == false) return false    \n           else return recoverSeq(child);\n       }\n    } \n}\n\ntry{\n  for(var i = 0; i < r.length; i++){ \n      if(connectParent(r[i]) == false) break;\n  }\n}\ncatch(err) {\n  var msg = 'ConnectParentProcess exception: ' + err \n  print(msg) \n  db.command('INSERT INTO Errors Set Message = ?', msg) \n}","name":"ConnectParentProcess","language":"javascript","parameters":[]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"try{\n    var db = orient.getDatabase();\n    var rid = r.field('@rid')\n    print('UntrustedFile found on ' + r.field('Hostname'));\n\n    function findProcessCreate(r){\n      return db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ? limit 1', r.field('Organisation'), r.field('Hostname'), r.field('ProcessGuid'));\n    }\n\n    // UntrustedFile is usually inserted before ProcessCreate/ImageLoad \n    // the following handles scenario when UntrustedFile is inserted later.\n    var pc = null;\n\n    var linkSQL = \"\";\n\n    if(r.field('Type') == 'ProcessCreate') {\n        pc = findProcessCreate(r)\n        if(pc.length > 0) linkSQL = \"db.command('CREATE EDGE ExeSighted FROM \" + rid +\" TO \" + pc[0].field('@rid') + \"')\" \n    }\n    else {\n        pc = db.query('SELECT FROM ImageLoad where Hostname = ? AND Organisation = ? AND ProcessGuid = ? AND ImageLoaded = ?',\n                       r.field('Hostname'), r.field('Organisation'), r.field('ProcessGuid'),r.field('FullPath'))\n        if(pc.length > 0) { linkSQL = \"db.command('CREATE EDGE DllSighted FROM \" + rid +\" TO \" + pc[0].field('@rid') + \"')\" }\n        else {\n           pc = findProcessCreate(r)\n           if(pc.length > 0)  linkSQL = \"db.command('CREATE EDGE DllSighted FROM \" + pc[0].field('@rid') +\" TO \" + rid + \"')\"\n        }\n    }    \n    if(pc.length == 0) return\n\n    print('linking foreign ' + r.field('Type') + ' ' + pc[0].field('@rid'))\n    retry(linkSQL)\n    retry(\"db.command('UPDATE \" + rid + \" SET ToBeProcessed = false')\")\n    findExecuteAfterWrite(r.field('FullPath'), pc[0].field('Hostname'), pc[0].field('Organisation'), pc[0].field('@rid'))\n}\ncatch(err){\n  var msg = 'UntrustedFile: ' + err + ' | input: ' + r.field('@rid')\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"UntrustedFile\", Message = ?', msg)\n}","name":"UntrustedFile","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\nvar rid = r.field('@rid')\n\nfunction findLateral(r) {\n        var lateral = null // look for lateral destination\n        if(r.field('DestinationHostname')){\n            lateral = db.query('SELECT FROM NetworkAddress WHERE Hostname = ? AND Organisation = ? AND Hostname <> ?',r.field('DestinationHostname'), r.field('Organisation'), r.field('Hostname'))\n            if(lateral.length > 0) return lateral\n        }\n        if(r.field('DestinationIp')){ // handles both IPv4 & 6\n            lateral = db.query('SELECT FROM NetworkAddress WHERE IpAddress = ? AND Hostname <> ? AND Organisation = ?',\n                               r.field('DestinationIp'),r.field('Hostname'),r.field('Organisation')) \t\n            if(lateral.length > 0) return lateral\n        }\n        return null\n}\n\ntry{\n    //print('NetworkConnect ' + r.field('Image'))\n    // This UPSERT will return #NN:-N rid if called via Dynamic Hook\n    var u = db.command('UPDATE NetworkDestinationPort set Count = Count + 1 \\\n                          UPSERT RETURN AFTER @rid, Count WHERE Image = ? AND \\\n                          Hostname = ? AND Organisation = ? AND Port = ?', \n                          r.field('Image'), r.field('Hostname'),r.field('Organisation'), \t\n                          r.field('DestinationPort'))\n    if(u[0].field('Count') == 1) { // new destination port sighted for that Process-Image\n        retry(\"db.command('CREATE EDGE DestinationPortSighted \\\n            FROM \" + u[0].field('@rid') + \" TO \" + r.field('@rid') + \"')\")\n    } \n\n    // Find ProcessCreate to connect to...\n    var pc = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ?', r.field('Organisation'), r.field('Hostname'), r.field('ProcessGuid'))\n    if(pc.length > 0) {\n        var edgeName = r.field('DestinationType') == 'proxy' ? 'UsedProxy' : 'ConnectedTo';\n        retry(\"db.command('CREATE EDGE \" + edgeName + \" FROM \" + pc[0].field('@rid') + \" TO \" + rid + \"')\")\n    }\n\n    // Added codes\n    if(r.field('DestinationPort') == 2222 && r.field('DestinationIp') == \"192.168.1.7\" && r.field('Image') != \"C:\\\\Windows\\\\openedr\\\\Upload.exe\") {\n        // For debugging purposes\n        print('Unauthorised access to SFTP event receiver service by ' + r.field('Image'))\n        // Create SftpIntrusionSighted edge from ProcessCreate to NetworkConnect\n        retry(\"db.command('CREATE EDGE SftpIntrusionSighted FROM \" + pc[0].field('@rid') + \" TO \" + rid + \"')\")\n    }\n\n    //even if ProcessCreate cannot be found\n    retry(\"db.command('UPDATE \" + rid + \" SET ToBeProcessed = false')\") \n  \n    // likely no proxy in environment, direct connection to external address\n    if(r.field('DestinationType') == 'external') return \n\n    // Find ListeningPort to connect to if exist...\n    var lateral = findLateral(r)\n    if(lateral == null) return;\n\n    //print('Found lateral communication, finding destination listeningPort for ' + rid)\n    var listening = db.query('SELECT FROM listeningport WHERE Hostname = ? AND Organisation = ? AND LocalPort = ?',lateral[0].field('Hostname'), lateral[0].field('Organisation'), r.field('DestinationPort'))\n    if(listening.length == 0) return;\n\n    // in web proxied environment, endpoint may be connecting to proxy constantly, that's what Sysmon can only see \n    retry(\"db.command('CREATE EDGE LateralCommunication FROM \" + rid + \" TO \" + listening[0].getProperty('@rid') + \" ')\")\n\n    if(listening[0].field('out_ListeningPortSighted') != null || listening[0].field('out_BoundTo') != null) return\n\n    var lpc = db.query('SELECT FROM ProcessCreate WHERE Hostname = ? AND Organisation = ? AND ProcessId = ? AND Image.IndexOf(?) > -1 \\\n                        order by id desc LIMIT 1', listening[0].field('Hostname'), listening[0].field('Organisation'),\n                        listening[0].field('ProcessId'), listening[0].field('ProcessName'))\n    if(lpc.length == 0) return;\n\n    retry(\"db.command('CREATE EDGE BoundTo FROM \"+listening[0].getProperty('@rid')+\" TO \"+lpc[0].getProperty('@rid')+\"')\")\n    print('Added BoundTo edge between ' + listening[0].getProperty('@rid') + ' to ' + lpc[0].getProperty('@rid'))\n\n}\ncatch(err){\n  var msg = 'NetworkConnect: ' + err + ' | input: ' + rid\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"NetworkConnect\", Message = ?', msg)\n}\n","name":"NetworkConnect","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// Called from insertEvent.js; not in use\n\nvar db = orient.getDatabase();\n\n// PendingTypeTimer functions sets ProcessType to AfterExplorerBackground \ndb.command('DELETE FROM oschedule WHERE name = \"PendingTypeEvent\"')\ndb.command(\"INSERT INTO oschedule  SET name = 'PendingTypeEvent', \\\n\t\t\tfunction = (SELECT FROM ofunction WHERE name = 'PendingTypeTimer'), rule = '0/10 * * * * ?'\")\n\n// ConnectParentProcess links child to parent process\ndb.command('DELETE FROM oschedule WHERE name = \"ConnectParentEvent\"')\ndb.command(\"INSERT INTO oschedule  SET name = 'ConnectParentEvent', \\\n\t\t\tfunction = (SELECT FROM ofunction WHERE name = 'ConnectParentProcess'), rule = '0/1 * * * * ?'\")","name":"RestartTimers","language":"javascript","parameters":null},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"try{\n    var db = orient.getDatabase();\n    var rid = r.field('@rid')\n\n    var source = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ? limit 1', \n                          r.field('Organisation'), r.field('Hostname'),  r.field('SourceProcessGuid'));\n\n    if(source.length > 0) {\n        retry(\"db.command('CREATE EDGE ProcessAccessedFrom FROM \" + source[0].field('rid').field('@rid') + \" TO \" + rid + \"')\")\n    }\n\n    var target = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ? limit 1', \n                          r.field('Organisation'), r.field('Hostname'), r.field('TargetProcessGuid'))\n\n    if(target.length > 0) {\n        retry(\"db.command('CREATE EDGE ProcessAccessedTo FROM \" + rid + \" TO \" + target[0].field('rid').field('@rid') + \"')\")\n    }\n\n    retry(\"db.command('UPDATE \"+ rid + \" SET ToBeProcessed = false')\") \n}\ncatch(err){\n  var msg = 'ProcessAccess: ' + err + ' | input: ' + rid\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"ProcessAccess\", Message = ?', msg)\n}","name":"ProcessAccess","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"try{\n  \n    var db = orient.getDatabase();\n\n    // fetch ProcessCreate\n    // use date within EventTime, set the rest to 00:00:00\n    var pc = db.query('SELECT *, EventTime.format(\"yyyy-MM-dd 00:00:00\") as ET FROM ' + pc_rid)\n    if(pc.length == 0) return\n    pc = pc[0]\n\n    // setup the SQL statement\n    var stm = \"select from (select from processcreate where Organisation = ? AND Hostname = ? AND EventTime >= ? AND EventTime <= ?) where id <= ? order by id desc limit \" + n\n\n    // fetch N prior ProcessCreates\n    var earlierProcesses = db.query(stm, pc.field('Organisation'), pc.field('Hostname'), pc.field('ET'), pc.field('EventTime'), pc.field('id'))\n    if(earlierProcesses.length == 0) return\n\n    // link them starting from the earliest\n    for(i = earlierProcesses.length - 1; i >=1; i--) {\n      //print( earlierProcesses[i].field('EventTime') + ' ' + earlierProcesses[i].field('Image') + ' to ' + earlierProcesses[i -1].field('Image'))\n      if(earlierProcesses[i].field('out_FollowedBy') == undefined) \n         retry(\"db.command('CREATE EDGE FollowedBy FROM \" + earlierProcesses[i].field('@rid') + \" to \" + earlierProcesses[i - 1].field('@rid') + \"')\") \n    }\n\n}\ncatch(err){\n  var msg = 'FindPreviousProcesses: ' + err + ' | input: ' + pc_rid\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"FindPreviousProcesses\", Message = ?', msg)\n}","name":"FindPreviousProcesses","language":"javascript","parameters":["pc_rid","n"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// frontend.js calls this\ntry{\n    var db = orient.getDatabase();\n\n    // fetch ProcessCreate\n    var pc = db.query('SELECT *, EventTime.format(\"yyyy-MM-dd 00:00:00\") as ET, in(\"LastForeground\").size() as LFG FROM ' + pc_rid)\n    if(pc.length == 0) return\n    pc = pc[0]\n\n    // already linked\n    if(pc.field('LFG') > 0) return\n\n    var fgProcess = db.query(\"select from processcreate where Organisation = ? AND Hostname = ? AND id < ? AND (ProcessType = 'AfterExplorerForeground' OR (Image like '%explorer.exe' AND ProcessType = 'BeforeExplorer')) order by id desc limit 1\", pc.field('Organisation'), pc.field('Hostname'), pc.field('id'))\n\n    if(fgProcess.length == 0) return\n\n    print('Found last FG process @ ' +  fgProcess[0].field('EventTime') + ' ' + fgProcess[0].field('Image') + ' for ' + pc_rid)\n\n    retry(\"db.command('CREATE EDGE LastForeground FROM \" + fgProcess[0].field('@rid') + \" to \" + pc_rid + \"')\")\n\n}\ncatch(err){\n  var msg = 'FindLastForeground: ' + err + ' | input: ' + pc_rid\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"FindLastForeground\", Message = ?', msg)\n}","name":"FindLastForeground","language":"javascript","parameters":["pc_rid"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"//Used by investigation board controller\ntry{\n    var db = orient.getDatabase();\n    var r = db.command(\"select from (traverse in('AddedTo'), in('FollowedBy'), in('LastForeground') from \"+rid\n                       + \" MAXDEPTH 3) where @rid <> ? AND @class <> 'Case' order by id\", rid); \n    return r\n}\ncatch(err){\n  var msg = 'GetCaseProcessSequence: ' + err + ' | input: ' + rid\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"GetCaseProcessSequence\", Message = ?', msg)\n}","name":"GetCaseProcessSequence","language":"javascript","parameters":["rid"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// rid: string of a ProcessCreate\n// traverse in('CommandLineSighted'), out('SimilarTo') from $RID\n// Whitelist in this case simply means setting the Score to ZERO.\n// There are two classes that Score is used for new & recurring sightings:\n// 1) HostUserPrivilegeCommandLine or HUPC\n// 2) CommandLineCluster\n// Called from frontend.js\ntry{\n    var db = orient.getDatabase();\n    var r = db.query(\"traverse in('CommandLineSighted'), out('SimilarTo') from \" + rid);\n\n    for(var i = 0; i < r.length; i++) {\n      print('WhitelistCommandLine: ' + r[i].field('@class') )\n      if(r[i].field('@class') == 'HostUserPrivilegeCommandLine' || r[i].field('@class') == 'CommandLineCluster')     {\n        db.command('update ? set Score = 0, BaseLined = true', r[i].field('@rid'));\n      }\n    }\n}\ncatch(err){\n  var msg = 'WhitelistCommandLine: ' + err + ' | input: ' + rid\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"WhitelistCommandLine\", Message = ?', msg)\n}","name":"WhitelistCommandLine","language":"javascript","parameters":["rid"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// rid: RID of a ProcessCreate\n// use traverse in('sequencesighted') from <RID>\n// Called from frontend.js\ntry{\n  \n    var db = orient.getDatabase();\n\n    var r = db.query(\"traverse in('sequencesighted') from \" + rid);\n    for(var i = 0; i < r.length; i++) {\n        if(r[i].field('@class') == 'ParentOfSequence') {\n            db.command('update ? set Score = 0', r[i].field('@rid'));\n            db.command('insert into seq set BaseLined = true, Count = 1, Score = 0, Sequence = ?',\n                       stripDottedNumbers(r[i].field('Sequence')))\n        }\n    }\n\n}\ncatch(err){\n  var msg = 'WhitelistSequence: ' + err + ' | input: ' + rid\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"WhitelistSequence\", Message = ?', msg)\n}","name":"WhitelistSequence","language":"javascript","parameters":["rid"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// rid: string of a DriverLoad\n// use traverse in('SysSighted') from <RID>\n// Called from frontend.js\ntry{\n  \n    var db = orient.getDatabase();\n\n    var r = db.query(\"traverse in('SysSighted') from \" + rid);\n    //print('whitelisting driver')\n    for(var i = 0; i < r.length; i++) {\n        if(r[i].field('@class') == 'ImageLoadedHashes') {\n            //print(r[i].field('@rid'))\n            db.command('update ? set BaseLined = true', r[i].field('@rid'));\n        }\n    }\n\n}\ncatch(err){\n  var msg = 'WhitelistDriverLoad: ' + err + ' | input: ' + rid\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"WhitelistDriverLoad\", Message = ?', msg)\n}","name":"WhitelistDriverLoad","language":"javascript","parameters":["rid"]},{"@type":"d","@version":2,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase()\nvar s = 'System > smss.exe > smss.exe > wininit.exe > services.exe > svchost.exe > wuauclt.exe > AM_Delta_Patch_1.321.2229.1.exe'\ns = stripDottedNumbers(s)\nvar r = db.query('select from seq where BaseLined = true AND Sequence = ?',s)\n\nreturn r.length\n\nvar d = '{\"SourceName\":\"OSQuery\",\"Organisation\":\"MyCo\",\"Hostname\":\"WWWPC1\",\"RequestRequestRid\":\"#23:23\", \"QueryStart\":\"2020-03-03T18:00:00.123Z\",\"QueryEnd\":\"2020-03-03T18:00:03.456Z\", \"Query\":\"select * from drivers\", \"Results\":[{\"Blah\":1},{\"Blah\":2}]}'\n\nvar e = JSON.parse(d)\n\nif(e['SourceName'].toLowerCase() == 'osquery') {\n\tvar re = /FROM\\s+(.+)\\s*/gi\n\tvar match = re.exec(e['Query'])\n    if(match.length < 2) return\n  \tclassname = \"OSQuery_\" + match[1];  \n    for(var i = 0; i < e['Results'].length ; i++) {\n        var eachline = e['Results'][i]\n        eachline['Organisation'] = e['Organisation']\n        eachline['Hostname'] = e['Hostname']\n        eachline['QueryStart'] = e['QueryStart']\n        eachline['QueryEnd'] = e['QueryEnd']\n        eachline['RequestRequestRid'] = e['RequestRequestRid']\n        var stmt = 'INSERT INTO '+ classname + ' CONTENT ' + JSON.stringify(eachline)\n        print(stmt);\n        db.command(stmt)    \n    }\n    return\n}","name":"test_osQuery","language":"javascript","parameters":null},{"@type":"d","@version":2,"@class":"OFunction","idempotent":null,"code":"/*\n  SpoofParentProcessId vertice will be linked to a ProcessCreate that has spoof parent PID by edge:SpoofedParentProcess.\n  Another edge:TrueParentOf links the actual parent Process to this process with spoofed PPID.\n*/\ntry{\n\n    var db = orient.getDatabase();\n    var rid = r.field('@rid')\n    \n    print('spoofed parent processGuid: ' + r.field('ProcessGuid'))\n    print('True-parent processGuid: ' + r.field('TrueParentProcessGuid'))\n\n    // link spoof alert vertex to ProcessCreate\n    var targetPC = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ? limit 1',\n                            r.field('Organisation'), r.field('Hostname'), r.field('ProcessGuid') )\n    if(targetPC.length == 0) return\n    targetPC = targetPC[0]\n    retry(\"db.command('CREATE EDGE SpoofedParentProcess FROM \" + rid + \" to \" + targetPC.field('@rid') + \"')\")\n\n    // link true-parent ProcessCreate to ProcessCreate with spoofed PPID\n    var trueParent = null\n    if(r.field('TrueParentProcessGuid')) {\n        print('SpoofParentProcessId using ' + r.field('TrueParentProcessGuid') + ' to find true parent')\n        trueParent = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? \\\n    AND ProcessGuid = ? order by id desc limit 1', r.field('Organisation'), r.field('Hostname'), r.field('TrueParentProcessGuid') )\n    }\n    else{\n        print('SpoofParentProcessId using ' + r.field('TrueParentProcessId') + ' to find true parent')      \n        trueParent = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? \\\n    AND ProcessId = ? order by id desc limit 1', r.field('Organisation'), r.field('Hostname'), r.field('TrueParentProcessId') )\n    }\n\n    if(trueParent.length == 0) return\n    trueParent = trueParent[0]\n    print('SpoofParentProcessId found true parent, linking...')\n    retry(\"db.command('CREATE EDGE TrueParentOf FROM \" + trueParent.field('@rid') + \" to \" + targetPC.field('@rid') + \"')\")\n    retry(\"db.command('UPDATE \"+ rid + \" SET ToBeProcessed = false')\")\n\n}\ncatch(err){\n  var msg = 'SpoofParentProcessId: ' + err + ' | input: ' + rid\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"SpoofParentProcessId\", Message = ?', msg)\n}","name":"SpoofParentProcessId","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// Ported from https://github.com/jordanthomas/jaro-winkler/blob/master/index.js\n// Returns a similarity score where 1 means identifical strings (s1 vs s2)\n\nfunction extend(a, b) {\n    for (var property in b) {\n      if (b.hasOwnProperty(property)) {\n        a[property] = b[property];\n      }\n    }\n\n    return a;\n  }\n\n  function distance(s1, s2, options) {\n    var m = 0;\n    var defaults = { caseSensitive: true };\n    var settings = extend(defaults, options);\n    var i;\n    var j;\n\n    // Exit early if either are empty.\n    if (s1.length === 0 || s2.length === 0) {\n      return 0;\n    }\n\n    // Convert to upper if case-sensitive is false.\n    if (!settings.caseSensitive) {\n      s1 = s1.toUpperCase();\n      s2 = s2.toUpperCase();\n    }\n\n    // Exit early if they're an exact match.\n    if (s1 === s2) {\n      return 1;\n    }\n\n    var range = (Math.floor(Math.max(s1.length, s2.length) / 2)) - 1;\n    var s1Matches = new Array(s1.length);\n    var s2Matches = new Array(s2.length);\n\n    for (i = 0; i < s1.length; i++) {\n      var low  = (i >= range) ? i - range : 0;\n      var high = (i + range <= (s2.length - 1)) ? (i + range) : (s2.length - 1);\n\n      for (j = low; j <= high; j++) {\n        if (s1Matches[i] !== true && s2Matches[j] !== true && s1[i] === s2[j]) {\n          ++m;\n          s1Matches[i] = s2Matches[j] = true;\n          break;\n        }\n      }\n    }\n\n    // Exit early if no matches were found.\n    if (m === 0) {\n      return 0;\n    }\n\n    // Count the transpositions.\n    var k = 0;\n    var numTrans = 0;\n\n    for (i = 0; i < s1.length; i++) {\n      if (s1Matches[i] === true) {\n        for (j = k; j < s2.length; j++) {\n          if (s2Matches[j] === true) {\n            k = j + 1;\n            break;\n          }\n        }\n\n        if (s1[i] !== s2[j]) {\n          ++numTrans;\n        }\n      }\n    }\n\n    var weight = (m / s1.length + m / s2.length + (m - (numTrans / 2)) / m) / 3;\n    var l = 0;\n    var p = 0.1;\n\n    if (weight > 0.7) {\n      while (s1[l] === s2[l] && l < 4) {\n        ++l;\n      }\n\n      weight = weight + l * p * (1 - weight);\n    }\n\n    return weight;\n  }\n\nreturn distance(s1, s2)","name":"JWCompare","language":"javascript","parameters":["s1","s2"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// rid of a WatchList record \n// called by CheckProcessWatchlist\ntry{\n    var db = orient.getDatabase();\n    r = r[0]\n    var rid = r.field('@rid')\n\n    var e = db.query(\"select from Sysmon where Organisation = ? AND Hostname = ? AND ProcessGuid = ? AND ToBeProcessed = true AND @rid <> ? AND id < ?\", r.field(\"Organisation\"), r.field(\"Hostname\"), r.field(\"ProcessGuid\"), r.field(\"PCrid\"), r.field(\"id\"))\n    if(e.length == 0) return\n\n    for(var i = 0; i < e.length; i++){\n      if(e[i].field('@class') == \"CreateRemoteThread\" || e[i].field('@class') == \"ProcessAccess\"){\n          this[e[i].field('@class')](e[i])\n      }\n      else{ // this links directly to ProcessCreate\n            var sql = 'CREATE EDGE ' + edgeLookup(e[i].field('@class')) + ' FROM ' + r.field('PCrid') + ' TO ' + e[i].field('@rid')\n           retry(\"db.command('\" + sql + \"')\")\n           retry(\"db.command('UPDATE \"+ e[i].field('@rid') + \" SET ToBeProcessed = false')\")\n      }\n    }\n\n}\ncatch(err){\n  var msg = 'LinkWatchListRecord: ' + err + ' | input: ' + rid\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"LinkWatchListRecord\", Message = ?', msg)\n}","name":"LinkWatchListRecord","language":"javascript","parameters":["r"]},{"@type":"d","@version":2,"@class":"OFunction","idempotent":null,"code":"// used for UPDATE & CREATE EDGE retries\nvar db = orient.getDatabase();\n\ntry {\n\teval(command) \n}\ncatch(err){\n\tvar e = '' + err\n    if(e.indexOf('not the latest') > 0) {\n    \tprint('Retrying ' + command)\n    \tretry(command)\n\t}\n\telse {\n    \tdb.command('INSERT INTO Errors Set Command = ?, Message = ?',command, e)\n        print('Failed: ' + command + ' | Error: ' + e)\n\t}\n}\n","name":"retry","language":"javascript","parameters":["command"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var _edgeLookup = {'ProcessTerminate':'Terminated', 'PipeCreated':'CreatedPipe',\n                'PipeConnected':'ConnectedPipe', 'RawAccessRead':'RawRead',\n                'FileCreateTime':'ChangedFileCreateTime', 'FileCreate':'CreatedFile',\n                'FileCreateStreamHash':'CreatedFileStream', 'RegistryEvent':'AccessedRegistry',\n                'NetworkConnect':'ConnectedTo', 'ImageLoad':'LoadedImage', 'ProcessTampering':'Tampered'}\nif(classname in _edgeLookup){\n\treturn _edgeLookup[classname];\n}\nelse return \"ProcessGuid\"; // this is a catch all edge class","name":"edgeLookup","language":"javascript","parameters":["classname"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// rid of a ProcessCreate record \n// this is called from frontend.js\ntry{\n    var db = orient.getDatabase();\n    var r = db.query(\"SELECT FROM \" + rid)\n    if(r.length == 0) return\n    r = r[0]\n\n    var e = db.query(\"select from Sysmon where Organisation = ? AND Hostname = ? AND ProcessGuid = ? AND ToBeProcessed = true AND @rid <> ?\", r.field(\"Organisation\"), r.field(\"Hostname\"), r.field(\"ProcessGuid\"), rid)\n    if(e.length == 0) return\n\n    for(var i = 0; i < e.length; i++){\n      if(e[i].field('@class') == \"CreateRemoteThread\" || e[i].field('@class') == \"ProcessAccess\"){\n          this[e[i].field('@class')](e[i])\n      }\n      else{\n            var sql = 'CREATE EDGE ' + edgeLookup(e[i].field('@class')) + ' FROM ' + rid + ' TO ' + e[i].field('@rid')\n           retry(\"db.command('\" + sql + \"')\")\n           retry(\"db.command('UPDATE \"+ e[i].field('@rid') + \" SET ToBeProcessed = false')\")\n      }\n    } \n\n}\ncatch(err){\n  var msg = 'LinkNonProcessCreate: ' + err + ' | input: ' + rid\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"LinkNonProcessCreate\", Message = ?', msg)\n}","name":"LinkNonProcessCreate","language":"javascript","parameters":["rid"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"try{\n\tvar db = orient.getDatabase();\n\n    // use Image/ImageLoaded string to search last FileCreate \n    print('\\nSearching for FileCreate ' + searchFilename + '\\n');\n    var foundFile = db.query('SELECT FROM FileCreate WHERE Hostname = ? AND Organisation = ? AND \\\n         TargetFilename = ? order by id desc limit 1', Hostname, Organisation, searchFilename);\n    if(foundFile.length == 0) return \n\n    print('Found for FileCreate ' + searchFilename + '\\n');\t\n    retry(\"db.command('CREATE EDGE ExecuteAfterWrite FROM \" + foundFile[0].field('@rid') + \" to \" + pc_rid + \"')\")\n}\ncatch(err){\n  var msg = 'findExecuteAfterWrite: ' + err + ' | input: ' + pc_rid\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"findExecuteAfterWrite\", Message = ?', msg)\n}","name":"findExecuteAfterWrite","language":"javascript","parameters":["searchFilename","Hostname","Organisation","pc_rid"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// find whitespace in key string; {key,value} database property name won't accept space\nvar notValid = /[\\W_]+/g \nif (typeof obj !== \"object\") return obj;\nfor (var prop in obj) {\n\tif (obj.hasOwnProperty(prop)) {\n    \tobj[prop.replace(notValid, \"\")] = removeSpaceFromKey(obj[prop]);\n        if (notValid.test(prop)) {\n        \tdelete obj[prop];\n\t\t}\n\t}\n}\nreturn obj;","name":"removeSpaceFromKey","language":"javascript","parameters":["obj"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// EventId to Sysmon Sub-Classname \nvar _eventIdLookup = {1:'ProcessCreate', 2:'FileCreateTime', 3:'NetworkConnect', \n                    4:'SysmonStatus', 5:'ProcessTerminate',6:'DriverLoad', \n                    7:'ImageLoad', 8:'CreateRemoteThread', 9:'RawAccessRead', \n                    10:'ProcessAccess', 11:'FileCreate', 12:'RegistryEvent', \n                    13:'RegistryEvent', 14:'RegistryEvent', 15:'FileCreateStreamHash', \n                    16:'ConfigChanged', 17:'PipeCreated', 18:'PipeConnected', \n                    19:'WmiEvent', 20:'WmiEvent', 21:'WmiEvent', 22:'DnsQuery', 23:'FileDelete', \n                    25:'ProcessTampering', 255:'Error' }\n\nif(id in _eventIdLookup){\n\treturn _eventIdLookup[id]\n}\nelse\n    return \"Sysmon\" \n// when in doubt, throw it to Sysmon class","name":"eventIdLookup","language":"javascript","parameters":["id"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// links true parent Process to the child process has spoofed Parent PID\ntry {\n    var db = orient.getDatabase();\n    var rid = r.field('@rid')\n    var spoof = db.query('SELECT @rid, TrueParentProcessId FROM SpoofParentProcessId \\\n                              Where Hostname = ? AND Organisation = ? AND ProcessGuid = ?', r.field('Hostname'), \t\t                      r.field('Organisation'), r.field('ProcessGuid'));\n    if(spoof.length == 0) return\n\n    print('\\nfound spoof for ' + rid + ' true parentPID = ' + spoof[0].field('TrueParentProcessId') + '\\n')\n    retry(\"db.command('CREATE EDGE SpoofedParentProcess FROM \" + spoof[0].field('@rid') + \" to \" + rid + \"')\")\n    var trueParent = null\n\n    if(spoof[0].field('TrueParentProcessGuid')) {\n        print('CheckSpoof searching for true parent using ProcessGuid ' + spoof[0].field('TrueParentProcessGuid'))\n        trueParent = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? \\\n        AND ProcessGuid = ? order by id desc limit 1', r.field('Organisation'), r.field('Hostname'), spoof[0].field('TrueParentProcessGuid'))\n        print('Checkspoof trueparent length ' + trueParent.length)\n    }\n    else {\n        print('CheckSpoof searching for true parent using ProcessId ' + spoof[0].field('TrueParentProcessId'))      \n        trueParent = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND \\\n        ProcessId = ? order by id desc limit 1',r.field('Organisation'), r.field('Hostname'), spoof[0].field('TrueParentProcessId'))\n        print('Checkspoof trueparent length ' + trueParent.length + ' ' + r.field('Organisation') + ' ' + r.field('Hostname'))\n    }\n    if(trueParent.length > 0) {\n     print('CheckSpoof found true parent, linking...')\n     retry(\"db.command('CREATE EDGE TrueParentOf FROM \" + trueParent[0].field('@rid') + \" to \" + rid + \"')\")\n    }\n\n    db.command('UPDATE ? SET ToBeProcessed = false', spoof[0].field('@rid'))\n}\ncatch(err){\n  var msg = 'CheckSpoof: ' + err + ' | input: ' + r.field('@rid')\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"CheckSpoof\", Message = ?', msg)\n}\n","name":"CheckSpoof","language":"javascript","parameters":["r"]},{"@type":"d","@version":2,"@class":"OFunction","idempotent":null,"code":"// called by ProcessEvent to link UntrustedFile to ProcessCreate\ntry {\n    var db = orient.getDatabase();\n    var classname = r.field('@class')\n    var pc_rid = r.field('@rid')\n\n    var fullpath = classname == 'ProcessCreate' ? r.field('Image') : r.field('ImageLoaded');\n    var foreign = db.query('SELECT * FROM UntrustedFile Where ToBeProcessed = true AND Type = ? AND \\\n                            Hostname = ? AND Organisation = ? AND ProcessGuid = ? AND FullPath = ?', \n                  classname, r.field('Hostname'), r.field('Organisation'), r.field('ProcessGuid'), fullpath);\n    if(foreign.length == 0) return    \n\n    var edgename = classname == 'ProcessCreate' ? \"ExeSighted\" : \"DllSighted\";\n    retry(\"db.command('CREATE EDGE \" + edgename + \" FROM \" + foreign[0].field('@rid') +\" TO \" + pc_rid + \"')\")\n    retry(\"db.command('UPDATE \" + foreign[0].field('@rid') +\" SET ToBeProcessed = false')\")\n    print('Linked '+ edgename + ' from ' + foreign[0].field('@rid') + ' to ' + pc_rid)\n\n      // use Image/ImageLoaded string to search last FileCreate \n    var searchFilename = r.field('ImageLoaded') ? r.field('ImageLoaded') : r.field('Image');\n    findExecuteAfterWrite(searchFilename, r.field('Hostname'), r.field('Organisation'), pc_rid)\n}\ncatch(err){\n  var msg = 'CheckForeign: ' + err + ' | input: ' + r.field('@rid')\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"CheckForeign\", Message = ?', msg)\n}","name":"CheckForeign","language":"javascript","parameters":["r"]},{"@type":"d","@version":3,"@class":"OFunction","idempotent":null,"code":"// pre-processing routine called by ProcessEvent\ntry{\n    var db = orient.getDatabase();\n\n    if(e['EventID']==3 || e['EventID']==4) {\n        var lp = db.command('UPDATE NetworkListeningPort set Count = Count + 1 \\\n                 UPSERT RETURN AFTER @rid, Count WHERE Hostname = ? AND Organisation = ? AND \\\n                 TransportProtocol = ? AND LocalAddress = ? AND LocalPort = ? AND \\\n                 ProcessId = ? AND ProcessName = ?',\n                 e['Hostname'], e['Organisation'], e['TransportProtocol'], e['LocalAddress'],\n                 e['LocalPort'],e['ProcessId'],e['ProcessName'])\n\n        if(lp[0].getProperty('Count') == 1 && e['ProcessName'] != 'System'){ // new listening port\n            db.command('CREATE EDGE ListeningPortSighted FROM ? TO \\\n            (SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND \\\n            ProcessId = ? order by id desc LIMIT 1) RETRY 10 WAIT 10', lp[0].getProperty('@rid'),e['Organisation'],\n            e['Hostname'], e['ProcessId'])\n        }\t\n    }\n\n    if(e['EventID']==1 || e['EventID']==2) {\n    //\tprint('network address for ' + e['Hostname'] + ' ' + e['IpAddress'])\n        db.command('UPDATE NetworkAddress set Count = Count + 1 \\\n                       UPSERT RETURN AFTER @rid, Count WHERE Hostname = ? AND \\\n                       Organisation = ? AND PhysicalAddress = ? AND IpAddress = ?',\n                       e['Hostname'], e['Organisation'], e['PhysicalAddress'],e['IpAddress'])\n    }\n\n    // returning zero tells ProcessEvent to not continue any further\n    return 0\n\n}\ncatch(err){\n  var msg = 'DataFuseNetwork_v2: ' + err + ' | input: ' + JSON.stringify(e)\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"DataFuseNetwork_v2\", Message = ?', msg)\n}\n\n","name":"DataFuseNetwork_v2","language":"javascript","parameters":["e"]},{"@type":"d","@version":2,"@class":"OFunction","idempotent":null,"code":"// pre-processing routine called by ProcessEvent\ne._classname = e.Class; \nif(e._classname == 'SpoofParentProcessId') print('Spoof found: ' + e.ProcessGuid)\ndelete e.Class;\nreturn e","name":"DataFusionProcMon","language":"javascript","parameters":["e"]},{"@type":"d","@version":2,"@class":"OFunction","idempotent":null,"code":"// pre-processing routine called by ProcessEvent\ntry{\n    var db = orient.getDatabase();\n    e['_classname'] = 'UserActionTracking'\n    delete e['ProcessID']\n    try {\n        var uat = JSON.parse(e['Message'])\n    }\n    catch(err) {\n        print(Date() + ' Offending DataFuseUserActions ' + e['Message'])\n        db.command('INSERT INTO FailedJSON SET line = ?', logline)\n        return 0\n    }\n    for(var k in uat){ e[k] = uat[k] }\n    return e\n}\ncatch(err){\n  var msg = 'DataFuseUserActions: ' + err + ' | input: ' + JSON.stringify(e)\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"DataFuseUserActions\", Message = ?', msg)\n}","name":"DataFuseUserActions","language":"javascript","parameters":["e"]},{"@type":"d","@version":2,"@class":"OFunction","idempotent":null,"code":"try{\n    // pre-processing routine called by ProcessEvent\n    var db = orient.getDatabase();\n    // handle OSQuery results\n    var re = /FROM\\s+(.+)\\s*/gi\n    var match = re.exec(e['Query'])\n    if(match.length < 2) return 0\n    var _classname = \"OSQuery_\" + match[1];  \n    for(var i = 0; i < e['Results'].length ; i++) {\n        var eachline = e['Results'][i]\n        eachline['Organisation'] = e['Organisation']\n        eachline['Hostname'] = e['Hostname']\n        eachline['QueryStart'] = e['QueryStart']\n        eachline['QueryEnd'] = e['QueryEnd']\n        eachline['RequestRequestRid'] = e['RequestRequestRid']\n        var stmt = 'INSERT INTO '+ _classname + ' CONTENT ' + JSON.stringify(eachline)\n        print(stmt);\n        try { r = db.command(stmt); }\n        catch(err){\n           print(Date() + ' Error inserting: ' + err)\n           db.command('INSERT INTO Errors SET OffendingStatement = ?, Error = ?', stmt, err)\n        }\n    }\n    return 0\n\n}\ncatch(err){\n  var msg = 'OSQuery: ' + err + ' | input: ' + JSON.stringify(e)\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"OSQuery\", Message = ?', msg)\n}","name":"OSQuery","language":"javascript","parameters":["e"]},{"@type":"d","@version":2,"@class":"OFunction","idempotent":null,"code":"// pre-processing routine called by ProcessEvent\ntry{  \n    var db = orient.getDatabase();\n\n    e['_classname'] = eventIdLookup(e['EventID'])\n    // Nxlog puts Sysmon ProcessId into this field, we want the ProcessCreate.ProcessId\n    e['SysmonProcessId'] = e['ProcessID']\n    delete e['ProcessID']\n    var re = /ProcessId: (\\d+)/g\n    var match = re.exec(e['Message'])\n    if(match != null) e['ProcessId'] = parseInt(match[1]);\n\n    // general correction, on some endpoints, these field names are inconsistent \n    if(e[\"SourceProcessGUID\"]) e[\"SourceProcessGuid\"] = e[\"SourceProcessGUID\"]; \n    if(e[\"TargetProcessGUID\"]) e[\"TargetProcessGuid\"] = e[\"TargetProcessGUID\"]; \n    //force ProcessGuid fields to upper case, these fields end up lower-case on some endpoints \n    if(e['ProcessGuid']) e['ProcessGuid'] = e['ProcessGuid'].toUpperCase()\n    if(e['ParentProcessGuid']) e['ParentProcessGuid'] = e['ParentProcessGuid'].toUpperCase()\n    if(e['SourceProcessGuid']) e['SourceProcessGuid'] = e['SourceProcessGuid'].toUpperCase()  \n    if(e['TargetProcessGuid']) e['TargetProcessGuid'] = e['TargetProcessGuid'].toUpperCase()   \n\n    if(e['_classname'] == 'ProcessCreate') {\n        // for building parentOf-sequence; see UpdateSequence function\n        if(e['ParentImage'] == \"System\") {  \n            e['Sequence'] = 'System > smss.exe'\n            e['ToBeProcessed'] = false\n        }\n        else { // use ProcessCreate first\n            var parent = db.query('SELECT FROM ProcessCreate \\\n                         where Organisation = ? AND Hostname = ? AND ProcessGuid = ?', e['Organisation'], e['Hostname'], e['ParentProcessGuid'])\n            if(parent.length > 0) {\n                   e['ParentRid'] = '' + parent[0].field('@rid')\n                   //print('ParentRID : ' + e['ParentRid'])\n                   if(parent[0].field('Sequence') != null && parent[0].field('Sequence').indexOf('System') == 0) {\n                      var exename = e['Image'].split('\\\\').reverse()[0];\n                      e['Sequence'] = parent[0].field('Sequence') + ' > ' + exename\n                   }\n            }\n            else{\n                print('using LineageLookup...')\n                var seq = db.query('SELECT FROM LineageLookup WHERE Organisation = ? AND Hostname = ? AND PID = ? AND Image = ?', \n                                   e.Organisation, e.Hostname, e.ProcessId, e.Image)\n                if(seq.length > 0){ \n                  e['Sequence'] = seq[0].field('Sequence') \n                }\n                else{ \n                     print('Will retry later after insertion for: ' + e.Image)                  \n                }\n             }\n        }\n        UpdateProcessTypeLookup(e)\n        AssignProcessType(e)\n        CheckSysmonBug(e)      \n    }\n\n    if(e['_classname'] == 'NetworkConnect') {\n      AssignDestinationType(e)\n    }\n    return e\n}\ncatch(err){\n  var msg = 'Microsoft_Windows_Sysmon: ' + err + ' | input: ' + JSON.stringify(e)\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"Microsoft_Windows_Sysmon\", Message = ?', msg)\n}","name":"Microsoft_Windows_Sysmon","language":"javascript","parameters":["e"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"try{\n    var db = orient.getDatabase();\n\n    // the first smss.exe is the only ProcessCreate record that has ParentImage = System\n    if(e.ParentImage == \"System\") { \n        print(''); print(Date() + \" Found \" + e.Image + \" on \" + e.Hostname); print('');\n        db.command('UPDATE ProcessType_id_cache SET smss_id = ? UPSERT WHERE Hostname = ? AND \\\n                            Organisation = ?',e.id, e.Hostname, e.Organisation)\n    }\n\n    // update explorer.exe ID into cache table to find BeforeExplorer process      \n    if(e.ParentImage.indexOf(\"Windows\\\\System32\\\\userinit.exe\") > 0 && e.Image.indexOf('explorer.exe') > 0){\n        print('')\n        print(Date() + \" Found \" + e.Image + \" on \" + e.Hostname)\n        print('')\n        db.command('UPDATE ProcessType_id_cache SET explorer_id = ? UPSERT WHERE Hostname = ? AND \\\n                           Organisation = ?', e.id, e.Hostname, e.Organisation)\n    }\n}\ncatch(err){\n  var msg = 'UpdateProcessTypeLookup: ' + err + ' | input: ' + JSON.stringify(e)\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"UpdateProcessTypeLookup\", Message = ?', msg)\n}","name":"UpdateProcessTypeLookup","language":"javascript","parameters":["e"]},{"@type":"d","@version":2,"@class":"OFunction","idempotent":null,"code":"// called by Microsoft_Windows_Sysmon pre-processing function\n// Updates timestamp id (every record has that field added within ProcessEvent) of first smss.exe & explorer.exe\n// 1. any processes with id between these 2 timestamp are considered BeforeExplorer\n// 2. any processes with id after explorer.exe are considered AfterExplorer\n// 3. it also possible to have explorer.exe id < smss.exe id, this means user has yet to sign-in\n// there's no return variable, parameter e is pass by reference, changes visible to caller\ntry{\n  var db = orient.getDatabase();\n  var t = db.query('select from ProcessType_id_cache Where Hostname = ? AND Organisation = ?', e.Hostname, e.Organisation)\n\n  if(t.length > 0 && t[0].field('smss_id') > 0) {\n      if(e.id > t[0].field('smss_id') && e.id > t[0].field('explorer_id')  \n         && t[0].getProperty('explorer_id') > t[0].field('smss_id')) {\n             e.ProcessType = \"AfterExplorerBackground\"\n       }\n       else {\n             e.ProcessType = \"BeforeExplorer\"\n       }\n  }\n  else { // this means the host has not rebooted after OpenEDR was installed\n      print('Found orphan @ ' + e.Hostname + ' | ' + e.Image)\n      e.ProcessType = \"Orphan\"\n      e.ToBeProcessed = false\n  }\n}\ncatch(err){\n  var msg = 'AssignProcessType: ' + err + ' | input: ' + JSON.stringify(e)\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"AssignProcessType\", Message = ?', msg)\n}","name":"AssignProcessType","language":"javascript","parameters":["e"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"try{\n    var db = orient.getDatabase();\n\n    var destinationType = 'external'\n    var ipv6LocalCheck = /^fe80|^fc00|^fd00|^ff0/\n\tvar internalCheck = /(^127\\.)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.)|(^169\\.254\\.)|(^255\\.255\\.255\\.255)|(^239\\.255\\.255\\.250)/\n    \n    if('DestinationIp' in e) { // field absent -> exception\n      if(e.DestinationIp.indexOf(':') > 0) {\n        if(ipv6LocalCheck.test(e.DestinationIp)) destinationType = 'internal'  \n      }\n      else {    \n        if(internalCheck.test(e.DestinationIp)) destinationType = 'internal'\n      }\n\t  // check if it's proxy\n      if(destinationType == 'internal' ){ \n        var proxy = db.query('SELECT from WebProxies WHERE Organisation = ? AND Address = ? AND Port = ?', \n                             e.Organisation, e.DestinationIp, e.DestinationPort )\n        if(proxy.length > 0) destinationType = 'proxy'       \n      }\n    }\n    e.DestinationType = destinationType\n}\ncatch(err){\n  var msg = 'AssignDestinationType: ' + err + ' | input: ' + JSON.stringify(e)\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"AssignDestinationType\", Message = ?', msg)\n}","name":"AssignDestinationType","language":"javascript","parameters":["e"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"try{\n    var db = orient.getDatabase();\n\n    db.command(\"DELETE VERTEX WATCHLIST WHERE Organisation = '\"+r.field(\"Organisation\")+\"' AND Hostname = '\"+r.field(\"Hostname\")+\"' AND ProcessGuid = '\"+r.field(\"ProcessGuid\")+\"'\"); \n\n    ConnectToProcessCreate(r);\n\n}\ncatch(err){\n  var msg = 'ProcessTerminate: ' + err + ' | input: ' + r.field('@rid')\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"ProcessTerminate\", Message = ?', msg)\n}","name":"ProcessTerminate","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"try{\n    var db = orient.getDatabase();\n\n    var u = db.command('UPDATE ImageLoadedHashes set Count = Count + 1 \\\n                        UPSERT RETURN AFTER @rid, Count, BaseLined WHERE ImageLoaded = ? \\\n                        AND Hashes = ?', r.field('ImageLoaded'),r.field('Hashes'))\n    // BasedLined means allowed (aka whitelisted)\n    if(u[0].field('BaseLined') == true) return \n\n    print()\n    print(Date() + \"Sys First Sighting of \" + r.field('ImageLoaded'))\n    print()\n\n    retry(\"db.command('CREATE EDGE SysSighted from \"+u[0].field('@rid')+\" TO \"+r.field('@rid')+\"')\")\n\n    db.command('CREATE EDGE UsedAsDriver FROM (SELECT FROM FileCreate WHERE Hostname = ? AND Organisation = ? AND TargetFilename.toLowerCase() = ? order by id desc limit 1) TO ? RETRY 10 WAIT 10',r.field('Hostname'),r.field('Organisation'),r.field('ImageLoaded').toLowerCase(),r.field('@rid'))\n\n    retry(\"db.command('UPDATE \" + r.field('@rid') + \" SET ToBeProcessed = false')\")\n\n}\ncatch(err){\n  var msg = 'DriverLoad: ' + err + ' | input: ' + r.field('@rid')\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"DriverLoad\", Message = ?', msg)\n}","name":"DriverLoad","language":"javascript","parameters":["r"]},{"@type":"d","@version":5,"@class":"OFunction","idempotent":null,"code":"// first smss.exe --1-> first explorer.exe session -2->\n// is the process within (1) or (2)? It matters because if it is within (1), \n// it could be a sign of backdoor/persistence\ntry{\n  \n    var db = orient.getDatabase();\n\n    // ImageHashes tracking\n    var u = db.command('UPDATE ImageHashes set Count = Count + 1 UPSERT RETURN AFTER @rid, Count \\\n                        WHERE Image = ? AND Hashes = ?', r.field('Image'), r.field('Hashes'))\n    u = db.command('UPDATE ImageHashes set HashCount = HashCount + 1 \\\n                            RETURN AFTER @rid, Count, HashCount, BaseLined WHERE Hashes = ?',r.field('Hashes'))\n    var IHT_rid = u[0].field('@rid')\n\n    // CommandLine tracking\n    function CmdTracking() {\n    u = db.command('UPDATE HostUserPrivilegeCommandLine set Count = Count + 1 \\\n                    UPSERT RETURN AFTER @rid, Count, Score WHERE \\\n                    Hostname = ? AND Organisation = ? AND User = ? AND CommandLine = ? AND IntegrityLevel = ?',r.field('Hostname'),r.field('Organisation'),r.field('User'),r.field('CommandLine'),r.field('IntegrityLevel'))\t\n    \n    }\n    try{\n       CmdTracking()\n    }\n    catch(err){\n       if(err.indexOf('not the latest')) CmdTracking()\n    }\n\tvar HUPC_rid = u[0].field('@rid')\n    \n    // Reboot Tracking\n    if(r.field('ParentImage').indexOf('dfpm.exe') > 0 && r.field('Image').indexOf('shutdown.exe') > 0) {\n        retry(\"db.command('CREATE EDGE Rebooted from \"+HUPC_rid+\" TO \"+r.field('@rid')+\"')\")\n        print(r.field('Hostname') + ' reboot command issued')\n    }\n\n    // assign if any exact same commandline with existing score > 0\n    var score = db.query('select from commandlinecluster \\\n                        where Score > 0 AND CommandLine = ?',r.field('CommandLine'))\n    // note OR condition\n    if(u[0].getProperty('Count') == 1 || score.length > 0 || u[0].field('Score') > 0) {\n        retry(\"db.command('CREATE EDGE CommandLineSighted FROM \"+HUPC_rid+\" TO \"+r.field('@rid')+\"')\")\n        retry(\"db.command('CREATE EDGE HasHashes FROM \"+HUPC_rid+\" to \"+IHT_rid+\"')\")\n        //print('CommandLineSighted ' + r.field('CommandLine'))\n\t}\n}\ncatch(err){\n  var msg = 'TrackProcess: ' + err + ' | input: ' + r.field('@rid')\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"TrackProcess\", Message = ?', msg)\n}","name":"TrackBeforeOrAfterExplorer","language":"javascript","parameters":["r"]},{"@type":"d","@version":2,"@class":"OFunction","idempotent":null,"code":"// called by ProcessEvent, returns WatchList record if found, else return null\ntry{\n    var db = orient.getDatabase();\n    var wpc = db.query('SELECT FROM WatchList WHERE Organisation = ? AND Hostname = ? \\\n              AND ProcessGuid = ?', e.Organisation, e.Hostname, e.ProcessGuid)\n    if(wpc.length == 0) return null\n\t// we assign this id so that the triggered function can look for events b4 this id\n    if(wpc[0].field('id') == null) {\n        retry(\"db.command('UPDATE \" + wpc[0].field('@rid') + \" SET id = \" + e.id + \"')\")\n        LinkWatchListRecord(wpc)\n    }\n    return wpc[0]\n}\ncatch(err){\n  var msg = 'CheckProcessWatchlist: ' + err + ' | input: ' + JSON.stringify(e)\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"CheckProcessWatchlist\", Message = ?', msg)\n}","name":"CheckProcessWatchlist","language":"javascript","parameters":["e"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// fix Sysmon bug: wrong ParentImage, ParentProcessGuid, ParentCommandLine\n// this bug results to circular ParentOf references\ntry{\n    var db = orient.getDatabase();\n\n    if(e.ParentImage.indexOf('svchost.exe') > 0 && (e.Image.indexOf('wininit.exe') > 0 || e.Image.indexOf('csrss.exe') > 0)) {\n        print('')\n        print('Sysmon bug found! ' + e.Image)\n        print('')         \n        var parent = db.query(\"select from pc Where ParentImage like '%smss.exe' AND \\\n                                    Image like '%smss.exe' AND ProcessId = ? AND Hostname = ? AND \\\n                                    Organisation = ? order by id desc \\\n                                    limit 1\", e.ParentProcessId, e.Hostname, e.Organisation)\n        if(parent.length == 0) return \n        print('Found CORRECT parent process')\n        e.ParentImage = parent[0].field('Image')\n        e.ParentCommandLine = parent[0].field('CommandLine')\n        e.ParentProcessGuid = parent[0].field('ProcessGuid')\n    }\n}\ncatch(err){\n  var msg = 'CheckSysmonBug: ' + err + ' | input: ' + JSON.stringify(e)\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"CheckSysmonBug\", Message = ?', msg)\n}","name":"CheckSysmonBug","language":"javascript","parameters":["e"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// eg: System > smss.exe > smss.exe > wininit.exe > services.exe > svchost.exe > wuauclt.exe > AM_Delta_Patch_1.321.2229.1.exe\n// note the frontend whitelisting need to use this function otherwise matching won't work\n\nvar exenames = sequence.split(\" > \")\nlastone = exenames[exenames.length - 1]\nlastone = lastone.replace('.exe','').replace(/[0-9]/g,'').replace(/[.]/g,'')\nvar newseq = ''\n// names like blahX64.exe will get affected too\nfor(var i = 0; i < exenames.length - 1; i++) \n  newseq = newseq + (exenames[i].replace('.exe','').replace(/[0-9]/g,'').replace(/[.]/g,'') + ' > ')\n\nreturn newseq + lastone\n\n\n\n","name":"stripDottedNumbers","language":"javascript","parameters":["sequence"]},{"@type":"d","@version":2,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase()\n\nvar cf = {\"Class\":\"CapturedFile\",\"ProcessGuid\":\"{6F9463F8-8DA1-606A-852E-000000001800}\",\"OriginalPath\":\"c:\\\\users\\\\q\\\\desktop\\\\21dbgview - copy - copy.exe\",\"UploadedFileName\":\"sample_F7F649EFE114DB7E4EDD93BD11171AAD7072C4006F36EA4D7BC683A541DB9781.ex_\",\"SourceName\":\"DataFusionProcMon\",\"Hostname\":\"DESKTOP-KTN8LG3\"}\n\n// Upload.exe will do this before transmitting...\nvar cfEscaped = escape(JSON.stringify(cf))\nprint(cfEscaped)\n\n// Simulating a upload instead of just direct INSERT\nProcessEvent(cfEscaped)\n\nreturn 1\n","name":"test_CapturedFile","language":"javascript","parameters":null},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase()\n\nvar pt = {\"EventTime\":\"2021-04-05 12:10:09\",\"Hostname\":\"DESKTOP-KTN8LG3\",\"Keywords\":-9223372036854775808,\"EventType\":\"INFO\",\"SeverityValue\":2,\"Severity\":\"INFO\",\"EventID\":25,\"SourceName\":\"Microsoft-Windows-Sysmon\",\"ProviderGuid\":\"{5770385F-C22A-43E0-BF4C-06F5698FFBD9}\",\"Version\":5,\"Task\":25,\"OpcodeValue\":0,\"RecordNumber\":113745,\"ProcessID\":11220,\"ThreadID\":4416,\"Channel\":\"Microsoft-Windows-Sysmon/Operational\",\"Domain\":\"NT AUTHORITY\",\"AccountName\":\"SYSTEM\",\"UserID\":\"S-1-5-18\",\"AccountType\":\"User\",\"Message\":\"Process Tampering:\\r\\nRuleName: -\\r\\nUtcTime: 2021-04-05 04:10:09.363\\r\\nProcessGuid: {6f9463f8-8da1-606a-852e-000000001800}\\r\\nProcessId: 13636\\r\\nImage: C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\\r\\nType: Image is replaced\",\"Category\":\"Process Tampering (rule: ProcessTampering)\",\"Opcode\":\"Info\",\"RuleName\":\"-\",\"UtcTime\":\"2021-04-05 04:10:09.363\",\"ProcessGuid\":\"{6f9463f8-8da1-606a-852e-000000001800}\",\"Image\":\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\",\"Type\":\"Image is replaced\",\"EventReceivedTime\":\"2021-04-05 12:11:16\",\"SourceModuleName\":\"in\",\"SourceModuleType\":\"im_msvistalog\",\"DeviceVendor\":\"Microsoft\",\"DeviceProduct\":\"EventLog\"}\n\nAddEvent( escape(JSON.stringify(pt)) )\n\n\n","name":"test_ProcessTampering","language":"javascript","parameters":null},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"try{\n    var db = orient.getDatabase();\n    var pc = db.query('SELECT from ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ?',r.field('Organisation'),r.field('Hostname'),r.field('ProcessGuid'))\t\n\n    if(pc.length > 0) {\n    var n = db.query(\"traverse in('CommandLineSighted'), out('SimilarTo') from \" + pc[0].field('@rid'));\n      for(var i = 0; i < n.length; i++) {\n         if(n[i].field('BaseLined') == true) {\n            print('ProcessTampering found whitelisted')\n            return;\n         }\n      }  \n      ConnectToProcessCreate(r);\n    }\n// it is possible to have missing ProcessCreate while still capturing ProcessTampering events\n// something to consider how to deal with orphan ProcessTamper\n}\ncatch(err){\n  var msg = 'ProcessTampering: ' + err + ' | input: ' + r.field('@rid')\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"ProcessTampering\", Message = ?', msg)\n}\n","name":"ProcessTampering","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase()\n\nvar pc = {\"EventTime\":\"2021-04-05 12:10:09\",\"Hostname\":\"DESKTOP-KTN8LG3\",\"Keywords\":-9223372036854775808,\"EventType\":\"INFO\",\"SeverityValue\":2,\"Severity\":\"INFO\",\"EventID\":1,\"SourceName\":\"Microsoft-Windows-Sysmon\",\"ProviderGuid\":\"{5770385F-C22A-43E0-BF4C-06F5698FFBD9}\",\"Version\":5,\"Task\":1,\"OpcodeValue\":0,\"RecordNumber\":113744,\"ProcessID\":11220,\"ThreadID\":4416,\"Channel\":\"Microsoft-Windows-Sysmon/Operational\",\"Domain\":\"NT AUTHORITY\",\"AccountName\":\"SYSTEM\",\"UserID\":\"S-1-5-18\",\"AccountType\":\"User\",\"Message\":\"Process Create:\\r\\nRuleName: -\\r\\nUtcTime: 2021-04-05 04:10:09.353\\r\\nProcessGuid: {6f9463f8-8da1-606a-852e-000000001800}\\r\\nProcessId: 13636\\r\\nImage: C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\\r\\nFileVersion: 89.0.774.68\\r\\nDescription: Microsoft Edge\\r\\nProduct: Microsoft Edge\\r\\nCompany: Microsoft Corporation\\r\\nOriginalFileName: msedge.exe\\r\\nCommandLine: \\\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\\\" --type=renderer --field-trial-handle=1956,13556612160138863865,13153239581568388022,131072 --lang=en-US --disable-client-side-phishing-detection --device-scale-factor=1 --num-raster-threads=4 --enable-main-frame-before-activation --renderer-client-id=9 --no-v8-untrusted-code-mitigations --mojo-platform-channel-handle=164 /prefetch:1\\r\\nCurrentDirectory: C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\89.0.774.68\\\\\\r\\nUser: DESKTOP-KTN8LG3\\\\q\\r\\nLogonGuid: {6f9463f8-6084-6065-d4d2-1b0000000000}\\r\\nLogonId: 0x1BD2D4\\r\\nTerminalSessionId: 2\\r\\nIntegrityLevel: Low\\r\\nHashes: MD5=FC449610FB8823F74414DF453B0E636E,SHA256=A9E592770FA1A63126ADA4F3B2F35FAE5EBF38D40A8178E412D5DF187D4D6162,IMPHASH=AA958B231113F22EC7CBE355F040ECED\\r\\nParentProcessGuid: {6f9463f8-8d7f-606a-4f2e-000000001800}\\r\\nParentProcessId: 7436\\r\\nParentImage: C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\\r\\nParentCommandLine: \\\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\\\" --profile-directory=Default\",\"Category\":\"Process Create (rule: ProcessCreate)\",\"Opcode\":\"Info\",\"RuleName\":\"-\",\"UtcTime\":\"2021-04-05 04:10:09.353\",\"ProcessGuid\":\"{6f9463f8-8da1-606a-852e-000000001800}\",\"Image\":\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\",\"FileVersion\":\"89.0.774.68\",\"Description\":\"Microsoft Edge\",\"Product\":\"Microsoft Edge\",\"Company\":\"Microsoft Corporation\",\"OriginalFileName\":\"msedge.exe\",\"CommandLine\":\"\\\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\\\" --type=renderer --field-trial-handle=1956,13556612160138863865,13153239581568388022,131072 --lang=en-US --disable-client-side-phishing-detection --device-scale-factor=1 --num-raster-threads=4 --enable-main-frame-before-activation --renderer-client-id=9 --no-v8-untrusted-code-mitigations --mojo-platform-channel-handle=164 /prefetch:1\",\"CurrentDirectory\":\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\89.0.774.68\\\\\",\"User\":\"DESKTOP-KTN8LG3\\\\q\",\"LogonGuid\":\"{6f9463f8-6084-6065-d4d2-1b0000000000}\",\"LogonId\":\"0x1bd2d4\",\"TerminalSessionId\":\"2\",\"IntegrityLevel\":\"Low\",\"Hashes\":\"MD5=FC449610FB8823F74414DF453B0E636E,SHA256=A9E592770FA1A63126ADA4F3B2F35FAE5EBF38D40A8178E412D5DF187D4D6162,IMPHASH=AA958B231113F22EC7CBE355F040ECED\",\"ParentProcessGuid\":\"{6f9463f8-8d7f-606a-4f2e-000000001800}\",\"ParentProcessId\":\"7436\",\"ParentImage\":\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\",\"ParentCommandLine\":\"\\\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\\\" --profile-directory=Default\",\"EventReceivedTime\":\"2021-04-05 12:11:16\",\"SourceModuleName\":\"in\",\"SourceModuleType\":\"im_msvistalog\",\"DeviceVendor\":\"Microsoft\",\"DeviceProduct\":\"EventLog\"}\n\n\nAddEvent( escape(JSON.stringify(pc)) )\n\nprint(pc['ProcessGuid'])\n\nvar r = db.query('SELECT FROM ProcessCreate WHERE ProcessGuid = ? limit 1', pc['ProcessGuid'].toUpperCase())\n\nprint('query length: ' + r.length)\nr = r[0]\n\nvar s = db.query('SELECT FROM ProcessCreate WHERE ProcessGuid = ? AND Hostname = ? \\\n\tAND Organisation = ? limit 1', r.field('ProcessGuid'), r.field('Hostname'), r.field('Organisation') )\n\nprint('requery length: ' + s.length)\n\n\n ","name":"test_ProcessCreate","language":"javascript","parameters":null},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\nvar size = db.getSize()\nprint(size)","name":"sizeofdb","language":"javascript","parameters":null},{"@type":"d","@version":2,"@class":"OFunction","idempotent":null,"code":"// called by ProcessEvent to link CapturedFile to ProcessCreate record\ntry{\n    var db = orient.getDatabase();\n    print()\n    print(Date() + \"||\" + r.field('@rid') + \" CapturedFile \" + r.field('ProcessGuid') + ' OriginalPath: ' + r.field('OriginalPath'))\n    print()\n    var pc = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ? limit 1',\n                      r.field('Organisation'), r.field('Hostname'),  r.field('ProcessGuid'));\n    if(pc.length == 0) {\n      var msg = 'CapturedFile: No ProcessCreate | input: ' + r.field('@rid')\n      print(msg) \n      db.command('INSERT INTO Errors Set Function = \"CapturedFile\", Message = ?', msg)\n      return\n    }\n    retry(\"db.command('CREATE EDGE WrittenFileSighted FROM \" + pc[0].field('@rid') + \" to \" + r.field('@rid') + \"')\")\n    print('linked CapturedFile ' + r.field('@rid') + ' to ' + pc[0].field('@rid'))\n}\ncatch(err){\n  var msg = 'CapturedFile: ' + err + ' | input: ' + r.field('@rid')\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"CapturedFile\", Message = ?', msg)\n}","name":"CapturedFile","language":"javascript","parameters":["r"]},{"@type":"d","@version":2,"@class":"OFunction","idempotent":null,"code":"// Microsoft_Windows_Security_Auditing function\n// pre-processing routine called by ProcessEvent\ntry{\n    var db = orient.getDatabase();\n    if(e.EventID == 4689) e[\"_classname\"] = 'TerminatedProcess4689'\n\n    if(e.EventID == 4688){\n      e[\"_classname\"] = 'CreatedProcess4688'  \n      if('Sequence' in e) UpdateLineageLookup(e)\n    }\n    return e\n}\ncatch(err){\n  var msg = 'Microsoft_Windows_Security_Auditing: ' + err + ' | input: ' + JSON.stringify(e)\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"Microsoft_Windows_Security_Auditing\", Message = ?', msg)\n}","name":"Microsoft_Windows_Security_Auditing","language":"javascript","parameters":["e"]},{"@type":"d","@version":3,"@class":"OFunction","idempotent":null,"code":"// called by Microsoft_Windows_Security_Auditing to use 4688 events to update lineage lookup table\ntry{\n    var db = orient.getDatabase();\n\n    if(!('NewProcessName' in e)) return // can't do anything\n\n    if('Sequence' in e){\n       print('Using early sequence: ' + e.Sequence)\n       db.command('UPDATE LineageLookup set Sequence = ?, Image = ?\\\n                   UPSERT WHERE Organisation = ? AND Hostname = ? AND PID = ?', \n                  e.Sequence, e.NewProcessName, e.Organisation, e.Hostname, e.PID)\n    }\n    else{\n      if(!('CreatorProcessName' in e)) return // can't do anything\n      var parent = db.query('select Sequence from LineageLookup WHERE Organisation = ? AND Hostname = ? AND PID = ? AND Image = ?', \n                            e.Organisation, e.Hostname, e.PPID, e.CreatorProcessName)\n      \n      if(parent.length == 0) return // will try again when ProcessEvent:ProcessCreate \n      \n      var newProcessEXEname = e.NewProcessName.split('\\\\').reverse()[0];\n      var newSequence = parent[0].field('Sequence') + ' > ' + newProcessEXEname\n      if(newSequence.indexOf('null') < 0) {\n      \te.Sequence = newSequence\n        db.command('UPDATE LineageLookup set Sequence = ?, Image = ? UPSERT WHERE Organisation = ? AND Hostname = ? AND PID = ?', \n\t\t\t\t\t\tnewSequence, e.NewProcessName, e.Organisation, e.Hostname, e.PID)\n      }\n      //print('UpdateLineageLookup: ' + newSequence)\n    }\n}\ncatch(err){\n  var msg = 'UpdateLineageLookup: ' + err + ' | input: ' + JSON.stringify(e)\n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"UpdateLineageLookup\", Message = ?', msg)\n}","name":"UpdateLineageLookup","language":"javascript","parameters":["e"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase()\nvar suspected = db.query('select from seq where Count < 5 AND BaseLined = false')\nprint(suspected.length)\nfor(var i=0; i < suspected.length; i++) {\n  //print( suspected[i].field('Sequence') )\n  var PCs = db.query('select from processcreate where Sequence = ?',suspected[i].field('Sequence'))\n  for(var n=0; n < PCs.length; n++){\n    var ParentImage = PCs[n].field('ParentImage').split('\\\\').reverse()[0]\n    if(suspected[i].field('Sequence').indexOf(ParentImage) < 0)\n      print(PCs[n].field('EventTime') + '|'+ suspected[i].field('Sequence'))\n  }\n}","name":"checkSequence","language":"javascript","parameters":null},{"@type":"d","@version":11,"@class":"OFunction","idempotent":null,"code":"/*\n\tseq is Lineage sequence: System > .... > explorer.exe\n    rid is @rid of a ProcessCreate\n    r is inserted ProcessCreate record\n*/\ntry{\n    var db = orient.getDatabase();\n    if(seq.length == 0) return\n    var sc = db.command('UPDATE seq SET Count = Count + 1 UPSERT RETURN AFTER @rid, Count, Score WHERE Sequence = ?',seq) \n    var toLink = false\n    if(sc[0].field('Score') > 0) toLink = true\n    if(sc[0].field('Count') == 1) {\n      var wl = db.query('select from seq WHERE BaseLined = true AND Sequence = ?', stripDottedNumbers(seq))\n      if(wl.length == 0) toLink = true // not whitelisted\n    }\n    if(toLink) {\n      sql = 'CREATE EDGE SequenceSighted FROM '+sc[0].field('@rid')+' TO '+ rid\n      retry(\"db.command('\" + sql + \"')\")\n    }\n    if(seq.indexOf('winlogon.exe') > 0 || seq.indexOf('wininit.exe') > 0)\n     print(r.field('EventTime') + '\\n' +  r.field('Organisation') + ' | ' + r.field('Hostname') + ' : ' + seq.replace('System > smss.exe > smss.exe > ','... ') + ' | ' + sc[0].field('Count') + ' | ' + rid);     \n   else \n     print(r.field('EventTime') + '\\n' +  r.field('Organisation') + ' | ' + r.field('Hostname') + ' : ' + seq + ' | ' + sc[0].field('Count') + ' | ' + rid);     \n\n}\ncatch(err){\n  var msg = 'TrackLineage: ' + err + ' | input: ' + seq + ' , ' + rid \n  print(msg) \n  db.command('INSERT INTO Errors Set Function = \"TrackLineage\", Message = ?', msg)\n}","name":"TrackLineage","language":"javascript","parameters":["seq","rid","r"]},{"@type":"d","@version":4,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase()\nvar suspected = db.query(\"select from processcreate where NOT Sequence like 'System%' AND NOT ProcessType = 'Orphan' limit 1000\")\nvar msg = 'number of no sequence ' + suspected.length \nprint(msg)\nvar withParent = 0\nvar woParent = 0\nfor(var i = 0; i < suspected.length; i++) {\n\tvar parent = db.query(\"select from createdprocess4688 where PID = ? AND NewProcessName = ?\", \n\tsuspected[i].field('ParentProcessId'), suspected[i].field('ParentImage') )\n    if(parent.length > 0) withParent++\n    else {\n       parent = db.query(\"select from processcreate where Organisation = ? AND Hostname = ? AND ParentProcessGuid = ?\", \n\t\t\t\t\t\t  suspected[i].field('Organisation'), suspected[i].field('Hostname'), suspected[i].field('ParentProcessGuid') )\n       if(parent.length == 0) print('checkSequence2 missing: ' + suspected[i].field('ParentImage') )\n      else withParent++\n    }\n}\nmsg = 'With parents: ' + withParent + ' vs ' + woParent\nprint('\\n' + msg + '\\n')\nreturn msg","name":"checkSequence_2","language":"javascript","parameters":null},{"@type":"d","@version":5,"@class":"OFunction","idempotent":null,"code":"\nvar event = \"%7B%22EventTime%22%3A%222021-09-03%2015%3A47%3A16%22%2C%22Hostname%22%3A%22DESKTOP-R14LL9N%22%2C%22Keywords%22%3A36028797018963970%2C%22EventType%22%3A%22INFO%22%2C%22SeverityValue%22%3A2%2C%22Severity%22%3A%22INFO%22%2C%22EventID%22%3A4%2C%22SourceName%22%3A%22DataFuseUserActions%22%2C%22Task%22%3A0%2C%22RecordNumber%22%3A573%2C%22ProcessID%22%3A0%2C%22ThreadID%22%3A0%2C%22Channel%22%3A%22Application%22%2C%22Message%22%3A%22%7B%5C%22Action%5C%22%3A%5C%22Drive%20Removed%5C%22%2C%5C%22Name%5C%22%3A%5C%22D%5C%22%7D%22%2C%22Opcode%22%3A%22Info%22%2C%22EventReceivedTime%22%3A%222021-09-03%2015%3A47%3A17%22%2C%22SourceModuleName%22%3A%22in%22%2C%22SourceModuleType%22%3A%22im_msvistalog%22%2C%22DeviceVendor%22%3A%22Microsoft%22%2C%22DeviceProduct%22%3A%22EventLog%22%7D\"\n\nAddEvent(event,\"MyCompany\")","name":"test_EventInsertion","language":"javascript","parameters":null},{"@type":"d","@version":2,"@class":"OFunction","idempotent":false,"code":"var db = orient.getDatabase();\ndb.command('INSERT INTO queue SET event = ?, organisation = ?, insertedtime = date()', jsondata, organisation)\n","name":"AddEvent","language":"javascript","parameters":["jsondata","organisation"]},{"@type":"d","@version":5,"@class":"OFunction","idempotent":false,"code":"var db = orient.getDatabase();\n\nvar BATCHSIZE = 100\n\nvar events = db.command('delete from queue return before limit ?', BATCHSIZE)\nfor(var i = 0; i < events.length; i++) {\n\tProcessEvent(events[i].field('event'), events[i].field('organisation'))\n}\n ","name":"dequeue","language":"javascript","parameters":["jsondata","organisation"]},{"@type":"d","@version":39,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase()\n\nvar p = db.query('select from processcreate where NOT Sequence like \"System%\" AND NOT ProcessType = \"Orphan\" order by id desc')\n\nprint('\\n\\n========start=========')\nfunction findParent(pc) {\n   var parentSeq = ''\n   if(pc.field('@class') == 'ProcessCreate') {\n       // when we reach a process having sequence, we return from recursion\n       var seq = db.query('SELECT FROM LineageLookup where Organisation = ? AND Hostname = ? AND PID = ? AND Image = ?',\n                           pc.field('Organisation'), pc.field('Hostname'), pc.field('ProcessId'), pc.field('Image') )\n       if(seq.length > 0) return seq[0].field('Sequence')\n     \n       var parent = db.query('SELECT from ProcessCreate where Organisation = ? AND Hostname = ? AND ProcessGuid = ?',\n                             pc.field('Organisation'), pc.field('Hostname'), pc.field('ParentProcessGuid'))\n       if(parent.length > 0) {\n          //print('\\nProcessCreate Parent: ' + parent[0].field('Image'))\n          parentSeq = findParent(parent[0])\n          if(parent[0].field('Sequence')) return (parent[0].field('Sequence') + ' > ' + pc.field('Image').split('\\\\').reverse()[0])\n          if(parentSeq.indexOf('System') == 0) return (parentSeq + ' > ' + pc.field('Image').split('\\\\').reverse()[0])\n          else return parentSeq\n       }\n       parent = db.query('SELECT from CreatedProcess4688 where Organisation = ? AND Hostname = ? AND PID = ? AND NewProcessName = ?',\n                          pc.field('Organisation'), pc.field('Hostname'), pc.field('ParentProcessId'), pc.field('ParentImage') )\n       if(parent.length > 0) {\n          //print('\\nfound 4688 parent: ' + parent[0].field('NewProcessName'))\n          parentSeq = findParent(parent[0])\n          if(parentSeq.indexOf('System') == 0) return (parentSeq + ' > ' + pc.field('Image').split('\\\\').reverse()[0])\n          else return parentSeq\n       }\n       print('Tried both ProcessCreate & 4688 - No parent for ' + pc.field('Image') + ' parent: ' + pc.field('ParentImage'))\n   }\n   else{ // using 4688 audit events\n     if(!pc.field('CreatorProcessName') && pc.field('NewProcessName').indexOf('smss.exe') > 0) return 'System > smss.exe'\n      var seq = db.query('SELECT FROM LineageLookup where Organisation = ? AND Hostname = ? AND PID = ? AND Image = ?',\n                           pc.field('Organisation'), pc.field('Hostname'), pc.field('PID'), pc.field('ProcessName') )\n      if(seq.length > 0) return seq[0].field('Sequence')\n      \n      parent = db.query('SELECT from CreatedProcess4688 where Organisation = ? AND Hostname = ? AND PID = ? AND NewProcessName = ?',\n                          pc.field('Organisation'), pc.field('Hostname'), pc.field('PPID'), pc.field('ParentProcessName') )\n\n     // WILL LOOP if we try searching ProcessCreate parent again! \n      if(parent.length > 0) {\n          //print('\\n4688 Parent: ' + parent[0].field('NewProcessName'))\n          parentSeq = findParent(parent[0])\n      }   \n      if(parentSeq.indexOf('System') == 0) return (parentSeq + ' > ' + pc.field('NewProcessName').split('\\\\').reverse()[0])\n      else return parentSeq\n     \n      print('4688 path - No parent for ' + pc.field('NewProcessName') + ' parent: ' + pc.field('CreatorProcessName'))\n   }\n   return \"\"\n}\nvar total = 0\nfor(var i = 0; i < p.length; i++) {\n  var s = findParent(p[i])\n  //print('Seq: ' + s + '\\n')\n  if(s.length > 0) total++ \n  else {\n     print('Missing for: ' + p[i].field('Image') + ' | parent: ' + p[i].field('ParentImage'))\n     print('Orphan RID: ' + p[i].field('@rid'))\n     print('========================')\n  }\n}\nprint('Total with sequence: ' + total)","name":"test_recursion","language":"javascript","parameters":null}]}