{"records":[{"@type":"d","@rid":"#6:0","@version":1,"@class":"OFunction","idempotent":false,"code":"var db = orient.getDatabase();\u000a\u000a// process log line sent from insertEvent.js\u000avar logline = unescape(jsondata)\u000aif(logline.trim().length == 0) return\u000avar e = null\u000atry {\u000a  e = removeSpaceFromKey(JSON.parse(logline));    \u000a}\u000acatch(err) {\u000a   print(Date() + err);\u000a   db.command('INSERT INTO FailedJSON SET line = ?', logline)\u000a   return\u000a}\u000a\u000a// every event gets a unique ID\u000avar id = (new Date())*1\u000ae['id'] = id\u000a\u000a//for multi-tenancy support\u000aif(organisation != undefined) { \u000a  if(organisation.length > 0) e['Organisation'] = organisation\u000a}\u000aif(e['Organisation'] === undefined) e['Organisation'] = 'MyCompany' \u000a  \u000a// default class if can't figure out which class later\u000aclassname = 'WinEvent' \u000ae['ToBeProcessed'] = true\u000a\u000a// This Keywords field is a huge negative number that breaks record insertion\u000aif(e['Keywords'] != undefined) delete e['Keywords']\u000a\u000a// Pre-insertion processing...\u000avar funcName = e[\"SourceName\"].replace(/-/g,'_')\u000aif(funcName in this){\u000a    e = this[funcName](e); \u000a    if(e == 0) return; \u000a    // pre-processing that needs to continue returns a _classname\u000a    if(\"_classname\" in e) {\u000a       classname = e[\"_classname\"]\u000a       delete e[\"_classname\"]\u000a    }\u000a}\u000a\u000a//problematic for server-side parsing... it is repeated data anyway\u000aif(e['Message'] != null) delete e['Message'] \u000a\u000a//--Insert event------\u000avar jsonstring = JSON.stringify(e)\u000avar stmt = 'INSERT INTO '+ classname + ' CONTENT ' + jsonstring\u000avar r = null\u000atry { r = db.command(stmt); }\u000acatch(err){\u000a    print(Date() + ' Error inserting ' + stmt)\u000a    db.command('INSERT INTO FailedJSON SET line = ?', logline)\u000a    return\u000a}\u000a//--End insert event------\u000a\u000a// post-insertion processing...\u000a// Linking edges that need RID of inserted record is done here\u000aswitch(classname) { \u000acase \"ProcessCreate\":\u000a\u0009\u0009CheckForeign(r[0])\u000a    \u0009CheckSpoof(r[0])\u000a    \u0009TrackProcess(r[0])\u000a        break;\u000a    \u000acase \"ImageLoad\": //this is filtered by nxlog.conf\u000a\u0009\u0009CheckForeign(r[0])\u000a      // track full-path-to-file AND Hashes\u000a    \u0009db.command('UPDATE ImageLoadedHashes set Count = Count + 1 UPSERT RETURN AFTER \\\u000a                 @rid, Count WHERE ImageLoaded = ? AND Hashes = ?',\u000a                 r[0].field('ImageLoaded'), r[0].field('Hashes') )\u000a\u000a      // track ONLY Hashes        \u000a      \u0009db.command('UPDATE ImageLoadedHashes set HashCount = HashCount + 1 \\\u000a                  UPSERT RETURN AFTER @rid, HashCount, BaseLined WHERE Hashes = ?', r[0].field('Hashes') )\u000a        ConnectToProcessCreate(r[0]);\u000a    \u0009break;\u000a\u000acase \"UntrustedFile\":\u000acase \"UserActionTracking\":\u000acase \"SpoofParentProcessId\":\u000acase \"NetworkConnect\":\u000acase \"ProcessTerminate\":\u000acase \"DriverLoad\":\u000a       this[classname](r[0])\u000a       break;\u000a    \u000acase \"PipeCreated\":\u0009    \u0009\u000acase \"PipeConnected\":   \u000acase \"RawAccessRead\":   \u000acase \"FileCreateTime\":  \u0009\u000acase \"FileCreate\": \u0009     \u000acase \"FileCreateStreamHash\":     \u000acase \"RegistryEvent\":\u000a        var wpc = CheckProcessWatchlist(e)\u000a        if(wpc == null) return\u000a        var sql = 'CREATE EDGE ' + edgeLookup(r[0].field('@class')) + ' FROM \\\u000a\u0009\u0009\u0009\u0009\u0009  ' + wpc.field('PCrid') + ' TO ' + r[0].field('@rid')\u000a\u0009\u0009retry(\"db.command('\" + sql + \"')\")\u000a        retry(\"db.command('UPDATE \"+ r[0].field('@rid') + \" SET ToBeProcessed = false')\")\u000a    \u0009break;\u000a\u000acase \"CreateRemoteThread\":\u000acase \"ProcessAccess\":\u000a       if(CheckProcessWatchlist(e) == null) return\u000a       this[classname](r[0])    \u000a       break;\u000a}\u000a\u000areturn","name":"AddEvent","language":"javascript","parameters":["jsondata","organisation"]},{"@type":"d","@rid":"#6:1","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar circularCheck = {} //each @rid should only be seen ONCE.\u000a\u000afunction findParent(n, s) { // start from leaf child node\u000a  if(circularCheck[n] === undefined) {\u000a     circularCheck[n] = 1\u000a  }\u000a  else {\u000a     print('circular path detected ' + n)\u000a  \u0009 return s + ' circular path'\u000a  }\u000a  var separator = s.length > 0 ? ' > ' : '';\u000a  var r = db.query('select from ' + n)\u000a  if(r.length == 0) return s; // no record, don't proceed\u000a  \u000a  // reached dead-end (circular path handled earlier)\u000a  if(r[0].getProperty('in_ParentOf') == null) {\u000a    var i = r[0].getProperty('Image').split(\"\\\\\")\u000a    if(r[0].getProperty('Image').indexOf('smss.exe') > 0) i[i.length-1] = 'System > ' + i[i.length-1]\u000a    return (i[i.length-1] + separator + s)      \u000a  }\u000a  //print('in_ParentOf RID = ' + r[0].getProperty('in_ParentOf'))\u000a  var p = db.query('select expand(out) from ' + r[0].getProperty('in_ParentOf').toString().replace('[','').replace(']',''))\u000a  var i = r[0].getProperty('Image').split(\"\\\\\")\u000a  return findParent(p[0].getProperty('@rid'), i[i.length-1] + separator + s);\u000a}\u000a\u000areturn findParent(startrid,'')\u000a","name":"GetParentOfSequence","language":"javascript","parameters":["startrid"]},{"@type":"d","@rid":"#6:2","@version":1,"@class":"OFunction","idempotent":null,"code":"/*\u000a\u0009This is a Dynamic Hook function. Using console:\u000a    alter class parentof Superclass +OTriggered\u000a    alter class parentof CUSTOM onAfterCreate='UpdateSequence'\u000a    This function is called whenever ParentOf edge is linked between a Parent & Child Process.\u000a    This function will upsert the lineage sequence class (named Sequence) to track new process lineage\u000a*/\u000a\u000avar db = orient.getDatabase();\u000a\u000afunction fixSequence(prevSeq){\u000a\u0009print('Found partial sequence, attempt to fix: ' + prevSeq + ' from ' + doc.field('in').field('@rid'))\u000a    for(var i = 0; i < 3; i++) {\u000a      var ps = db.query('SELECT GetParentOfSequence(?) as seq', doc.field('out').field('@rid'))\u000a      prevSeq = ps[0].field('seq')\u000a      if(prevSeq == null || prevSeq.indexOf('System >') < 0) continue;\u000a      //found valid sequence\u000a      db.command('UPDATE ? SET Sequence = ? RETURN AFTER Sequence', doc.field('out').field('@rid'), prevSeq)\u000a      print('GetParentOfSequence found: ' + prevSeq + ' for ' + doc.field('in').field('@rid'))\u0009\u000a      return prevSeq\u000a    }\u000a    var parentEXE = doc.field('out').field('Image').split(\"\\\\\")\u000a\u0009parentEXE = parentEXE[parentEXE.length - 1]\u000a    var childEXE = doc.field('in').field('Image').split(\"\\\\\")\u000a\u0009childEXE = childEXE[childEXE.length - 1]\u000a    var partialSeq = parentEXE + ' > ' + childEXE\u000a    //print(partialSeq)\u000a    var seq = db.query('SELECT Sequence from seq WHERE Sequence like \"%' + partialSeq + '\"')\u000a    if(seq.length > 0) return seq[0].field('Sequence').replace(' > ' + childEXE, \"\")\u000a    return parentEXE\u000a}\u000a\u000afunction upsertSequence(seq, rid){\u000a    var sc = db.command('UPDATE seq SET Count = Count + 1 UPSERT \\\u000a\u0009\u0009\u0009\u0009RETURN AFTER @rid, Count, Score WHERE Sequence = ?',seq) \u000a    var toLink = false\u000a\u0009if(sc[0].field('Score') > 0) toLink = true\u000a    if(sc[0].field('Count') == 1) {\u000a       var wl = db.query('select from seq WHERE BaseLined = true AND Sequence = ?', stripDottedNumbers(seq))\u000a       if(wl.length == 0) toLink = true // not whitelisted\u000a    }\u000a    if(toLink) {\u000a\u0009\u0009sql = 'CREATE EDGE SequenceSighted FROM '+sc[0].field('@rid')+' TO '+ rid\u000a        retry(\"db.command('\" + sql + \"')\")\u000a    }\u000a\u0009print(doc.field('in').field('EventTime') + '\\n' +  doc.field('in').field('Organisation') + \u000a           ' | ' + doc.field('in').field('Hostname') + ' : ' + seq + '|' + sc[0].field('Count'));\u000a}\u000a\u000a// Sometimes Sequence may not be assigned at Microsoft_Windows_Sysmon pre-processing function\u000aif(doc.field('in').field('Sequence') === null) {\u000a  print('no pre-processed Sequence!')\u000a  var exename = doc.field('in').field('Image').split(\"\\\\\")\u000a  exename = exename[exename.length - 1]\u000a  var prevSeq = '' + doc.field('out').field('Sequence'); \u000a  for(var i = 0; i < 3; i++){ //retry mechanism\u000a    try{\u000a       //valid sequence always starts with 'System >' \u000a       if(prevSeq.indexOf('System > ') == 0) { \u000a          var seq = prevSeq + ' > ' + exename\u000a          var sql = 'UPDATE ' + doc.field('in').field('@rid') + ' SET \\\u000a                    Sequence = \"'+seq+'\" RETURN AFTER Sequence'\u000a          retry(\"db.command('\" + sql + \"')\")\u000a          upsertSequence(seq, doc.field('in').field('@rid'))    \u000a          break;\u000a        }\u000a        prevSeq = fixSequence(prevSeq)\u000a    }\u000a    catch(err){\u000a      if(err.indexOf('UPDATE') >= 0) continue; \u000a    }\u000a  }\u000a  // update ProcessType if unable to recover any Sequence\u000a  if(prevSeq == null || prevSeq.indexOf('System >') < 0){\u000a    var sql = 'UPDATE ' + doc.field('in').field('@rid') + ' SET ProcessType = \"Orphan\"'\u000a    retry(\"db.command('\" + sql + \"')\")\u000a  }\u000a}\u000aelse upsertSequence(doc.field('in').field('Sequence'),doc.field('in').field('@rid'))","name":"UpdateSequence","language":"javascript","parameters":null},{"@type":"d","@rid":"#6:3","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000a\u000atry {\u000a\u0009db.query(\"SELECT \" + doc.field('FunctionName') + \"(\" + doc.field('rid') + \")\");\u000a}\u000acatch(err) {\u000a    db.command('INSERT INTO Errors Set Command = ?, Message = ?', \"TriggerProcessing\", err)\u000a    print('Failed @ TriggerProcessing' + err)\u000a}","name":"TriggerProcessing","language":"javascript","parameters":null},{"@type":"d","@rid":"#6:4","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000a//var r = db.query(\"SELECT FROM \" + rid)\u000a//if(r.length == 0) return\u000avar rid = r.field('@rid')\u000a\u000a//print('Found ' + rid)\u000avar source = db.query('SELECT FROM index:ProcessCreate.Organisation_Hostname_ProcessGuid WHERE key = [?,?,?]', r.field('Organisation'), r.field('Hostname'),  r.field('SourceProcessGuid'));\u000a\u000aif(source.length > 0) {\u000a\u0009//print('CreateRemoteThread Source found')\u000a    retry(\"db.command('CREATE EDGE CreatedThread FROM \" + source[0].field('rid').field('@rid') + \" TO \" + rid + \"')\")\u000a}\u000a\u000a\u000avar target = db.query('SELECT FROM index:ProcessCreate.Organisation_Hostname_ProcessGuid WHERE key = [?,?,?]', r.field('Organisation'), r.field('Hostname'), r.field('TargetProcessGuid'))\u000a\u000aif(target.length > 0) {\u000a\u0009//print('CreateRemoteThread Target found')\u000a    retry(\"db.command('CREATE EDGE RemoteThreadFor FROM \" + rid + \" TO \" + target[0].field('rid').field('@rid') + \"')\")\u000a}\u000a\u000aretry(\"db.command('UPDATE \"+ rid + \" SET ToBeProcessed = false')\")","name":"CreateRemoteThread","language":"javascript","parameters":["r"]},{"@type":"d","@rid":"#6:5","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000a//var u = db.query(\"SELECT FROM \" + rid)\u000a//if(u.length == 0) return\u000avar rid = u.field('@rid')\u000a\u000a// keeping this because of the parameterized SQL\u000afunction retry(command){\u000a    try {\u000a        eval(command) \u000a    }\u000a    catch(err){\u000a        var e = '' + err\u000a        if(e.indexOf('UPDATE') > 0) {\u000a            print('Retrying ' + command)\u000a            retry(command)\u000a        }\u000a      \u0009else {\u000a          db.command('INSERT INTO Errors Set Command = ?, Message = ?',command, e)\u000a          print('Failed: ' + command + ' | Error: ' + e)\u000a       }\u000a    }\u000a}\u000avar pc = null\u000avar ua = '' + u\u000aif(ua.indexOf('Foreground Transition') > 0) {\u000a  print('\\nForeground transit from: ')\u000a  print(u.getProperty('@rid') + ' ' + u.getProperty('FromProcessId') + ' to ' + u.getProperty('ToProcessId') + '\\n'); \u000a  \u000a  if(u.getProperty('FromProcessGuid') == null) {\u000a  \u0009retry(\"db.command('CREATE EDGE SwitchedFrom FROM (SELECT FROM ProcessCreate WHERE ProcessId = ? \\\u000a\u0009\u0009 AND Hostname = ? AND Organisation = ? Order By id Desc Limit 1) TO ?', \\\u000au.getProperty('FromProcessId'),u.getProperty('Hostname'),u.getProperty('Organisation'),u.getProperty('@rid'))\")\u000a  }\u000a  else {\u000a     retry(\"db.command('CREATE EDGE SwitchedFrom FROM (SELECT FROM ProcessCreate WHERE ProcessGuid = ? \\\u000a\u0009\u0009 AND Hostname = ? AND Organisation = ? Order By id Desc Limit 1) TO ?', \\\u000au.getProperty('FromProcessGuid'),u.getProperty('Hostname'),u.getProperty('Organisation'),u.getProperty('@rid'))\")\u000a  }\u000a  \u000a  if(u.getProperty('ToProcessGuid') == null) {\u000a    retry(\"db.command('CREATE EDGE SwitchedTo FROM ? TO (SELECT FROM ProcessCreate WHERE ProcessId = ? AND Hostname = ? AND Organisation = ? Order By id Desc  LIMIT 1)', \\\u000au.getProperty('@rid'),u.getProperty('ToProcessId'),u.getProperty('Hostname'),u.getProperty('Organisation'))\")\u000a    \u000a    pc = db.query('SELECT FROM ProcessCreate WHERE Hostname = ? AND Organisation = ? AND ProcessId = ? Order By id Desc LIMIT 1', u.getProperty('Hostname'),u.getProperty('Organisation'),u.getProperty('ToProcessId'))\u000a  }\u000a  else {\u000a    retry(\"db.command('CREATE EDGE SwitchedTo FROM ? TO (SELECT FROM ProcessCreate WHERE ProcessGuid = ? AND Hostname = ? AND Organisation = ? Order By id Desc  LIMIT 1)', \\\u000au.getProperty('@rid'),u.getProperty('ToProcessGuid'),u.getProperty('Hostname'),u.getProperty('Organisation'))\")\u000a    \u000a    pc = db.query('SELECT FROM ProcessCreate WHERE Hostname = ? AND Organisation = ? AND ProcessGuid = ? Order By id Desc LIMIT 1', u.getProperty('Hostname'),u.getProperty('Organisation'),u.getProperty('ToProcessGuid'))\u000a  }\u000a  \u000a//means somehow ProcessCreate was missing, eg. DataFusion was installed after the Process was created\u000a  if(pc.length == 0) { \u000a      print(\"ProcessCreate not available for \" + u.getProperty('@rid'));\u000a      return \u000a  }\u000a//  print(pc[0].getProperty('ProcessType'));\u000a}\u000aelse { // Click, MouseMove, Enter...\u000a  if(u.getProperty('ProcessGuid')==null) {\u000a    pc = db.query('SELECT FROM ProcessCreate WHERE Hostname = ? AND Organisation = ? \\\u000a\u0009AND ProcessId = ? Order By id Desc LIMIT 1', u.getProperty('Hostname'),u.getProperty('Organisation'),u.getProperty('ProcessId'))\u000a  }\u000a  else {\u000a    pc = db.query('SELECT FROM ProcessCreate WHERE Hostname = ? AND Organisation = ? \\\u000a\u0009AND ProcessGuid = ? Order By id Desc LIMIT 1', u.getProperty('Hostname'),u.getProperty('Organisation'),u.getProperty('ProcessGuid'))\u000a  }\u000a  \u000a   //means somehow ProcessCreate was missing, eg. DataFusion was installed after the Process was created\u000a    if(pc.length == 0) return \u000a  \u000a    retry(\"db.command('CREATE EDGE ActedOn FROM ? TO ?',u.getProperty('@rid'),pc[0].getProperty('@rid'))\")\u000a}\u000a\u000aif(pc[0].getProperty('ProcessType') != 'AfterExplorerForeground'){\u000a  print('1. Assigning to AfterExplorerForeground for ' + pc[0].getProperty('@rid') + '\\n' + pc[0].getProperty('Organisation') + ':' + pc[0].getProperty('Hostname') + ':' + pc[0].getProperty('Image') + '\\n');\u000a  retry(\"db.command('UPDATE ? SET ProcessType = ?', pc[0].getProperty('@rid'),'AfterExplorerForeground')\")      \u000a}\u000a\u000aretry(\"db.command('UPDATE \" + rid + \" SET ToBeProcessed = false')\") ","name":"UserActionTracking","language":"javascript","parameters":["u"]},{"@type":"d","@rid":"#6:6","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar rid = r.field('@rid')\u000avar pc = db.query('SELECT expand(rid) FROM index:ProcessCreate.Organisation_Hostname_ProcessGuid where key = [?,?,?]', r.field('Organisation'), r.field('Hostname'), r.field('ProcessGuid'))\u000a\u000a//regardless ProcessCreate exist or not, the non-ProcessCreate is processed\u000aretry(\"db.command('UPDATE \"+ rid + \" SET ToBeProcessed = false')\") \u000aif(pc.length == 0) return\u000a\u000avar sql = 'CREATE EDGE ' + edgeLookup(r.field('@class')) + ' FROM ' + pc[0].field('@rid') + ' TO ' + rid\u000aretry(\"db.command('\" + sql + \"')\")","name":"ConnectToProcessCreate","language":"javascript","parameters":["r"]},{"@type":"d","@rid":"#6:7","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000a\u000avar r = db.query('select from (select from pc where ToBeProcessed=true order by id asc limit 100) order by Hostname asc, RecordNumber asc')\u000a\u000afunction handleRetry(child_rid){\u000a\u0009print('set retry for ' + child_rid)\u000a    try {\u000a    \u0009var c = db.command('UPDATE ? SET ParentRetry = ParentRetry + 1 RETURN AFTER ParentRetry', child_rid)\u000a      \u0009if(c[0].field('ParentRetry') > 2) {\u000a            retry(\"db.command('\"+'UPDATE '+child_rid+' SET ToBeProcessed = false'+\"')\")\u000a         \u0009return true  // done retrying       \u0009\u000a      \u0009}\u000a      \u0009else {\u000a        \u0009print('retried ' + c[0].field('ParentRetry'))\u000a         \u0009return false // for retrying\u000a      \u0009}\u0009\u000a    }\u000a    catch(err) {\u000a\u0009\u0009var e = '' + err\u000a        if(e.indexOf('UPDATE') > 0) {\u000a        \u0009print('Retrying connectParent for ' + child_rid)\u000a            handleRetry(child_rid)\u000a        }\u000a        else {\u000a        \u0009print('handleRetry Failed: ' + e)\u000a            db.command('INSERT INTO Errors Set Message = ?', e)\u000a        }\u000a    }\u000a}\u000a\u000a// used when retry complete still no parent\u000afunction recoverSeq(child) {\u000a    var parentEXE = child.field('ParentImage').split(\"\\\\\")\u000a\u0009parentEXE = parentEXE[parentEXE.length - 1]\u000a    var childEXE = child.field('Image').split(\"\\\\\")\u000a\u0009childEXE = childEXE[childEXE.length - 1]\u000a    var partialSeq = parentEXE + ' > ' + childEXE\u000a    var seq = db.command('UPDATE seq SET Count = Count + 1 UPSERT RETURN AFTER @rid, Sequence, Count, Score \\\u000a\u0009\u0009\u0009\u0009\u0009\u0009  WHERE Sequence like \"%' + partialSeq + '\"')\u000a    if(seq.length == 0) return true\u000a    print(\"recoverSeq|\" + child.field('Hostname') + \"|\" + seq[0].field('Sequence'))\u000a    var sql = 'UPDATE ' + child.field('@rid') + ' SET Sequence = \"'+seq[0].field('Sequence')+'\"'\u000a    retry(\"db.command('\" + sql + \"')\")\u000a    var s = seq[0].field('Sequence')\u000a    if(s == null) return false\u000a    if(s.indexOf('services.exe > svchost.exe > wuauclt.exe > AM_') > 0) return true\u000a    if(seq[0].field('Score') > 0 || seq[0].field('Count') == 1) {\u000a        sql = 'CREATE EDGE SequenceSighted FROM ' + seq[0].field('@rid') + ' TO ' + child.field('@rid')\u000a        retry(\"db.command('\" + sql + \"')\")\u000a        print('Sequence sighted in recoverSeq, linked '  + seq[0].field('@rid') + ' TO \\\u000a\u0009\u0009' + child.field('@rid'))      \u000a    }\u000a\u0009return true\u000a}\u000a\u000afunction linkToParent(parentRID, childRID){\u000a\u0009retry(\"db.command('\"+'CREATE EDGE ParentOf from '+parentRID+' TO '+childRID+\"')\")\u000a\u0009retry(\"db.command('\"+'UPDATE '+childRID+' SET ToBeProcessed = false'+\"')\")\u000a}\u000a\u000afunction connectParent(child) {\u0009\u000a    // this field is pre-populated by Microsoft_Windows_Sysmon pre-processing function\u000a    if(child.field('ParentRID') != null){\u000a    \u0009linkToParent(child.field('ParentRID'),child.field('@rid'))\u000a        return true\u000a    }\u000a    \u000a    var parent = db.query('SELECT FROM ProcessCreate where Organisation = ? AND Hostname = ? AND \\\u000a\u0009ProcessGuid = ?', child.field('Organisation'), child.field('Hostname'), child.field('ParentProcessGuid'))\u000a    if(parent.length > 0) {\u000a\u0009\u0009parent = parent[0]\u000a        if(parent.field('Sequence') == null) {\u000a            if( handleRetry(child.field('@rid')) == false) return false\u000a        }\u000a        linkToParent(parent.field('@rid'),child.field('@rid'))\u000a        return true   \u000a    }\u000a  \u0009else {\u000a       if(child.field('ProcessType') == 'Orphan') {\u000a       \u0009\u0009print('Found orphan @ ' + child.field('Hostname') + ' | ' + child.field('Image'))\u000a            retry(\"db.command('\"+'UPDATE '+child.field('@rid')+' SET ToBeProcessed = false'+\"')\")\u000a            return true\u000a       }\u000a       else {\u000a           if(handleRetry(child.field('@rid')) == false) return false    \u000a           else return recoverSeq(child);\u000a       }\u000a    } \u000a}\u000a\u000afor(var i = 0; i < r.length; i++){ \u000a\u0009if(connectParent(r[i]) == false) break;\u000a}","name":"ConnectParentProcess","language":"javascript","parameters":[]},{"@type":"d","@rid":"#6:8","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000a//var r = db.query(\"SELECT FROM \" + rid);\u000a//if(r.length == 0) return;\u000a//r = r[0];\u000avar rid = r.field('@rid')\u000aprint('UntrustedFile found on ' + r.field('Hostname'));\u000a\u000afunction findProcessCreate(r){\u000a  return db.query('SELECT expand(rid) FROM index:ProcessCreate.Organisation_Hostname_ProcessGuid WHERE key = [?,?,?]', r.field('Organisation'), r.field('Hostname'), r.field('ProcessGuid'));\u000a}\u000a\u000a// UntrustedFile is usually inserted before ProcessCreate/ImageLoad \u000a// the following handles scenario when UntrustedFile is inserted later.\u000avar pc = null;\u000a\u000avar linkSQL = \"\";\u000a\u000aif(r.field('Type') == 'ProcessCreate') {\u000a  \u0009pc = findProcessCreate(r)\u000a    if(pc.length > 0) linkSQL = \"db.command('CREATE EDGE ExeSighted FROM \" + rid +\" TO \" + pc[0].field('@rid') + \"')\" \u000a}\u000aelse {\u000a\u0009pc = db.query('SELECT FROM ImageLoad where Hostname = ? AND Organisation = ? AND ProcessGuid = ? AND ImageLoaded = ?',\u000a                   r.field('Hostname'), r.field('Organisation'), r.field('ProcessGuid'),r.field('FullPath'))\u000a    if(pc.length > 0) { linkSQL = \"db.command('CREATE EDGE DllSighted FROM \" + rid +\" TO \" + pc[0].field('@rid') + \"')\" }\u000a    else {\u000a       pc = findProcessCreate(r)\u000a       if(pc.length > 0)  linkSQL = \"db.command('CREATE EDGE DllSighted FROM \" + pc[0].field('@rid') +\" TO \" + rid + \"')\"\u000a    }\u000a}    \u000aif(pc.length == 0) return\u000a\u000aprint('linking foreign ' + r.field('Type') + ' ' + pc[0].field('@rid'))\u000aretry(linkSQL)\u000aretry(\"db.command('UPDATE \" + rid + \" SET ToBeProcessed = false')\")\u000afindExecuteAfterWrite(r.field('FullPath'), pc[0].field('Hostname'), pc[0].field('Organisation'), pc[0].field('@rid'))\u000a","name":"UntrustedFile","language":"javascript","parameters":["r"]},{"@type":"d","@rid":"#6:9","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar rid = r.field('@rid')\u000a//print('NetworkConnect ' + r.field('Image'))\u000a\u000afunction findLateral(r) {\u000a    var lateral = null // look for lateral destination\u000a    if(r.field('DestinationHostname')){\u000a        lateral = db.query('SELECT FROM NetworkAddress WHERE Hostname = ? AND Organisation = ? AND Hostname <> ?',r.field('DestinationHostname'), r.field('Organisation'), r.field('Hostname'))\u000a        if(lateral.length > 0) return lateral\u000a    }\u000a    if(r.field('DestinationIp')){ // handles both IPv4 & 6\u000a        lateral = db.query('SELECT FROM NetworkAddress WHERE IpAddress = ? AND Hostname <> ? AND Organisation = ?',\u000a                           r.field('DestinationIp'),r.field('Hostname'),r.field('Organisation')) \u0009\u000a        if(lateral.length > 0) return lateral\u000a    }\u000a    return null\u000a}\u000a\u000a// This UPSERT will return #NN:-N rid if called via Dynamic Hook\u000avar u = db.command('UPDATE NetworkDestinationPort set Count = Count + 1 \\\u000a                      UPSERT RETURN AFTER @rid, Count WHERE Image = ? AND \\\u000a                      Hostname = ? AND Organisation = ? AND Port = ?', \u000a                      r.field('Image'), r.field('Hostname'),r.field('Organisation'), \u0009\u000a      \u0009\u0009\u0009\u0009  r.field('DestinationPort'))\u000aif(u[0].field('Count') == 1) { // new destination port sighted for that Process-Image\u000a\u0009retry(\"db.command('CREATE EDGE DestinationPortSighted \\\u000a\u0009\u0009FROM \" + u[0].field('@rid') + \" TO \" + r.field('@rid') + \"')\")\u000a} \u000a\u000a// Find ProcessCreate to connect to...\u000avar pc = db.query('SELECT expand(rid) FROM index:ProcessCreate.Organisation_Hostname_ProcessGuid WHERE key = [?,?,?]',r.field('Organisation'), r.field('Hostname'), r.field('ProcessGuid'))\u000aif(pc.length > 0) {\u000a    var edgeName = r.field('DestinationType') == 'proxy' ? 'UsedProxy' : 'ConnectedTo';\u000a\u0009retry(\"db.command('CREATE EDGE \" + edgeName + \" FROM \" + pc[0].field('@rid') + \" TO \" + rid + \"')\")\u000a}\u000a\u000a//even if ProcessCreate cannot be found\u000aretry(\"db.command('UPDATE \" + rid + \" SET ToBeProcessed = false')\") \u000a// likely no proxy in environment, direct connection to external address\u000aif(r.field('DestinationType') == 'external') return \u000a\u000a// Find ListeningPort to connect to if exist...\u000avar lateral = findLateral(r)\u000aif(lateral == null) return;\u000a\u000a//print('Found lateral communication, finding destination listeningPort for ' + rid)\u000avar listening = db.query('SELECT FROM listeningport WHERE Hostname = ? AND Organisation = ? AND LocalPort = ?',lateral[0].field('Hostname'), lateral[0].field('Organisation'), r.field('DestinationPort'))\u000aif(listening.length == 0) return;\u000a\u000a// in web proxied environment, endpoint may be connecting to proxy constantly, that's what Sysmon can only see \u000aretry(\"db.command('CREATE EDGE LateralCommunication FROM \" + rid + \" TO \" + listening[0].getProperty('@rid') + \" ')\")\u000a\u000aif(listening[0].field('out_ListeningPortSighted') != null || listening[0].field('out_BoundTo') != null) return\u000a  \u000avar lpc = db.query('SELECT FROM ProcessCreate WHERE Hostname = ? AND Organisation = ? AND ProcessId = ? AND Image.IndexOf(?) > -1 \\\u000a\u0009\u0009\u0009\u0009\u0009order by id desc LIMIT 1', listening[0].field('Hostname'), listening[0].field('Organisation'),\u000a  \u0009\u0009\u0009\u0009\u0009listening[0].field('ProcessId'), listening[0].field('ProcessName'))\u000aif(lpc.length == 0) return;\u000a\u000aretry(\"db.command('CREATE EDGE BoundTo FROM \"+listening[0].getProperty('@rid')+\" TO \"+lpc[0].getProperty('@rid')+\"')\")\u000aprint('Added BoundTo edge between ' + listening[0].getProperty('@rid') + ' to ' + lpc[0].getProperty('@rid'))\u000a\u000a","name":"NetworkConnect","language":"javascript","parameters":["r"]},{"@type":"d","@rid":"#6:10","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar p = db.query('select from (select (sysdate().asLong() - Created.asLong())/(1000) as Tdiff, *  from pendingtype) where Tdiff > 90')\u000aif(p.length > 0) print('PendingProcessType total: ' + p.length)\u000afor(var i = 0; i < p.length; i++) {\u000a   if(p[i].field('in').field('ProcessType')) continue\u000a   retry(\"db.command('UPDATE \" + p[i].field('in').field('@rid') + \" SET ProcessType = \\\"AfterExplorerBackground\\\"\" + \"')\")\u000a   retry(\"db.command('DELETE EDGE \" + p[i].field('@rid') + \"')\")\u000a}\u000a\u000a//clean up triggerprocessing\u000adb.command('delete from tp where (sysdate().asLong() - TimeStamp.asLong())/1000 > 90') ","name":"PendingTypeTimer","language":"javascript","parameters":null},{"@type":"d","@rid":"#6:11","@version":1,"@class":"OFunction","idempotent":null,"code":"// Called from insertEvent.js\u000a\u000avar db = orient.getDatabase();\u000a\u000a// PendingTypeTimer functions sets ProcessType to AfterExplorerBackground \u000adb.command('DELETE FROM oschedule WHERE name = \"PendingTypeEvent\"')\u000adb.command(\"INSERT INTO oschedule  SET name = 'PendingTypeEvent', \\\u000a\u0009\u0009\u0009function = (SELECT FROM ofunction WHERE name = 'PendingTypeTimer'), rule = '0/10 * * * * ?'\")\u000a\u000a// ConnectParentProcess links child to parent process\u000adb.command('DELETE FROM oschedule WHERE name = \"ConnectParentEvent\"')\u000adb.command(\"INSERT INTO oschedule  SET name = 'ConnectParentEvent', \\\u000a\u0009\u0009\u0009function = (SELECT FROM ofunction WHERE name = 'ConnectParentProcess'), rule = '0/1 * * * * ?'\")","name":"RestartTimers","language":"javascript","parameters":null},{"@type":"d","@rid":"#6:12","@version":1,"@class":"OFunction","idempotent":null,"code":"// to find Out-of-order ProcessCreate\u000a\u000avar db = orient.getDatabase();\u000avar r = db.query(\"SELECT id FROM pc where ParentImage = 'System' order by id desc limit 1\")\u000aif(r.length == 0) return\u000a\u000avar prev_RN = 0\u000avar PCs = db.query(\"SELECT RecordNumber FROM pc where id > ? order by id asc limit 100\", r[0].field('id') )\u000aif(PCs.length == 0) return\u000a\u000afor(var i = 0; i < PCs.length; i++) {\u000a\u0009if(PCs[i].field('RecordNumber') > prev_RN) {\u000a    \u0009prev_RN = PCs[i].field('RecordNumber')\u000a    }\u000a    else {\u000a    \u0009print('Found out of order: ' + prev_RN)\u000a        return prev_RN\u000a        break;\u000a    }\u000a}\u000a\u000areturn \"none found\"","name":"findOO","language":"javascript","parameters":null},{"@type":"d","@rid":"#6:13","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar rid = r.field('@rid')\u000a\u000avar source = db.query('SELECT FROM index:ProcessCreate.Organisation_Hostname_ProcessGuid WHERE key = [?,?,?]', \u000a                      r.field('Organisation'), r.field('Hostname'),  r.field('SourceProcessGuid'));\u000a\u000aif(source.length > 0) {\u000a\u0009retry(\"db.command('CREATE EDGE ProcessAccessedFrom FROM \" + source[0].field('rid').field('@rid') + \" TO \" + rid + \"')\")\u000a}\u000a\u000avar target = db.query('SELECT FROM index:ProcessCreate.Organisation_Hostname_ProcessGuid WHERE key = [?,?,?]', \u000a                      r.field('Organisation'), r.field('Hostname'), r.field('TargetProcessGuid'))\u000a\u000aif(target.length > 0) {\u000a\u0009retry(\"db.command('CREATE EDGE ProcessAccessedTo FROM \" + rid + \" TO \" + target[0].field('rid').field('@rid') + \"')\")\u000a}\u000a\u000aretry(\"db.command('UPDATE \"+ rid + \" SET ToBeProcessed = false')\") ","name":"ProcessAccess","language":"javascript","parameters":["r"]},{"@type":"d","@rid":"#6:14","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000a\u000a// fetch ProcessCreate\u000a// use date within EventTime, set the rest to 00:00:00\u000avar pc = db.query('SELECT *, EventTime.format(\"yyyy-MM-dd 00:00:00\") as ET FROM ' + pc_rid)\u000aif(pc.length == 0) return\u000apc = pc[0]\u000a\u000a// setup the SQL statement\u000avar stm = \"select from (select from processcreate where Hostname = ? AND Organisation = ? AND EventTime >= ? AND EventTime <= ?) where id <= ? order by id desc limit \" + n\u000a\u000a// fetch N prior ProcessCreates\u000avar earlierProcesses = db.query(stm, pc.field('Hostname'), pc.field('Organisation'), pc.field('ET'), pc.field('EventTime'), pc.field('id'))\u000aif(earlierProcesses.length == 0) return\u000a\u000a// link them starting from the earliest\u000afor(i = earlierProcesses.length - 1; i >=1; i--) {\u000a  //print( earlierProcesses[i].field('EventTime') + ' ' + earlierProcesses[i].field('Image') + ' to ' + earlierProcesses[i -1].field('Image'))\u000a  if(earlierProcesses[i].field('out_FollowedBy') == undefined) \u000a     retry(\"db.command('CREATE EDGE FollowedBy FROM \" + earlierProcesses[i].field('@rid') + \" to \" + earlierProcesses[i - 1].field('@rid') + \"')\") \u000a}","name":"FindPreviousProcesses","language":"javascript","parameters":["pc_rid","n"]},{"@type":"d","@rid":"#6:15","@version":1,"@class":"OFunction","idempotent":null,"code":"// frontend.js calls this\u000a\u000avar db = orient.getDatabase();\u000a\u000a// fetch ProcessCreate\u000avar pc = db.query('SELECT *, EventTime.format(\"yyyy-MM-dd 00:00:00\") as ET, in(\"LastForeground\").size() as LFG FROM ' + pc_rid)\u000aif(pc.length == 0) return\u000apc = pc[0]\u000a\u000a// already linked\u000aif(pc.field('LFG') > 0) return\u000a\u000avar fgProcess = db.query(\"select from processcreate where Hostname = ? AND Organisation = ? AND id < ? AND (ProcessType = 'AfterExplorerForeground' OR (Image like '%explorer.exe' AND ProcessType = 'BeforeExplorer')) order by id desc limit 1\", pc.field('Hostname'), pc.field('Organisation'), pc.field('id'))\u000a  \u000aif(fgProcess.length == 0) return\u000a\u000aprint('Found last FG process @ ' +  fgProcess[0].field('EventTime') + ' ' + fgProcess[0].field('Image') + ' for ' + pc_rid)\u000a\u000aretry(\"db.command('CREATE EDGE LastForeground FROM \" + fgProcess[0].field('@rid') + \" to \" + pc_rid + \"')\")","name":"FindLastForeground","language":"javascript","parameters":["pc_rid"]},{"@type":"d","@rid":"#6:16","@version":1,"@class":"OFunction","idempotent":null,"code":"//Used by investigation board controller\u000a\u000avar db = orient.getDatabase();\u000avar r = db.command(\"select from (traverse in('AddedTo'), in('FollowedBy'), in('LastForeground') from \"+rid\u000a                   + \" MAXDEPTH 3) where @rid <> ? AND @class <> 'Case' order by id\", rid); \u000areturn r\u000a","name":"GetCaseProcessSequence","language":"javascript","parameters":["rid"]},{"@type":"d","@rid":"#6:17","@version":1,"@class":"OFunction","idempotent":null,"code":"// rid: string of a ProcessCreate\u000a// traverse in('CommandLineSighted'), out('SimilarTo') from $RID\u000a// Whitelist in this case simply means setting the Score to ZERO.\u000a// There are two classes that Score is used for new & recurring sightings:\u000a// 1) HostUserPrivilegeCommandLine or HUPC\u000a// 2) CommandLineCluster\u000a// Called from frontend.js\u000a\u000avar db = orient.getDatabase();\u000a\u000avar r = db.query(\"traverse in('CommandLineSighted'), out('SimilarTo') from \" + rid);\u000a\u000afor(var i = 0; i < r.length; i++) {\u000a\u0009if(r[i].field('@class') == 'HostUserPrivilegeCommandLine' || r[i].field('@class') == 'CommandLineCluster') {\u000a      \u0009print(r[i]);\u000a      \u0009db.command('update ? set Score = 0', r[i].field('@rid'));\u000a    }\u000a}","name":"WhitelistCommandLine","language":"javascript","parameters":["rid"]},{"@type":"d","@rid":"#6:18","@version":1,"@class":"OFunction","idempotent":null,"code":"// rid: RID of a ProcessCreate\u000a// use traverse in('sequencesighted') from <RID>\u000a// Called from frontend.js\u000a\u000avar db = orient.getDatabase();\u000a\u000avar r = db.query(\"traverse in('sequencesighted') from \" + rid);\u000afor(var i = 0; i < r.length; i++) {\u000a\u0009if(r[i].field('@class') == 'ParentOfSequence') {\u000a      \u0009db.command('update ? set Score = 0', r[i].field('@rid'));\u000a        db.command('insert into seq set BaseLined = true, Count = 1, Score = 0, Sequence = ?',\u000a                   stripDottedNumbers(r[i].field('Sequence')))\u000a    }\u000a}\u000a","name":"WhitelistSequence","language":"javascript","parameters":["rid"]},{"@type":"d","@rid":"#6:19","@version":1,"@class":"OFunction","idempotent":null,"code":"// rid: string of a DriverLoad\u000a// use traverse in('SysSighted') from <RID>\u000a// Called from frontend.js\u000a\u000avar db = orient.getDatabase();\u000a\u000avar r = db.query(\"traverse in('SysSighted') from \" + rid);\u000a//print('whitelisting driver')\u000afor(var i = 0; i < r.length; i++) {\u000a\u0009if(r[i].field('@class') == 'ImageLoadedHashes') {\u000a        //print(r[i].field('@rid'))\u000a        db.command('update ? set BaseLined = true', r[i].field('@rid'));\u000a    }\u000a}\u000a ","name":"WhitelistDriverLoad","language":"javascript","parameters":["rid"]},{"@type":"d","@rid":"#6:20","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase()\u000avar s = 'System > smss.exe > smss.exe > wininit.exe > services.exe > svchost.exe > wuauclt.exe > AM_Delta_Patch_1.321.2229.1.exe'\u000as = stripDottedNumbers(s)\u000avar r = db.query('select from seq where BaseLined = true AND Sequence = ?',s)\u000a\u000areturn r.length\u000a\u000avar d = '{\"SourceName\":\"OSQuery\",\"Organisation\":\"MyCo\",\"Hostname\":\"WWWPC1\",\"RequestRequestRid\":\"#23:23\", \"QueryStart\":\"2020-03-03T18:00:00.123Z\",\"QueryEnd\":\"2020-03-03T18:00:03.456Z\", \"Query\":\"select * from drivers\", \"Results\":[{\"Blah\":1},{\"Blah\":2}]}'\u000a\u000avar e = JSON.parse(d)\u000a\u000aif(e['SourceName'].toLowerCase() == 'osquery') {\u000a\u0009var re = /FROM\\s+(.+)\\s*/gi\u000a\u0009var match = re.exec(e['Query'])\u000a    if(match.length < 2) return\u000a  \u0009classname = \"OSQuery_\" + match[1];  \u000a    for(var i = 0; i < e['Results'].length ; i++) {\u000a        var eachline = e['Results'][i]\u000a        eachline['Organisation'] = e['Organisation']\u000a        eachline['Hostname'] = e['Hostname']\u000a        eachline['QueryStart'] = e['QueryStart']\u000a        eachline['QueryEnd'] = e['QueryEnd']\u000a        eachline['RequestRequestRid'] = e['RequestRequestRid']\u000a        var stmt = 'INSERT INTO '+ classname + ' CONTENT ' + JSON.stringify(eachline)\u000a        print(stmt);\u000a        db.command(stmt)    \u000a    }\u000a    return\u000a}","name":"test","language":"javascript","parameters":null},{"@type":"d","@rid":"#6:21","@version":1,"@class":"OFunction","idempotent":null,"code":"/*\u000a  SpoofParentProcessId vertice will be linked to a ProcessCreate that has spoof parent PID by edge:SpoofedParentProcess.\u000a  Another edge:TrueParentOf links the actual parent Process to this process with spoofed PPID.\u000a*/\u000a\u000avar db = orient.getDatabase();\u000avar rid = r.field('@rid')\u000a\u000aprint('spoofed PPID processGuid: ' + r.field('ProcessGuid'))\u000aprint('True-parent processGuid: ' + r.field('TrueParentProcessGuid'))\u000a\u000a// link spoof alert vertex to ProcessCreate\u000avar targetPC = db.query('SELECT FROM ProcessCreate WHERE ProcessGuid = ? AND Hostname = ? AND Organisation = ? limit 1',\u000a                        r.field('ProcessGuid'), r.field('Hostname'), r.field('Organisation') )\u000aif(targetPC.length == 0) return\u000atargetPC = targetPC[0]\u000aretry(\"db.command('CREATE EDGE SpoofedParentProcess FROM \" + rid + \" to \" + targetPC.field('@rid') + \"')\")\u000a\u000a// link true-parent ProcessCreate to ProcessCreate with spoofed PPID\u000avar trueParent = null\u000aif(r.field('TrueParentProcessGuid')) {\u000a\u0009trueParent = db.query('SELECT FROM ProcessCreate WHERE ProcessGuid = ? AND Hostname = ? \\\u000aAND Organisation = ? limit 1', r.field('TrueParentProcessGuid'), r.field('Hostname'), r.field('Organisation') )\u000a}\u000aelse{\u000a\u0009trueParent = db.query('SELECT FROM ProcessCreate WHERE ProcessId = ? AND Hostname = ? \\\u000aAND Organisation = ? limit 1', r.field('TrueParentProcessId'), r.field('Hostname'), r.field('Organisation') )\u000a}\u000a\u000aif(trueParent.length == 0) return\u000atrueParent = trueParent[0]\u000aretry(\"db.command('CREATE EDGE TrueParentOf FROM \" + trueParent.field('@rid') + \" to \" + targetPC.field('@rid') + \"')\")\u000aretry(\"db.command('UPDATE \"+ rid + \" SET ToBeProcessed = false')\")","name":"SpoofParentProcessId","language":"javascript","parameters":["r"]},{"@type":"d","@rid":"#6:22","@version":1,"@class":"OFunction","idempotent":null,"code":"// Ported from https://github.com/jordanthomas/jaro-winkler/blob/master/index.js\u000a// Returns a similarity score where 1 means identifical strings (s1 vs s2)\u000a\u000afunction extend(a, b) {\u000a    for (var property in b) {\u000a      if (b.hasOwnProperty(property)) {\u000a        a[property] = b[property];\u000a      }\u000a    }\u000a\u000a    return a;\u000a  }\u000a\u000a  function distance(s1, s2, options) {\u000a    var m = 0;\u000a    var defaults = { caseSensitive: true };\u000a    var settings = extend(defaults, options);\u000a    var i;\u000a    var j;\u000a\u000a    // Exit early if either are empty.\u000a    if (s1.length === 0 || s2.length === 0) {\u000a      return 0;\u000a    }\u000a\u000a    // Convert to upper if case-sensitive is false.\u000a    if (!settings.caseSensitive) {\u000a      s1 = s1.toUpperCase();\u000a      s2 = s2.toUpperCase();\u000a    }\u000a\u000a    // Exit early if they're an exact match.\u000a    if (s1 === s2) {\u000a      return 1;\u000a    }\u000a\u000a    var range = (Math.floor(Math.max(s1.length, s2.length) / 2)) - 1;\u000a    var s1Matches = new Array(s1.length);\u000a    var s2Matches = new Array(s2.length);\u000a\u000a    for (i = 0; i < s1.length; i++) {\u000a      var low  = (i >= range) ? i - range : 0;\u000a      var high = (i + range <= (s2.length - 1)) ? (i + range) : (s2.length - 1);\u000a\u000a      for (j = low; j <= high; j++) {\u000a        if (s1Matches[i] !== true && s2Matches[j] !== true && s1[i] === s2[j]) {\u000a          ++m;\u000a          s1Matches[i] = s2Matches[j] = true;\u000a          break;\u000a        }\u000a      }\u000a    }\u000a\u000a    // Exit early if no matches were found.\u000a    if (m === 0) {\u000a      return 0;\u000a    }\u000a\u000a    // Count the transpositions.\u000a    var k = 0;\u000a    var numTrans = 0;\u000a\u000a    for (i = 0; i < s1.length; i++) {\u000a      if (s1Matches[i] === true) {\u000a        for (j = k; j < s2.length; j++) {\u000a          if (s2Matches[j] === true) {\u000a            k = j + 1;\u000a            break;\u000a          }\u000a        }\u000a\u000a        if (s1[i] !== s2[j]) {\u000a          ++numTrans;\u000a        }\u000a      }\u000a    }\u000a\u000a    var weight = (m / s1.length + m / s2.length + (m - (numTrans / 2)) / m) / 3;\u000a    var l = 0;\u000a    var p = 0.1;\u000a\u000a    if (weight > 0.7) {\u000a      while (s1[l] === s2[l] && l < 4) {\u000a        ++l;\u000a      }\u000a\u000a      weight = weight + l * p * (1 - weight);\u000a    }\u000a\u000a    return weight;\u000a  }\u000a\u000areturn distance(s1, s2)","name":"JWCompare","language":"javascript","parameters":["s1","s2"]},{"@type":"d","@rid":"#6:23","@version":1,"@class":"OFunction","idempotent":null,"code":"// rid of a WatchList record \u000avar db = orient.getDatabase();\u000ar = r[0]\u000avar rid = r.field('@rid')\u000a\u000avar e = db.query(\"select from Sysmon where Organisation = ? AND Hostname = ? AND ProcessGuid = ? AND ToBeProcessed = true AND @rid <> ? AND id < ?\", r.field(\"Organisation\"), r.field(\"Hostname\"), r.field(\"ProcessGuid\"), r.field(\"PCrid\"), r.field(\"id\"))\u000aif(e.length == 0) return\u000a\u000afor(var i = 0; i < e.length; i++){\u000a  if(e[i].field('@class') == \"CreateRemoteThread\" || e[i].field('@class') == \"ProcessAccess\"){\u000a      this[e[i].field('@class')](e[i])\u000a  }\u000a  else{ // this links directly to ProcessCreate\u000a\u0009\u0009var sql = 'CREATE EDGE ' + edgeLookup(e[i].field('@class')) + ' FROM ' + r.field('PCrid') + ' TO ' + e[i].field('@rid')\u000a       retry(\"db.command('\" + sql + \"')\")\u000a       retry(\"db.command('UPDATE \"+ e[i].field('@rid') + \" SET ToBeProcessed = false')\")\u000a  }\u000a}","name":"LinkWatchListRecord","language":"javascript","parameters":["r"]},{"@type":"d","@rid":"#6:24","@version":1,"@class":"OFunction","idempotent":null,"code":"// used for UPDATE & CREATE EDGE retries\u000avar db = orient.getDatabase();\u000a\u000atry {\u000a\u0009eval(command) \u000a}\u000acatch(err){\u000a\u0009var e = '' + err\u000a    if(e.indexOf('UPDATE') > 0) {\u000a    \u0009print('Retrying ' + command)\u000a    \u0009retry(command)\u000a\u0009}\u000a\u0009else {\u000a    \u0009db.command('INSERT INTO Errors Set Command = ?, Message = ?',command, e)\u000a        print('Failed: ' + command + ' | Error: ' + e)\u000a\u0009}\u000a}\u000a","name":"retry","language":"javascript","parameters":["command"]},{"@type":"d","@rid":"#6:25","@version":1,"@class":"OFunction","idempotent":null,"code":"var _edgeLookup = {'ProcessTerminate':'Terminated', 'PipeCreated':'CreatedPipe',\u000a                'PipeConnected':'ConnectedPipe', 'RawAccessRead':'RawRead',\u000a                'FileCreateTime':'ChangedFileCreateTime', 'FileCreate':'CreatedFile',\u000a                'FileCreateStreamHash':'CreatedFileStream', 'RegistryEvent':'AccessedRegistry',\u000a                'NetworkConnect':'ConnectedTo', 'ImageLoad':'LoadedImage'}\u000aif(classname in _edgeLookup){\u000a\u0009return _edgeLookup[classname];\u000a}\u000aelse return \"ProcessGuid\";","name":"edgeLookup","language":"javascript","parameters":["classname"]},{"@type":"d","@rid":"#6:26","@version":1,"@class":"OFunction","idempotent":null,"code":"// rid of a ProcessCreate record \u000a// this is called from frontend.js\u000a\u000avar db = orient.getDatabase();\u000avar r = db.query(\"SELECT FROM \" + rid)\u000aif(r.length == 0) return\u000ar = r[0]\u000a\u000avar e = db.query(\"select from Sysmon where Organisation = ? AND Hostname = ? AND ProcessGuid = ? AND ToBeProcessed = true AND @rid <> ?\", r.field(\"Organisation\"), r.field(\"Hostname\"), r.field(\"ProcessGuid\"), rid)\u000aif(e.length == 0) return\u000a\u000afor(var i = 0; i < e.length; i++){\u000a  if(e[i].field('@class') == \"CreateRemoteThread\" || e[i].field('@class') == \"ProcessAccess\"){\u000a\u0009  this[e[i].field('@class')](e[i])\u000a  }\u000a  else{\u000a\u0009\u0009var sql = 'CREATE EDGE ' + edgeLookup(e[i].field('@class')) + ' FROM ' + rid + ' TO ' + e[i].field('@rid')\u000a       retry(\"db.command('\" + sql + \"')\")\u000a       retry(\"db.command('UPDATE \"+ e[i].field('@rid') + \" SET ToBeProcessed = false')\")\u000a  }\u000a} ","name":"LinkNonProcessCreate","language":"javascript","parameters":["rid"]},{"@type":"d","@rid":"#6:27","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000a\u000a// use Image/ImageLoaded string to search last FileCreate \u000aprint('\\nSearching for FileCreate ' + searchFilename + '\\n');\u000avar foundFile = db.query('SELECT FROM FileCreate WHERE Hostname = ? AND Organisation = ? AND \\\u000a     TargetFilename = ? order by id desc limit 1', Hostname, Organisation, searchFilename);\u000a\u000aif(foundFile.length == 0) return \u000a\u000aprint('Found for FileCreate ' + searchFilename + '\\n');\u0009\u000aretry(\"db.command('CREATE EDGE ExecuteAfterWrite FROM \" + foundFile[0].field('@rid') + \" to \" + pc_rid + \"')\")\u000a","name":"findExecuteAfterWrite","language":"javascript","parameters":["searchFilename","Hostname","Organisation","pc_rid"]},{"@type":"d","@rid":"#6:28","@version":1,"@class":"OFunction","idempotent":null,"code":"// find whitespace in key string; {key,value} database property name won't accept space\u000avar notValid = /[\\W_]+/g \u000aif (typeof obj !== \"object\") return obj;\u000afor (var prop in obj) {\u000a\u0009if (obj.hasOwnProperty(prop)) {\u000a    \u0009obj[prop.replace(notValid, \"\")] = removeSpaceFromKey(obj[prop]);\u000a        if (notValid.test(prop)) {\u000a        \u0009delete obj[prop];\u000a\u0009\u0009}\u000a\u0009}\u000a}\u000areturn obj;","name":"removeSpaceFromKey","language":"javascript","parameters":["obj"]},{"@type":"d","@rid":"#6:29","@version":1,"@class":"OFunction","idempotent":null,"code":"// EventId to Sysmon Sub-Classname \u000avar _eventIdLookup = {1:'ProcessCreate', 2:'FileCreateTime', 3:'NetworkConnect', \u000a                    4:'SysmonStatus', 5:'ProcessTerminate',6:'DriverLoad', \u000a                    7:'ImageLoad', 8:'CreateRemoteThread', 9:'RawAccessRead', \u000a                    10:'ProcessAccess', 11:'FileCreate', 12:'RegistryEvent', \u000a                    13:'RegistryEvent', 14:'RegistryEvent', 15:'FileCreateStreamHash', \u000a                    16:'ConfigChanged', 17:'PipeCreated', 18:'PipeConnected', \u000a                    19:'WmiEvent', 20:'WmiEvent', 21:'WmiEvent', 22:'DnsQuery', 23:'FileDelete', 255:'Error' }\u000a\u000aif(id in _eventIdLookup){\u000a\u0009return _eventIdLookup[id]\u000a}\u000aelse\u000a    return \"Sysmon\"","name":"eventIdLookup","language":"javascript","parameters":["id"]},{"@type":"d","@rid":"#6:30","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar rid = r.field('@rid')\u000avar spoof = db.query('SELECT @rid, TrueParentProcessId FROM SpoofParentProcessId \\\u000a                          Where ToBeProcessed = true \\\u000a\u0009\u0009\u0009\u0009\u0009\u0009  AND Hostname = ? AND Organisation = ? AND ProcessGuid = ?', r.field('Hostname'), \u0009\u0009                      r.field('Organisation'), r.field('ProcessGuid'));\u000aif(spoof.length == 0) return\u000a    \u000aprint('\\nfound spoof for ' + rid + ' true parentPID = ' + spoof[0].field('TrueParentProcessId') + '\\n')\u000aretry(\"db.command('CREATE EDGE SpoofedParentProcess FROM \" + spoof[0].field('@rid') + \" to \" + rid + \"')\")\u000avar trueParent = null\u000a\u000aif(spoof[0].field('TrueParentProcessGuid')) {\u000a\u0009trueParent = db.query('SELECT FROM ProcessCreate WHERE ProcessGuid = ? AND Hostname = ? \\\u000a\u0009AND Organisation = ? order by id desc limit 1', spoof[0].field('TrueParentProcessGuid'), r.field('Hostname'), r.field('Organisation') )\u000a}\u000aelse {\u000a\u0009trueParent = db.query('SELECT FROM ProcessCreate WHERE ProcessId = ? AND Hostname = ? AND \\\u000a\u0009Organisation = ? order by id desc limit 1',spoof[0].field('TrueParentProcessId'), r.field('Hostname'), \u0009\u0009r.field('Organisation') )\u000a}\u000aif(trueParent.length > 0) {\u000a retry(\"db.command('CREATE EDGE TrueParentOf FROM \" + trueParent[0].field('@rid') + \" to \" + rid + \"')\")\u000a}\u000a\u000adb.command('UPDATE ? SET ToBeProcessed = false', spoof[0].field('@rid'))","name":"CheckSpoof","language":"javascript","parameters":["r"]},{"@type":"d","@rid":"#6:31","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar classname = r.field('@class')\u000avar pc_rid = r.field('@rid')\u000a\u000avar fullpath = classname == 'ProcessCreate' ? r.field('Image') : r.field('ImageLoaded');\u000avar foreign = db.query('SELECT * FROM UntrustedFile Where ToBeProcessed = true AND Type = ? AND \\\u000a\u0009\u0009\u0009\u0009\u0009\u0009Hostname = ? AND Organisation = ? AND ProcessGuid = ? AND FullPath = ?', \u000a\u0009\u0009\u0009  classname, r.field('Hostname'), r.field('Organisation'), r.field('ProcessGuid'), fullpath);\u000aif(foreign.length == 0) return    \u000a\u000avar edgename = classname == 'ProcessCreate' ? \"ExeSighted\" : \"DllSighted\";\u000aretry(\"db.command('CREATE EDGE \" + edgename + \" FROM \" + foreign[0].field('@rid') +\" TO \" + pc_rid + \"')\")\u000aretry(\"db.command('UPDATE \" + foreign[0].field('@rid') +\" SET ToBeProcessed = false')\")\u000aprint('Linked '+ edgename + ' from ' + foreign[0].field('@rid') + ' to ' + pc_rid)\u000a\u000a  // use Image/ImageLoaded string to search last FileCreate \u000avar searchFilename = r.field('ImageLoaded') ? r.field('ImageLoaded') : r.field('Image');\u000afindExecuteAfterWrite(searchFilename, r.field('Hostname'), r.field('Organisation'), pc_rid)\u000a","name":"CheckForeign","language":"javascript","parameters":["r"]},{"@type":"d","@rid":"#6:32","@version":1,"@class":"OFunction","idempotent":null,"code":"// pre-processing routine called by AddEvent\u000avar db = orient.getDatabase();\u000a\u000aif(e['EventID']==3 || e['EventID']==4) {\u000a\u0009var lp = db.command('UPDATE NetworkListeningPort set Count = Count + 1 \\\u000a             UPSERT RETURN AFTER @rid, Count WHERE Hostname = ? AND Organisation = ? AND \\\u000a\u0009\u0009\u0009 TransportProtocol = ? AND LocalAddress = ? AND LocalPort = ? AND \\\u000a \u0009\u0009\u0009 ProcessId = ? AND ProcessName = ?',\u000a             e['Hostname'], e['Organisation'], e['TransportProtocol'], e['LocalAddress'],\u000a             e['LocalPort'],e['ProcessId'],e['ProcessName'])\u000a              \u000a\u0009if(lp[0].getProperty('Count') == 1 && e['ProcessName'] != 'System'){ // new listening port\u000a        db.command('CREATE EDGE ListeningPortSighted FROM ? TO \\\u000a        (SELECT FROM ProcessCreate WHERE Hostname = ? AND Organisation = ? AND \\\u000a\u0009\u0009ProcessId = ? order by id desc LIMIT 1) RETRY 10 WAIT 10', lp[0].getProperty('@rid'),e['Hostname'],\u000a        e['Organisation'], e['ProcessId'])\u000a\u0009}\u0009\u000a}\u000a  \u000aif(e['EventID']==1 || e['EventID']==2) {\u000a\u0009print('network address for ' + e['Hostname'] + ' ' + e['IpAddress'])\u000a    db.command('UPDATE NetworkAddress set Count = Count + 1 \\\u000a                   UPSERT RETURN AFTER @rid, Count WHERE Hostname = ? AND \\\u000a\u0009\u0009\u0009\u0009   Organisation = ? AND PhysicalAddress = ? AND IpAddress = ?',\u000a                   e['Hostname'], e['Organisation'], e['PhysicalAddress'],e['IpAddress'])\u000a}\u000a\u000a// returning zero tells AddEvent to not continue any further\u000areturn 0","name":"DataFuseNetwork_v2","language":"javascript","parameters":["e"]},{"@type":"d","@rid":"#6:33","@version":1,"@class":"OFunction","idempotent":null,"code":"// pre-processing routine called by AddEvent\u000ae['_classname'] = e['Class']; \u000aif(e['_classname'] == 'SpoofParentProcessId') print('Spoof found: ' + e['ProcessGuid'])\u000adelete e['Class'];\u000areturn e","name":"DataFusionProcMon","language":"javascript","parameters":["e"]},{"@type":"d","@rid":"#6:34","@version":1,"@class":"OFunction","idempotent":null,"code":"// pre-processing routine called by AddEvent\u000avar db = orient.getDatabase();\u000ae['_classname'] = 'UserActionTracking'\u000adelete e['ProcessID']\u000atry {\u000a\u0009var uat = JSON.parse(e['Message'])\u000a}\u000acatch(err) {\u000a\u0009print(Date() + ' Offending DataFuseUserActions ' + e['Message'])\u000a    //print(logline)\u000a    db.command('INSERT INTO FailedJSON SET line = ?', logline)\u000a    return 0\u000a}\u000afor(var k in uat){ e[k] = uat[k] }\u000areturn e","name":"DataFuseUserActions","language":"javascript","parameters":["e"]},{"@type":"d","@rid":"#6:35","@version":1,"@class":"OFunction","idempotent":null,"code":"// pre-processing routine called by AddEvent\u000avar db = orient.getDatabase();\u000a// handle OSQuery results\u000avar re = /FROM\\s+(.+)\\s*/gi\u000avar match = re.exec(e['Query'])\u000aif(match.length < 2) return 0\u000avar _classname = \"OSQuery_\" + match[1];  \u000afor(var i = 0; i < e['Results'].length ; i++) {\u000a\u0009var eachline = e['Results'][i]\u000a    eachline['Organisation'] = e['Organisation']\u000a    eachline['Hostname'] = e['Hostname']\u000a    eachline['QueryStart'] = e['QueryStart']\u000a    eachline['QueryEnd'] = e['QueryEnd']\u000a    eachline['RequestRequestRid'] = e['RequestRequestRid']\u000a    var stmt = 'INSERT INTO '+ _classname + ' CONTENT ' + JSON.stringify(eachline)\u000a    print(stmt);\u000a    try { r = db.command(stmt); }\u000a    catch(err){\u000a       print(Date() + ' Error inserting: ' + err)\u000a       db.command('INSERT INTO Errors SET OffendingStatement = ?, Error = ?', stmt, err)\u000a    }\u000a}\u000areturn 0\u000a\u000a","name":"OSQuery","language":"javascript","parameters":["e"]},{"@type":"d","@rid":"#6:36","@version":1,"@class":"OFunction","idempotent":null,"code":"// pre-processing routine called by AddEvent\u000avar db = orient.getDatabase();\u000a\u000ae['_classname'] = eventIdLookup(e['EventID'])\u000a// Nxlog puts Sysmon ProcessId into this field, we want the ProcessCreate.ProcessId\u000ae['SysmonProcessId'] = e['ProcessID']\u000adelete e['ProcessID']\u000avar re = /ProcessId: (\\d+)/g\u000avar match = re.exec(e['Message'])\u000aif(match != null) e['ProcessId'] = parseInt(match[1]);\u000a\u000a// general correction, on some endpoints, these field names are inconsistent \u000aif(e[\"SourceProcessGUID\"]) e[\"SourceProcessGuid\"] = e[\"SourceProcessGUID\"]; \u000aif(e[\"TargetProcessGUID\"]) e[\"TargetProcessGuid\"] = e[\"TargetProcessGUID\"]; \u000a//force ProcessGuid fields to upper case, these fields end up lower-case on some endpoints \u000aif(e['ProcessGuid']) e['ProcessGuid'] = e['ProcessGuid'].toUpperCase()\u000aif(e['ParentProcessGuid']) e['ParentProcessGuid'] = e['ParentProcessGuid'].toUpperCase()\u000aif(e['SourceProcessGuid']) e['SourceProcessGuid'] = e['SourceProcessGuid'].toUpperCase()  \u000aif(e['TargetProcessGuid']) e['TargetProcessGuid'] = e['TargetProcessGuid'].toUpperCase()   \u000a    \u000aif(e['_classname'] == 'ProcessCreate') {\u000a\u0009// for building parentOf-sequence; see UpdateSequence function\u000a    if(e['ParentImage'] == \"System\") {  \u000a    \u0009e['Sequence'] = 'System > smss.exe'\u000a        e['ToBeProcessed'] = false\u000a\u0009}\u000a    UpdateProcessTypeLookup(e)\u000a    AssignProcessType(e)\u000a    CheckSysmonBug(e)\u000a  \u000a    if(e['ParentImage'] != \"System\") {  \u000a      var parent = db.query('SELECT expand(rid) FROM index:ProcessCreate.Organisation_Hostname_ProcessGuid \\\u000a                   where key = [?,?,?]', e['Organisation'], e['Hostname'], e['ParentProcessGuid'])\u000a      if(parent.length > 0) {\u000a         //print('Assigned parent RID ' + parent[0].field('@rid') + ' for ' + e['Image'])\u000a         e['ParentRID'] = parent[0].field('@rid')\u000a         // valid lineage sequence starts with System > ...\u000a         if(parent[0].field('Sequence') != null && parent[0].field('Sequence').indexOf('System') == 0) {\u000a         \u0009var exename = e['Image'].split(\"\\\\\")\u000a\u0009\u0009\u0009exename = exename[exename.length - 1]\u000a            e['Sequence'] = parent[0].field('Sequence') + ' > ' + exename\u000a         }\u000a      }\u000a      else print('Parent NOT found ' + e['Image'])\u000a    }\u000a}\u000a\u000aif(e['_classname'] == 'NetworkConnect') {\u000a  AssignDestinationType(e)\u000a}\u000a\u000areturn e","name":"Microsoft_Windows_Sysmon","language":"javascript","parameters":["e"]},{"@type":"d","@rid":"#6:37","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000a\u000aif(e['ParentImage'] == \"System\") { \u000a\u0009print(''); print(Date() + \" Found \" + e['Image'] + \" on \" + e['Hostname']); print('');\u000a    db.command('UPDATE ProcessType_id_cache SET smss_id = ? UPSERT WHERE Hostname = ? AND \\\u000a\u0009\u0009\u0009\u0009\u0009\u0009Organisation = ?',e['id'],e['Hostname'],e['Organisation'])\u000a}\u000a\u000a// update explorer.exe ID into cache table to find Type A (BeforeExplorer) process      \u000aif(e['ParentImage'].indexOf(\"Windows\\\\System32\\\\userinit.exe\") > 0 && e['Image'].indexOf('explorer.exe') > 0){\u000a\u0009print('')\u000a    print(Date() + \" Found \" + e['Image'] + \" on \" + e['Hostname'])\u000a    print('')\u000a\u0009db.command('UPDATE ProcessType_id_cache SET explorer_id = ? UPSERT WHERE Hostname = ? AND \\\u000a                       Organisation = ?',e['id'],e['Hostname'],e['Organisation'])\u000a}","name":"UpdateProcessTypeLookup","language":"javascript","parameters":["e"]},{"@type":"d","@rid":"#6:38","@version":1,"@class":"OFunction","idempotent":null,"code":"// called by Microsoft_Windows_Sysmon pre-processing function\u000avar db = orient.getDatabase();\u000a\u000avar t = db.query('select from ProcessType_id_cache Where Hostname = ? AND Organisation = ?', \u000a\u0009\u0009\u0009\u0009 e['Hostname'], e['Organisation'])\u000aif(t.length > 0 && t[0].field('smss_id') > 0) {\u000a\u0009if(e['id'] > t[0].field('smss_id') && e['id'] > t[0].field('explorer_id')  \u000a       && t[0].getProperty('explorer_id') > t[0].field('smss_id')) {\u000a           e['ProcessType'] = \"AfterExplorerBackground\"\u000a     }\u000a\u0009 else {\u000a           e['ProcessType'] = \"BeforeExplorer\"\u000a\u0009 }\u000a\u000a}\u000aelse {\u000a\u0009print('Found orphan @ ' + e['Hostname'] + ' | ' + e['Image'])\u000a\u0009e['ProcessType'] = \"Orphan\"\u000a  \u0009e['ToBeProcessed'] = false\u000a}","name":"AssignProcessType","language":"javascript","parameters":["e"]},{"@type":"d","@rid":"#6:39","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000a\u000avar destinationType = 'external'\u000avar ipv6LocalCheck = /^fe80|^fc00|^fd00|^ff0/\u000aif(e['DestinationIp'].indexOf(':') > 0) {\u000a\u0009if(ipv6LocalCheck.test(e['DestinationIp'])) destinationType = 'internal'  \u000a}\u000aelse {\u000a   var internalCheck = /(^127\\.)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.)|(^169\\.254\\.)|(^255\\.255\\.255\\.255)|(^239\\.255\\.255\\.250)/\u000a   if(internalCheck.test(e['DestinationIp'])) destinationType = 'internal'\u000a}\u000a\u000aif(destinationType == 'internal' ){ // check if it's proxy\u000a\u0009var proxy = db.query('SELECT from WebProxies WHERE Organisation = ? AND Address = ? AND Port = ?', \u000a                             e['Organisation'], e['DestinationIp'], e['DestinationPort'] )\u000a    if(proxy.length > 0) destinationType = 'proxy'       \u000a}\u000a\u000ae['DestinationType'] = destinationType","name":"AssignDestinationType","language":"javascript","parameters":["e"]},{"@type":"d","@rid":"#6:40","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000a\u000adb.command(\"DELETE VERTEX WATCHLIST WHERE Organisation = '\"+r.field(\"Organisation\")+\"' AND Hostname = '\"+r.field(\"Hostname\")+\"' AND ProcessGuid = '\"+r.field(\"ProcessGuid\")+\"'\"); \u000a\u000aConnectToProcessCreate(r);\u000a","name":"ProcessTerminate","language":"javascript","parameters":["r"]},{"@type":"d","@rid":"#6:41","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000a\u000avar u = db.command('UPDATE ImageLoadedHashes set Count = Count + 1 \\\u000a                    UPSERT RETURN AFTER @rid, Count, BaseLined WHERE ImageLoaded = ? \\\u000a                    AND Hashes = ?', r.field('ImageLoaded'),r.field('Hashes'))\u000a// BasedLined means allowed (aka whitelisted)\u000aif(u[0].field('BaseLined') == true) return \u000a\u000aprint()\u000aprint(Date() + \"Sys First Sighting of \" + r.field('ImageLoaded'))\u000aprint()\u000a\u000aretry(\"db.command('CREATE EDGE SysSighted from \"+u[0].field('@rid')+\" TO \"+r.field('@rid')+\"')\")\u000a\u000adb.command('CREATE EDGE UsedAsDriver FROM (SELECT FROM FileCreate WHERE Hostname = ? AND Organisation = ? AND TargetFilename.toLowerCase() = ? order by id desc limit 1) TO ? RETRY 10 WAIT 10',r.field('Hostname'),r.field('Organisation'),r.field('ImageLoaded').toLowerCase(),r.field('@rid'))\u000a\u000aretry(\"db.command('UPDATE \" + r.field('@rid') + \" SET ToBeProcessed = false')\")","name":"DriverLoad","language":"javascript","parameters":["r"]},{"@type":"d","@rid":"#6:42","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000a\u000a// ImageHashes tracking\u000avar u = db.command('UPDATE ImageHashes set Count = Count + 1 UPSERT RETURN AFTER @rid, Count \\\u000a\u0009\u0009\u0009\u0009\u0009WHERE Image = ? AND Hashes = ?', r.field('Image'), r.field('Hashes'))\u000au = db.command('UPDATE ImageHashes set HashCount = HashCount + 1 \\\u000a                        RETURN AFTER @rid, Count, HashCount, BaseLined WHERE Hashes = ?',r.field('Hashes'))\u000avar IHT_rid = u[0].field('@rid')\u000a              \u000a// CommandLine tracking\u000au = db.command('UPDATE HostUserPrivilegeCommandLine set Count = Count + 1 \\\u000a\u0009\u0009\u0009\u0009UPSERT RETURN AFTER @rid, Count, Score WHERE \\\u000a                Hostname = ? AND Organisation = ? AND User = ? AND CommandLine = ? AND IntegrityLevel = ?',r.field('Hostname'),r.field('Organisation'),r.field('User'),r.field('CommandLine'),r.field('IntegrityLevel'))\u0009\u000avar HUPC_rid = u[0].field('@rid')\u000a    \u000a        // Reboot Tracking\u000aif(r.field('ParentImage').indexOf('dfpm.exe') > 0 && r.field('Image').indexOf('shutdown.exe') > 0) {\u000a\u0009retry(\"db.command('CREATE EDGE Rebooted from \"+HUPC_rid+\" TO \"+r.field('@rid')+\"')\")\u000a\u0009print(r.field('Hostname') + ' reboot command issued')\u000a}\u000a    \u000a// assign if any exact same commandline with existing score > 0\u000avar score = db.query('select from commandlinecluster \\\u000a\u0009\u0009\u0009\u0009\u0009where Score > 0 AND CommandLine = ?',r.field('CommandLine'))\u000a// note OR condition\u000aif(u[0].getProperty('Count') == 1 || score.length > 0 || u[0].field('Score') > 0) {\u000a\u0009retry(\"db.command('CREATE EDGE CommandLineSighted FROM \"+HUPC_rid+\" TO \"+r.field('@rid')+\"')\")\u000a    retry(\"db.command('CREATE EDGE HasHashes FROM \"+HUPC_rid+\" to \"+IHT_rid+\"')\")\u000a    //print('CommandLineSighted ' + r.field('CommandLine'))\u000a}","name":"TrackProcess","language":"javascript","parameters":["r"]},{"@type":"d","@rid":"#6:43","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar wpc = db.query('SELECT FROM WatchList WHERE Organisation = ? AND Hostname = ? \\\u000a\u0009\u0009  AND ProcessGuid = ?', e['Organisation'], e['Hostname'], e['ProcessGuid'])\u000a\u000aif(wpc.length == 0) return null\u000a\u000aif(wpc[0].field('id') == null) {\u000a\u0009// we assign this id so that the triggered function can look for events b4 this id\u000a    retry(\"db.command('UPDATE \" + wpc[0].field('@rid') + \" SET id = \" + e['id'] + \"')\")\u000a    LinkWatchListRecord(wpc)\u000a}\u000a\u000areturn wpc[0]","name":"CheckProcessWatchlist","language":"javascript","parameters":["e"]},{"@type":"d","@rid":"#6:44","@version":1,"@class":"OFunction","idempotent":null,"code":"// fix Sysmon bug: wrong ParentImage, ParentProcessGuid, ParentCommandLine\u000a// this bug results to circular ParentOf references\u000a\u000avar db = orient.getDatabase();\u000a\u000aif(e['ParentImage'].indexOf('svchost.exe') > 0 && (e['Image'].indexOf('wininit.exe') > 0 || e['Image'].indexOf('csrss.exe') > 0)) {\u000a\u0009print('')\u000a\u0009print('Sysmon bug found! ' + e['Image'])\u000a\u0009print('')         \u000a\u0009var parent = db.query(\"select from pc Where ParentImage like '%smss.exe' AND \\\u000a\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009Image like '%smss.exe' AND ProcessId = ? AND Hostname = ? AND \\\u000a\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009Organisation = ? order by id desc \\\u000a\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009limit 1\", e['ParentProcessId'], e['Hostname'], e['Organisation'])\u000a\u0009if(parent.length == 0) return \u000a\u0009print('Found CORRECT parent process')\u000a    e['ParentImage'] = parent[0].field('Image')\u000a    e['ParentCommandLine'] = parent[0].field('CommandLine')\u000a    e['ParentProcessGuid'] = parent[0].field('ProcessGuid')\u000a}","name":"CheckSysmonBug","language":"javascript","parameters":["e"]},{"@type":"d","@rid":"#6:45","@version":1,"@class":"OFunction","idempotent":null,"code":"// eg: System > smss.exe > smss.exe > wininit.exe > services.exe > svchost.exe > wuauclt.exe > AM_Delta_Patch_1.321.2229.1.exe\u000a// note the frontend whitelisting need to use this function otherwise matching won't work\u000a\u000avar exenames = sequence.split(\" > \")\u000alastone = exenames[exenames.length - 1]\u000alastone = lastone.replace('.exe','').replace(/[0-9]/g,'').replace(/[.]/g,'')\u000avar newseq = ''\u000a// names like blahX64.exe will get affected too\u000afor(var i = 0; i < exenames.length - 1; i++) \u000a  newseq = newseq + (exenames[i].replace('.exe','').replace(/[0-9]/g,'').replace(/[.]/g,'') + ' > ')\u000a\u000areturn newseq + lastone\u000a\u000a\u000a\u000a","name":"stripDottedNumbers","language":"javascript","parameters":["sequence"]}]}