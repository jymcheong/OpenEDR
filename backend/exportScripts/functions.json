{"records":[{"@type":"d","@version":1,"@class":"OFunction","idempotent":false,"code":"var db = orient.getDatabase();\n\n// process log line sent from insertEvent.js\nvar logline = unescape(jsondata)\nif(logline.trim().length == 0) return\nvar e = null\ntry {\n  e = removeSpaceFromKey(JSON.parse(logline));    \n}\ncatch(err) {\n   print(Date() + err);\n   db.command('INSERT INTO FailedJSON SET line = ?', logline)\n   return\n}\n\n// every event gets a unique ID\nvar id = (new Date())*1\ne['id'] = id\n\nif(e['Hostname']) { e['Hostname'] = e['Hostname'].toUpperCase() }\n\n//for multi-tenancy support\nif(organisation != undefined) { \n  if(organisation.length > 0) e['Organisation'] = organisation\n}\nif(e['Organisation'] === undefined) e['Organisation'] = 'MyCompany' \n  \n// default class if can't figure out which class later\nclassname = 'WinEvent' \ne['ToBeProcessed'] = true\n\n// This Keywords field is a huge negative number that breaks record insertion\nif(e['Keywords'] != undefined) delete e['Keywords']\n\n// Pre-insertion processing...\nvar funcName = e[\"SourceName\"].replace(/-/g,'_')\nif(funcName in this){\n    e = this[funcName](e); \n    if(e == 0) return; \n    // pre-processing that needs to continue returns a _classname\n    if(\"_classname\" in e) {\n       classname = e[\"_classname\"]\n       delete e[\"_classname\"]\n    }\n}\n\n//problematic for server-side parsing... it is repeated data anyway\nif(e['Message'] != null) delete e['Message'] \n\n//--Insert event------\nvar jsonstring = JSON.stringify(e)\nvar stmt = 'INSERT INTO '+ classname + ' CONTENT ' + jsonstring\nvar r = null\ntry { r = db.command(stmt); }\ncatch(err){\n    print(Date() + ' Error inserting ' + stmt)\n    db.command('INSERT INTO FailedJSON SET line = ?', logline)\n    return\n}\n//--End insert event------\n\n// post-insertion processing...\n// Linking edges that need RID of inserted record is done here\nswitch(classname) { \ncase \"ProcessCreate\":\n\t\tCheckForeign(r[0])\n    \tCheckSpoof(r[0])\n    \tTrackProcess(r[0])\n        break;\n    \ncase \"ImageLoad\": //this is filtered by nxlog.conf\n\t\tCheckForeign(r[0])\n      // track full-path-to-file AND Hashes\n    \tdb.command('UPDATE ImageLoadedHashes set Count = Count + 1 UPSERT RETURN AFTER \\\n                 @rid, Count WHERE ImageLoaded = ? AND Hashes = ?',\n                 r[0].field('ImageLoaded'), r[0].field('Hashes') )\n\n      // track ONLY Hashes        \n      \tdb.command('UPDATE ImageLoadedHashes set HashCount = HashCount + 1 \\\n                  UPSERT RETURN AFTER @rid, HashCount, BaseLined WHERE Hashes = ?', r[0].field('Hashes') )\n        ConnectToProcessCreate(r[0]);\n    \tbreak;\n\ncase \"UntrustedFile\":\ncase \"UserActionTracking\":\ncase \"SpoofParentProcessId\":\ncase \"NetworkConnect\":\ncase \"ProcessTerminate\":\ncase \"DriverLoad\":\ncase \"ProcessTampering\":\ncase \"CapturedFile\":\n       this[classname](r[0])\n       break;\n    \ncase \"PipeCreated\":\t    \t\ncase \"PipeConnected\":   \ncase \"RawAccessRead\":   \ncase \"FileCreateTime\":  \t\ncase \"FileCreate\": \t     \ncase \"FileCreateStreamHash\":     \ncase \"RegistryEvent\":\n        var wpc = CheckProcessWatchlist(e)\n        if(wpc == null) return\n        var sql = 'CREATE EDGE ' + edgeLookup(r[0].field('@class')) + ' FROM \\\n\t\t\t\t\t  ' + wpc.field('PCrid') + ' TO ' + r[0].field('@rid')\n\t\tretry(\"db.command('\" + sql + \"')\")\n        retry(\"db.command('UPDATE \"+ r[0].field('@rid') + \" SET ToBeProcessed = false')\")\n    \tbreak;\n\ncase \"CreateRemoteThread\":\ncase \"ProcessAccess\":\n       if(CheckProcessWatchlist(e) == null) return\n       this[classname](r[0])    \n       break;\n}\n\nreturn","name":"AddEvent","language":"javascript","parameters":["jsondata","organisation"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\nvar circularCheck = {} //each @rid should only be seen ONCE.\n\nfunction findParent(n, s) { // start from leaf child node\n  if(circularCheck[n] === undefined) {\n     circularCheck[n] = 1\n  }\n  else {\n     print('circular path detected ' + n)\n  \t return s + ' circular path'\n  }\n  var separator = s.length > 0 ? ' > ' : '';\n  var r = db.query('select from ' + n)\n  if(r.length == 0) return s; // no record, don't proceed\n  \n  // reached dead-end (circular path handled earlier)\n  if(r[0].getProperty('in_ParentOf') == null) {\n    var i = r[0].getProperty('Image').split(\"\\\\\")\n    if(r[0].getProperty('Image').indexOf('smss.exe') > 0) i[i.length-1] = 'System > ' + i[i.length-1]\n    return (i[i.length-1] + separator + s)      \n  }\n  //print('in_ParentOf RID = ' + r[0].getProperty('in_ParentOf'))\n  var p = db.query('select expand(out) from ' + r[0].getProperty('in_ParentOf').toString().replace('[','').replace(']',''))\n  var i = r[0].getProperty('Image').split(\"\\\\\")\n  return findParent(p[0].getProperty('@rid'), i[i.length-1] + separator + s);\n}\n\nreturn findParent(startrid,'')\n","name":"GetParentOfSequence","language":"javascript","parameters":["startrid"]},{"@type":"d","@version":2,"@class":"OFunction","idempotent":null,"code":"/*\n\tThis is a Dynamic Hook function. Using console:\n    alter class parentof Superclass +OTriggered\n    alter class parentof CUSTOM onAfterCreate='UpdateSequence'\n    This function is called whenever ParentOf edge is linked between a Parent & Child Process.\n    This function will upsert the lineage sequence class (named Sequence) to track new process lineage\n*/\n\nvar db = orient.getDatabase();\n\nfunction fixSequence(prevSeq){\n\tprint('Found partial sequence, attempt to fix: ' + prevSeq + ' from ' + doc.field('in').field('@rid'))\n    for(var i = 0; i < 3; i++) {\n      var ps = db.query('SELECT GetParentOfSequence(?) as seq', doc.field('out').field('@rid'))\n      prevSeq = ps[0].field('seq')\n      if(prevSeq == null || prevSeq.indexOf('System >') < 0) continue;\n      //found valid sequence\n      db.command('UPDATE ? SET Sequence = ? RETURN AFTER Sequence', doc.field('out').field('@rid'), prevSeq)\n      print('GetParentOfSequence found: ' + prevSeq + ' for ' + doc.field('in').field('@rid'))\t\n      return prevSeq\n    }\n    var parentEXE = doc.field('out').field('Image').split(\"\\\\\")\n\tparentEXE = parentEXE[parentEXE.length - 1]\n    var childEXE = doc.field('in').field('Image').split(\"\\\\\")\n\tchildEXE = childEXE[childEXE.length - 1]\n    var partialSeq = parentEXE + ' > ' + childEXE\n    //print(partialSeq)\n    var seq = db.query('SELECT Sequence from seq WHERE Sequence like \"%' + partialSeq + '\"')\n    if(seq.length > 0) return seq[0].field('Sequence').replace(' > ' + childEXE, \"\")\n    return parentEXE\n}\n\nfunction upsertSequence(seq, rid){\n    if(seq.length == 0) return\n  \n    var sc = db.command('UPDATE seq SET Count = Count + 1 UPSERT \\\n\t\t\t\tRETURN AFTER @rid, Count, Score WHERE Sequence = ?',seq) \n    var toLink = false\n\tif(sc[0].field('Score') > 0) toLink = true\n    if(sc[0].field('Count') == 1) {\n       var wl = db.query('select from seq WHERE BaseLined = true AND Sequence = ?', stripDottedNumbers(seq))\n       if(wl.length == 0) toLink = true // not whitelisted\n    }\n    if(toLink) {\n\t\tsql = 'CREATE EDGE SequenceSighted FROM '+sc[0].field('@rid')+' TO '+ rid\n        retry(\"db.command('\" + sql + \"')\")\n    }\n\tprint(doc.field('in').field('EventTime') + '\\n' +  doc.field('in').field('Organisation') + \n           ' | ' + doc.field('in').field('Hostname') + ' : ' + seq + '|' + sc[0].field('Count'));\n}\n\n// Sometimes Sequence may not be assigned at Microsoft_Windows_Sysmon pre-processing function\nif(doc.field('in').field('Sequence') === null) {\n  print('no pre-processed Sequence!')\n  var exename = doc.field('in').field('Image').split(\"\\\\\")\n  exename = exename[exename.length - 1]\n  var prevSeq = '' + doc.field('out').field('Sequence'); \n  for(var i = 0; i < 3; i++){ //retry mechanism\n    try{\n       //valid sequence always starts with 'System >' \n       if(prevSeq.indexOf('System > ') == 0) { \n          var seq = prevSeq + ' > ' + exename\n          var sql = 'UPDATE ' + doc.field('in').field('@rid') + ' SET \\\n                    Sequence = \"'+seq+'\" RETURN AFTER Sequence'\n          retry(\"db.command('\" + sql + \"')\")\n          upsertSequence(seq, doc.field('in').field('@rid'))    \n          break;\n        }\n        //prevSeq = fixSequence(prevSeq)\n    }\n    catch(err){\n      if(err.indexOf('UPDATE') >= 0) continue; \n    }\n  }\n  // update ProcessType if unable to recover any Sequence\n  if(prevSeq == null || prevSeq.indexOf('System >') < 0){\n    var sql = 'UPDATE ' + doc.field('in').field('@rid') + ' SET ProcessType = \"Orphan\"'\n    retry(\"db.command('\" + sql + \"')\")\n  }\n}\nelse upsertSequence(doc.field('in').field('Sequence'),doc.field('in').field('@rid'))","name":"UpdateSequence","language":"javascript","parameters":null},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\nvar rid = r.field('@rid')\n\nvar source = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ? limit 1', r.field('Organisation'), r.field('Hostname'),  r.field('SourceProcessGuid'));\n\nif(source.length > 0) {\n\t//print('CreateRemoteThread Source found')\n    retry(\"db.command('CREATE EDGE CreatedThread FROM \" + source[0].field('rid').field('@rid') + \" TO \" + rid + \"')\")\n}\n\n\nvar target = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ? limit 1', r.field('Organisation'), r.field('Hostname'), r.field('TargetProcessGuid'))\n\nif(target.length > 0) {\n\t//print('CreateRemoteThread Target found')\n    retry(\"db.command('CREATE EDGE RemoteThreadFor FROM \" + rid + \" TO \" + target[0].field('rid').field('@rid') + \"')\")\n}\n\nretry(\"db.command('UPDATE \"+ rid + \" SET ToBeProcessed = false')\")","name":"CreateRemoteThread","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\n//var u = db.query(\"SELECT FROM \" + rid)\n//if(u.length == 0) return\nvar rid = u.field('@rid')\n\n// keeping this because of the parameterized SQL\nfunction retry(command){\n    try {\n        eval(command) \n    }\n    catch(err){\n        var e = '' + err\n        if(e.indexOf('UPDATE') > 0) {\n            print('Retrying ' + command)\n            retry(command)\n        }\n      \telse {\n          db.command('INSERT INTO Errors Set Command = ?, Message = ?',command, e)\n          print('Failed: ' + command + ' | Error: ' + e)\n       }\n    }\n}\nvar pc = null\nvar ua = '' + u\nif(ua.indexOf('Foreground Transition') > 0) {\n  print('\\nForeground transit from: ')\n  print(u.getProperty('@rid') + ' ' + u.getProperty('FromProcessId') + ' to ' + u.getProperty('ToProcessId') + '\\n'); \n  \n  if(u.getProperty('FromProcessGuid') == null) {\n  \tretry(\"db.command('CREATE EDGE SwitchedFrom FROM (SELECT FROM ProcessCreate WHERE ProcessId = ? \\\n\t\t AND Hostname = ? AND Organisation = ? Order By id Desc Limit 1) TO ?', \\\nu.getProperty('FromProcessId'),u.getProperty('Hostname'),u.getProperty('Organisation'),u.getProperty('@rid'))\")\n  }\n  else {\n     retry(\"db.command('CREATE EDGE SwitchedFrom FROM (SELECT FROM ProcessCreate WHERE ProcessGuid = ? \\\n\t\t AND Hostname = ? AND Organisation = ? Order By id Desc Limit 1) TO ?', \\\nu.getProperty('FromProcessGuid'),u.getProperty('Hostname'),u.getProperty('Organisation'),u.getProperty('@rid'))\")\n  }\n  \n  if(u.getProperty('ToProcessGuid') == null) {\n    retry(\"db.command('CREATE EDGE SwitchedTo FROM ? TO (SELECT FROM ProcessCreate WHERE ProcessId = ? AND Hostname = ? AND Organisation = ? Order By id Desc  LIMIT 1)', \\\nu.getProperty('@rid'),u.getProperty('ToProcessId'),u.getProperty('Hostname'),u.getProperty('Organisation'))\")\n    \n    pc = db.query('SELECT FROM ProcessCreate WHERE Hostname = ? AND Organisation = ? AND ProcessId = ? Order By id Desc LIMIT 1', u.getProperty('Hostname'),u.getProperty('Organisation'),u.getProperty('ToProcessId'))\n  }\n  else {\n    retry(\"db.command('CREATE EDGE SwitchedTo FROM ? TO (SELECT FROM ProcessCreate WHERE ProcessGuid = ? AND Hostname = ? AND Organisation = ? Order By id Desc  LIMIT 1)', \\\nu.getProperty('@rid'),u.getProperty('ToProcessGuid'),u.getProperty('Hostname'),u.getProperty('Organisation'))\")\n    \n    pc = db.query('SELECT FROM ProcessCreate WHERE Hostname = ? AND Organisation = ? AND ProcessGuid = ? Order By id Desc LIMIT 1', u.getProperty('Hostname'),u.getProperty('Organisation'),u.getProperty('ToProcessGuid'))\n  }\n  \n//means somehow ProcessCreate was missing, eg. DataFusion was installed after the Process was created\n  if(pc.length == 0) { \n      print(\"ProcessCreate not available for \" + u.getProperty('@rid'));\n      return \n  }\n//  print(pc[0].getProperty('ProcessType'));\n}\nelse { // Click, MouseMove, Enter...\n  if(u.getProperty('ProcessGuid')==null) {\n    pc = db.query('SELECT FROM ProcessCreate WHERE Hostname = ? AND Organisation = ? \\\n\tAND ProcessId = ? Order By id Desc LIMIT 1', u.getProperty('Hostname'),u.getProperty('Organisation'),u.getProperty('ProcessId'))\n  }\n  else {\n    pc = db.query('SELECT FROM ProcessCreate WHERE Hostname = ? AND Organisation = ? \\\n\tAND ProcessGuid = ? Order By id Desc LIMIT 1', u.getProperty('Hostname'),u.getProperty('Organisation'),u.getProperty('ProcessGuid'))\n  }\n  \n   //means somehow ProcessCreate was missing, eg. DataFusion was installed after the Process was created\n    if(pc.length == 0) return \n  \n    retry(\"db.command('CREATE EDGE ActedOn FROM ? TO ?',u.getProperty('@rid'),pc[0].getProperty('@rid'))\")\n}\n\nif(pc[0].getProperty('ProcessType') != 'AfterExplorerForeground'){\n  print('1. Assigning to AfterExplorerForeground for ' + pc[0].getProperty('@rid') + '\\n' + pc[0].getProperty('Organisation') + ':' + pc[0].getProperty('Hostname') + ':' + pc[0].getProperty('Image') + '\\n');\n  retry(\"db.command('UPDATE ? SET ProcessType = ?', pc[0].getProperty('@rid'),'AfterExplorerForeground')\")      \n}\n\nretry(\"db.command('UPDATE \" + rid + \" SET ToBeProcessed = false')\") ","name":"UserActionTracking","language":"javascript","parameters":["u"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\nvar rid = r.field('@rid')\nvar pc = db.query('SELECT FROM ProcessCreate where Organisation = ? AND Hostname = ? AND ProcessGuid = ? limit 1', r.field('Organisation'), r.field('Hostname'), r.field('ProcessGuid'))\n\n//regardless ProcessCreate exist or not, the non-ProcessCreate is processed\nretry(\"db.command('UPDATE \"+ rid + \" SET ToBeProcessed = false')\") \nif(pc.length == 0) return\n\nvar sql = 'CREATE EDGE ' + edgeLookup(r.field('@class')) + ' FROM ' + pc[0].field('@rid') + ' TO ' + rid\nretry(\"db.command('\" + sql + \"')\")","name":"ConnectToProcessCreate","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\n\nvar r = db.query('select from (select from pc where ToBeProcessed=true order by id asc limit 100) order by Hostname asc, RecordNumber asc')\n\nfunction handleRetry(child_rid){\n\tprint('set retry for ' + child_rid)\n    try {\n    \tvar c = db.command('UPDATE ? SET ParentRetry = ParentRetry + 1 RETURN AFTER ParentRetry', child_rid)\n      \tif(c[0].field('ParentRetry') > 0) { // this is deliberate\n            retry(\"db.command('\"+'UPDATE '+child_rid+' SET ToBeProcessed = false'+\"')\")\n         \treturn true  // done retrying       \t\n      \t}\n      \telse {\n        \tprint('retried ' + c[0].field('ParentRetry'))\n         \treturn false // for retrying\n      \t}\t\n    }\n    catch(err) {\n\t\tvar e = '' + err\n        if(e.indexOf('UPDATE') > 0) {\n        \tprint('Retrying connectParent for ' + child_rid)\n            handleRetry(child_rid)\n        }\n        else {\n        \tprint('handleRetry Failed: ' + e)\n            db.command('INSERT INTO Errors Set Message = ?', e)\n        }\n    }\n}\n\n// used when retry complete still no parent\nfunction recoverSeq(child) {\n    var parentEXE = child.field('ParentImage').split(\"\\\\\")\n\tparentEXE = parentEXE[parentEXE.length - 1]\n    var childEXE = child.field('Image').split(\"\\\\\")\n\tchildEXE = childEXE[childEXE.length - 1]\n    var partialSeq = parentEXE + ' > ' + childEXE\n    var seq = db.command('UPDATE seq SET Count = Count + 1 UPSERT RETURN AFTER @rid, Sequence, Count, Score \\\n\t\t\t\t\t\t  WHERE Sequence like \"%' + partialSeq + '\"')\n    if(seq[0].field('Sequence') == null) {\n       print('Fail to recover sequence for ' + child.field('Image'))\n       return true\n    }\n    if(seq.length == 0) return true\n    \n    print(\"recoverSeq|\" + child.field('Hostname') + \"|\" + seq[0].field('Sequence'))\n    var sql = 'UPDATE ' + child.field('@rid') + ' SET Sequence = \"'+seq[0].field('Sequence')+'\"'\n    retry(\"db.command('\" + sql + \"')\")\n    var s = seq[0].field('Sequence')\n    if(s == null) return false\n    if(s.indexOf('services.exe > svchost.exe > wuauclt.exe > AM_') > 0) return true\n    if(seq[0].field('Score') > 0 || seq[0].field('Count') == 1) {\n        sql = 'CREATE EDGE SequenceSighted FROM ' + seq[0].field('@rid') + ' TO ' + child.field('@rid')\n        retry(\"db.command('\" + sql + \"')\")\n        print('Sequence sighted in recoverSeq, linked '  + seq[0].field('@rid') + ' TO \\\n\t\t' + child.field('@rid'))      \n    }\n\treturn true\n}\n\nfunction linkToParent(parentRID, childRID){\n\tretry(\"db.command('\"+'CREATE EDGE ParentOf from '+parentRID+' TO '+childRID+\"')\")\n\tretry(\"db.command('\"+'UPDATE '+childRID+' SET ToBeProcessed = false'+\"')\")\n}\n\nfunction connectParent(child) {\t\n    // this field is pre-populated by Microsoft_Windows_Sysmon pre-processing function\n    if(child.field('ParentRID') != null){\n    \tlinkToParent(child.field('ParentRID'),child.field('@rid'))\n        return true\n    }\n    \n    var parent = db.query('SELECT FROM ProcessCreate where Organisation = ? AND Hostname = ? AND \\\n\tProcessGuid = ?', child.field('Organisation'), child.field('Hostname'), child.field('ParentProcessGuid'))\n    if(parent.length > 0) {\n\t\tparent = parent[0]\n        if(parent.field('Sequence') == null) {\n            if( handleRetry(child.field('@rid')) == false) return false\n        }\n        linkToParent(parent.field('@rid'),child.field('@rid'))\n        return true   \n    }\n  \telse {\n       if(child.field('ProcessType') == 'Orphan') {\n       \t\tprint('Found orphan @ ' + child.field('Hostname') + ' | ' + child.field('Image'))\n            retry(\"db.command('\"+'UPDATE '+child.field('@rid')+' SET ToBeProcessed = false'+\"')\")\n            return true\n       }\n       else {\n           if(handleRetry(child.field('@rid')) == false) return false    \n           else return recoverSeq(child);\n       }\n    } \n}\n\nfor(var i = 0; i < r.length; i++){ \n\tif(connectParent(r[i]) == false) break;\n}","name":"ConnectParentProcess","language":"javascript","parameters":[]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\n//var r = db.query(\"SELECT FROM \" + rid);\n//if(r.length == 0) return;\n//r = r[0];\nvar rid = r.field('@rid')\nprint('UntrustedFile found on ' + r.field('Hostname'));\n\nfunction findProcessCreate(r){\n  return db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ? limit 1', r.field('Organisation'), r.field('Hostname'), r.field('ProcessGuid'));\n}\n\n// UntrustedFile is usually inserted before ProcessCreate/ImageLoad \n// the following handles scenario when UntrustedFile is inserted later.\nvar pc = null;\n\nvar linkSQL = \"\";\n\nif(r.field('Type') == 'ProcessCreate') {\n  \tpc = findProcessCreate(r)\n    if(pc.length > 0) linkSQL = \"db.command('CREATE EDGE ExeSighted FROM \" + rid +\" TO \" + pc[0].field('@rid') + \"')\" \n}\nelse {\n\tpc = db.query('SELECT FROM ImageLoad where Hostname = ? AND Organisation = ? AND ProcessGuid = ? AND ImageLoaded = ?',\n                   r.field('Hostname'), r.field('Organisation'), r.field('ProcessGuid'),r.field('FullPath'))\n    if(pc.length > 0) { linkSQL = \"db.command('CREATE EDGE DllSighted FROM \" + rid +\" TO \" + pc[0].field('@rid') + \"')\" }\n    else {\n       pc = findProcessCreate(r)\n       if(pc.length > 0)  linkSQL = \"db.command('CREATE EDGE DllSighted FROM \" + pc[0].field('@rid') +\" TO \" + rid + \"')\"\n    }\n}    \nif(pc.length == 0) return\n\nprint('linking foreign ' + r.field('Type') + ' ' + pc[0].field('@rid'))\nretry(linkSQL)\nretry(\"db.command('UPDATE \" + rid + \" SET ToBeProcessed = false')\")\nfindExecuteAfterWrite(r.field('FullPath'), pc[0].field('Hostname'), pc[0].field('Organisation'), pc[0].field('@rid'))\n","name":"UntrustedFile","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\nvar rid = r.field('@rid')\n//print('NetworkConnect ' + r.field('Image'))\n\nfunction findLateral(r) {\n    var lateral = null // look for lateral destination\n    if(r.field('DestinationHostname')){\n        lateral = db.query('SELECT FROM NetworkAddress WHERE Hostname = ? AND Organisation = ? AND Hostname <> ?',r.field('DestinationHostname'), r.field('Organisation'), r.field('Hostname'))\n        if(lateral.length > 0) return lateral\n    }\n    if(r.field('DestinationIp')){ // handles both IPv4 & 6\n        lateral = db.query('SELECT FROM NetworkAddress WHERE IpAddress = ? AND Hostname <> ? AND Organisation = ?',\n                           r.field('DestinationIp'),r.field('Hostname'),r.field('Organisation')) \t\n        if(lateral.length > 0) return lateral\n    }\n    return null\n}\n\n// This UPSERT will return #NN:-N rid if called via Dynamic Hook\nvar u = db.command('UPDATE NetworkDestinationPort set Count = Count + 1 \\\n                      UPSERT RETURN AFTER @rid, Count WHERE Image = ? AND \\\n                      Hostname = ? AND Organisation = ? AND Port = ?', \n                      r.field('Image'), r.field('Hostname'),r.field('Organisation'), \t\n      \t\t\t\t  r.field('DestinationPort'))\nif(u[0].field('Count') == 1) { // new destination port sighted for that Process-Image\n\tretry(\"db.command('CREATE EDGE DestinationPortSighted \\\n\t\tFROM \" + u[0].field('@rid') + \" TO \" + r.field('@rid') + \"')\")\n} \n\n// Find ProcessCreate to connect to...\nvar pc = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ?', r.field('Organisation'), r.field('Hostname'), r.field('ProcessGuid'))\nif(pc.length > 0) {\n    var edgeName = r.field('DestinationType') == 'proxy' ? 'UsedProxy' : 'ConnectedTo';\n\tretry(\"db.command('CREATE EDGE \" + edgeName + \" FROM \" + pc[0].field('@rid') + \" TO \" + rid + \"')\")\n}\n\n// Added codes\nif(r.field('DestinationPort') == 2222 && r.field('DestinationIp') == \"192.168.1.7\" && r.field('Image') != \"C:\\\\Windows\\\\openedr\\\\Upload.exe\") {\n  \t// For debugging purposes\n\tprint('Unauthorised access to SFTP event receiver service by ' + r.field('Image'))\n  \t// Create SftpIntrusionSighted edge from ProcessCreate to NetworkConnect\n\tretry(\"db.command('CREATE EDGE SftpIntrusionSighted FROM \" + pc[0].field('@rid') + \" TO \" + rid + \"')\")\n}\n\n//even if ProcessCreate cannot be found\nretry(\"db.command('UPDATE \" + rid + \" SET ToBeProcessed = false')\") \n// likely no proxy in environment, direct connection to external address\nif(r.field('DestinationType') == 'external') return \n\n// Find ListeningPort to connect to if exist...\nvar lateral = findLateral(r)\nif(lateral == null) return;\n\n//print('Found lateral communication, finding destination listeningPort for ' + rid)\nvar listening = db.query('SELECT FROM listeningport WHERE Hostname = ? AND Organisation = ? AND LocalPort = ?',lateral[0].field('Hostname'), lateral[0].field('Organisation'), r.field('DestinationPort'))\nif(listening.length == 0) return;\n\n// in web proxied environment, endpoint may be connecting to proxy constantly, that's what Sysmon can only see \nretry(\"db.command('CREATE EDGE LateralCommunication FROM \" + rid + \" TO \" + listening[0].getProperty('@rid') + \" ')\")\n\nif(listening[0].field('out_ListeningPortSighted') != null || listening[0].field('out_BoundTo') != null) return\n  \nvar lpc = db.query('SELECT FROM ProcessCreate WHERE Hostname = ? AND Organisation = ? AND ProcessId = ? AND Image.IndexOf(?) > -1 \\\n\t\t\t\t\torder by id desc LIMIT 1', listening[0].field('Hostname'), listening[0].field('Organisation'),\n  \t\t\t\t\tlistening[0].field('ProcessId'), listening[0].field('ProcessName'))\nif(lpc.length == 0) return;\n\nretry(\"db.command('CREATE EDGE BoundTo FROM \"+listening[0].getProperty('@rid')+\" TO \"+lpc[0].getProperty('@rid')+\"')\")\nprint('Added BoundTo edge between ' + listening[0].getProperty('@rid') + ' to ' + lpc[0].getProperty('@rid'))\n\n","name":"NetworkConnect","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// Called from insertEvent.js\n\nvar db = orient.getDatabase();\n\n// PendingTypeTimer functions sets ProcessType to AfterExplorerBackground \ndb.command('DELETE FROM oschedule WHERE name = \"PendingTypeEvent\"')\ndb.command(\"INSERT INTO oschedule  SET name = 'PendingTypeEvent', \\\n\t\t\tfunction = (SELECT FROM ofunction WHERE name = 'PendingTypeTimer'), rule = '0/10 * * * * ?'\")\n\n// ConnectParentProcess links child to parent process\ndb.command('DELETE FROM oschedule WHERE name = \"ConnectParentEvent\"')\ndb.command(\"INSERT INTO oschedule  SET name = 'ConnectParentEvent', \\\n\t\t\tfunction = (SELECT FROM ofunction WHERE name = 'ConnectParentProcess'), rule = '0/1 * * * * ?'\")","name":"RestartTimers","language":"javascript","parameters":null},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// to find Out-of-order ProcessCreate\n\nvar db = orient.getDatabase();\nvar r = db.query(\"SELECT id FROM pc where ParentImage = 'System' order by id desc limit 1\")\nif(r.length == 0) return\n\nvar prev_RN = 0\nvar PCs = db.query(\"SELECT RecordNumber FROM pc where id > ? order by id asc limit 100\", r[0].field('id') )\nif(PCs.length == 0) return\n\nfor(var i = 0; i < PCs.length; i++) {\n\tif(PCs[i].field('RecordNumber') > prev_RN) {\n    \tprev_RN = PCs[i].field('RecordNumber')\n    }\n    else {\n    \tprint('Found out of order: ' + prev_RN)\n        return prev_RN\n        break;\n    }\n}\n\nreturn \"none found\"","name":"findOO","language":"javascript","parameters":null},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\nvar rid = r.field('@rid')\n\nvar source = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ? limit 1', \n                      r.field('Organisation'), r.field('Hostname'),  r.field('SourceProcessGuid'));\n\nif(source.length > 0) {\n\tretry(\"db.command('CREATE EDGE ProcessAccessedFrom FROM \" + source[0].field('rid').field('@rid') + \" TO \" + rid + \"')\")\n}\n\nvar target = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ? limit 1', \n                      r.field('Organisation'), r.field('Hostname'), r.field('TargetProcessGuid'))\n\nif(target.length > 0) {\n\tretry(\"db.command('CREATE EDGE ProcessAccessedTo FROM \" + rid + \" TO \" + target[0].field('rid').field('@rid') + \"')\")\n}\n\nretry(\"db.command('UPDATE \"+ rid + \" SET ToBeProcessed = false')\") ","name":"ProcessAccess","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\n\n// fetch ProcessCreate\n// use date within EventTime, set the rest to 00:00:00\nvar pc = db.query('SELECT *, EventTime.format(\"yyyy-MM-dd 00:00:00\") as ET FROM ' + pc_rid)\nif(pc.length == 0) return\npc = pc[0]\n\n// setup the SQL statement\nvar stm = \"select from (select from processcreate where Hostname = ? AND Organisation = ? AND EventTime >= ? AND EventTime <= ?) where id <= ? order by id desc limit \" + n\n\n// fetch N prior ProcessCreates\nvar earlierProcesses = db.query(stm, pc.field('Hostname'), pc.field('Organisation'), pc.field('ET'), pc.field('EventTime'), pc.field('id'))\nif(earlierProcesses.length == 0) return\n\n// link them starting from the earliest\nfor(i = earlierProcesses.length - 1; i >=1; i--) {\n  //print( earlierProcesses[i].field('EventTime') + ' ' + earlierProcesses[i].field('Image') + ' to ' + earlierProcesses[i -1].field('Image'))\n  if(earlierProcesses[i].field('out_FollowedBy') == undefined) \n     retry(\"db.command('CREATE EDGE FollowedBy FROM \" + earlierProcesses[i].field('@rid') + \" to \" + earlierProcesses[i - 1].field('@rid') + \"')\") \n}","name":"FindPreviousProcesses","language":"javascript","parameters":["pc_rid","n"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// frontend.js calls this\n\nvar db = orient.getDatabase();\n\n// fetch ProcessCreate\nvar pc = db.query('SELECT *, EventTime.format(\"yyyy-MM-dd 00:00:00\") as ET, in(\"LastForeground\").size() as LFG FROM ' + pc_rid)\nif(pc.length == 0) return\npc = pc[0]\n\n// already linked\nif(pc.field('LFG') > 0) return\n\nvar fgProcess = db.query(\"select from processcreate where Hostname = ? AND Organisation = ? AND id < ? AND (ProcessType = 'AfterExplorerForeground' OR (Image like '%explorer.exe' AND ProcessType = 'BeforeExplorer')) order by id desc limit 1\", pc.field('Hostname'), pc.field('Organisation'), pc.field('id'))\n  \nif(fgProcess.length == 0) return\n\nprint('Found last FG process @ ' +  fgProcess[0].field('EventTime') + ' ' + fgProcess[0].field('Image') + ' for ' + pc_rid)\n\nretry(\"db.command('CREATE EDGE LastForeground FROM \" + fgProcess[0].field('@rid') + \" to \" + pc_rid + \"')\")","name":"FindLastForeground","language":"javascript","parameters":["pc_rid"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"//Used by investigation board controller\n\nvar db = orient.getDatabase();\nvar r = db.command(\"select from (traverse in('AddedTo'), in('FollowedBy'), in('LastForeground') from \"+rid\n                   + \" MAXDEPTH 3) where @rid <> ? AND @class <> 'Case' order by id\", rid); \nreturn r\n","name":"GetCaseProcessSequence","language":"javascript","parameters":["rid"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// rid: string of a ProcessCreate\n// traverse in('CommandLineSighted'), out('SimilarTo') from $RID\n// Whitelist in this case simply means setting the Score to ZERO.\n// There are two classes that Score is used for new & recurring sightings:\n// 1) HostUserPrivilegeCommandLine or HUPC\n// 2) CommandLineCluster\n// Called from frontend.js\n\nvar db = orient.getDatabase();\nvar r = db.query(\"traverse in('CommandLineSighted'), out('SimilarTo') from \" + rid);\n\nfor(var i = 0; i < r.length; i++) {\n  print('WhitelistCommandLine: ' + r[i].field('@class') )\n\tif(r[i].field('@class') == 'HostUserPrivilegeCommandLine' || r[i].field('@class') == 'CommandLineCluster')     {\n      \tdb.command('update ? set Score = 0, BaseLined = true', r[i].field('@rid'));\n    }\n}","name":"WhitelistCommandLine","language":"javascript","parameters":["rid"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// rid: RID of a ProcessCreate\n// use traverse in('sequencesighted') from <RID>\n// Called from frontend.js\n\nvar db = orient.getDatabase();\n\nvar r = db.query(\"traverse in('sequencesighted') from \" + rid);\nfor(var i = 0; i < r.length; i++) {\n\tif(r[i].field('@class') == 'ParentOfSequence') {\n      \tdb.command('update ? set Score = 0', r[i].field('@rid'));\n        db.command('insert into seq set BaseLined = true, Count = 1, Score = 0, Sequence = ?',\n                   stripDottedNumbers(r[i].field('Sequence')))\n    }\n}\n","name":"WhitelistSequence","language":"javascript","parameters":["rid"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// rid: string of a DriverLoad\n// use traverse in('SysSighted') from <RID>\n// Called from frontend.js\n\nvar db = orient.getDatabase();\n\nvar r = db.query(\"traverse in('SysSighted') from \" + rid);\n//print('whitelisting driver')\nfor(var i = 0; i < r.length; i++) {\n\tif(r[i].field('@class') == 'ImageLoadedHashes') {\n        //print(r[i].field('@rid'))\n        db.command('update ? set BaseLined = true', r[i].field('@rid'));\n    }\n}\n ","name":"WhitelistDriverLoad","language":"javascript","parameters":["rid"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase()\nvar s = 'System > smss.exe > smss.exe > wininit.exe > services.exe > svchost.exe > wuauclt.exe > AM_Delta_Patch_1.321.2229.1.exe'\ns = stripDottedNumbers(s)\nvar r = db.query('select from seq where BaseLined = true AND Sequence = ?',s)\n\nreturn r.length\n\nvar d = '{\"SourceName\":\"OSQuery\",\"Organisation\":\"MyCo\",\"Hostname\":\"WWWPC1\",\"RequestRequestRid\":\"#23:23\", \"QueryStart\":\"2020-03-03T18:00:00.123Z\",\"QueryEnd\":\"2020-03-03T18:00:03.456Z\", \"Query\":\"select * from drivers\", \"Results\":[{\"Blah\":1},{\"Blah\":2}]}'\n\nvar e = JSON.parse(d)\n\nif(e['SourceName'].toLowerCase() == 'osquery') {\n\tvar re = /FROM\\s+(.+)\\s*/gi\n\tvar match = re.exec(e['Query'])\n    if(match.length < 2) return\n  \tclassname = \"OSQuery_\" + match[1];  \n    for(var i = 0; i < e['Results'].length ; i++) {\n        var eachline = e['Results'][i]\n        eachline['Organisation'] = e['Organisation']\n        eachline['Hostname'] = e['Hostname']\n        eachline['QueryStart'] = e['QueryStart']\n        eachline['QueryEnd'] = e['QueryEnd']\n        eachline['RequestRequestRid'] = e['RequestRequestRid']\n        var stmt = 'INSERT INTO '+ classname + ' CONTENT ' + JSON.stringify(eachline)\n        print(stmt);\n        db.command(stmt)    \n    }\n    return\n}","name":"test","language":"javascript","parameters":null},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"/*\n  SpoofParentProcessId vertice will be linked to a ProcessCreate that has spoof parent PID by edge:SpoofedParentProcess.\n  Another edge:TrueParentOf links the actual parent Process to this process with spoofed PPID.\n*/\n\nvar db = orient.getDatabase();\nvar rid = r.field('@rid')\n\nprint('spoofed PPID processGuid: ' + r.field('ProcessGuid'))\nprint('True-parent processGuid: ' + r.field('TrueParentProcessGuid'))\n\n// link spoof alert vertex to ProcessCreate\nvar targetPC = db.query('SELECT FROM ProcessCreate WHERE ProcessGuid = ? AND Hostname = ? AND Organisation = ? limit 1',\n                        r.field('ProcessGuid'), r.field('Hostname'), r.field('Organisation') )\nif(targetPC.length == 0) return\ntargetPC = targetPC[0]\nretry(\"db.command('CREATE EDGE SpoofedParentProcess FROM \" + rid + \" to \" + targetPC.field('@rid') + \"')\")\n\n// link true-parent ProcessCreate to ProcessCreate with spoofed PPID\nvar trueParent = null\nif(r.field('TrueParentProcessGuid')) {\n\ttrueParent = db.query('SELECT FROM ProcessCreate WHERE ProcessGuid = ? AND Hostname = ? \\\nAND Organisation = ? limit 1', r.field('TrueParentProcessGuid'), r.field('Hostname'), r.field('Organisation') )\n}\nelse{\n\ttrueParent = db.query('SELECT FROM ProcessCreate WHERE ProcessId = ? AND Hostname = ? \\\nAND Organisation = ? limit 1', r.field('TrueParentProcessId'), r.field('Hostname'), r.field('Organisation') )\n}\n\nif(trueParent.length == 0) return\ntrueParent = trueParent[0]\nretry(\"db.command('CREATE EDGE TrueParentOf FROM \" + trueParent.field('@rid') + \" to \" + targetPC.field('@rid') + \"')\")\nretry(\"db.command('UPDATE \"+ rid + \" SET ToBeProcessed = false')\")","name":"SpoofParentProcessId","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// Ported from https://github.com/jordanthomas/jaro-winkler/blob/master/index.js\n// Returns a similarity score where 1 means identifical strings (s1 vs s2)\n\nfunction extend(a, b) {\n    for (var property in b) {\n      if (b.hasOwnProperty(property)) {\n        a[property] = b[property];\n      }\n    }\n\n    return a;\n  }\n\n  function distance(s1, s2, options) {\n    var m = 0;\n    var defaults = { caseSensitive: true };\n    var settings = extend(defaults, options);\n    var i;\n    var j;\n\n    // Exit early if either are empty.\n    if (s1.length === 0 || s2.length === 0) {\n      return 0;\n    }\n\n    // Convert to upper if case-sensitive is false.\n    if (!settings.caseSensitive) {\n      s1 = s1.toUpperCase();\n      s2 = s2.toUpperCase();\n    }\n\n    // Exit early if they're an exact match.\n    if (s1 === s2) {\n      return 1;\n    }\n\n    var range = (Math.floor(Math.max(s1.length, s2.length) / 2)) - 1;\n    var s1Matches = new Array(s1.length);\n    var s2Matches = new Array(s2.length);\n\n    for (i = 0; i < s1.length; i++) {\n      var low  = (i >= range) ? i - range : 0;\n      var high = (i + range <= (s2.length - 1)) ? (i + range) : (s2.length - 1);\n\n      for (j = low; j <= high; j++) {\n        if (s1Matches[i] !== true && s2Matches[j] !== true && s1[i] === s2[j]) {\n          ++m;\n          s1Matches[i] = s2Matches[j] = true;\n          break;\n        }\n      }\n    }\n\n    // Exit early if no matches were found.\n    if (m === 0) {\n      return 0;\n    }\n\n    // Count the transpositions.\n    var k = 0;\n    var numTrans = 0;\n\n    for (i = 0; i < s1.length; i++) {\n      if (s1Matches[i] === true) {\n        for (j = k; j < s2.length; j++) {\n          if (s2Matches[j] === true) {\n            k = j + 1;\n            break;\n          }\n        }\n\n        if (s1[i] !== s2[j]) {\n          ++numTrans;\n        }\n      }\n    }\n\n    var weight = (m / s1.length + m / s2.length + (m - (numTrans / 2)) / m) / 3;\n    var l = 0;\n    var p = 0.1;\n\n    if (weight > 0.7) {\n      while (s1[l] === s2[l] && l < 4) {\n        ++l;\n      }\n\n      weight = weight + l * p * (1 - weight);\n    }\n\n    return weight;\n  }\n\nreturn distance(s1, s2)","name":"JWCompare","language":"javascript","parameters":["s1","s2"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// rid of a WatchList record \nvar db = orient.getDatabase();\nr = r[0]\nvar rid = r.field('@rid')\n\nvar e = db.query(\"select from Sysmon where Organisation = ? AND Hostname = ? AND ProcessGuid = ? AND ToBeProcessed = true AND @rid <> ? AND id < ?\", r.field(\"Organisation\"), r.field(\"Hostname\"), r.field(\"ProcessGuid\"), r.field(\"PCrid\"), r.field(\"id\"))\nif(e.length == 0) return\n\nfor(var i = 0; i < e.length; i++){\n  if(e[i].field('@class') == \"CreateRemoteThread\" || e[i].field('@class') == \"ProcessAccess\"){\n      this[e[i].field('@class')](e[i])\n  }\n  else{ // this links directly to ProcessCreate\n\t\tvar sql = 'CREATE EDGE ' + edgeLookup(e[i].field('@class')) + ' FROM ' + r.field('PCrid') + ' TO ' + e[i].field('@rid')\n       retry(\"db.command('\" + sql + \"')\")\n       retry(\"db.command('UPDATE \"+ e[i].field('@rid') + \" SET ToBeProcessed = false')\")\n  }\n}","name":"LinkWatchListRecord","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// used for UPDATE & CREATE EDGE retries\nvar db = orient.getDatabase();\n\ntry {\n\teval(command) \n}\ncatch(err){\n\tvar e = '' + err\n    if(e.indexOf('UPDATE') > 0) {\n    \tprint('Retrying ' + command)\n    \tretry(command)\n\t}\n\telse {\n    \tdb.command('INSERT INTO Errors Set Command = ?, Message = ?',command, e)\n        print('Failed: ' + command + ' | Error: ' + e)\n\t}\n}\n","name":"retry","language":"javascript","parameters":["command"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var _edgeLookup = {'ProcessTerminate':'Terminated', 'PipeCreated':'CreatedPipe',\n                'PipeConnected':'ConnectedPipe', 'RawAccessRead':'RawRead',\n                'FileCreateTime':'ChangedFileCreateTime', 'FileCreate':'CreatedFile',\n                'FileCreateStreamHash':'CreatedFileStream', 'RegistryEvent':'AccessedRegistry',\n                'NetworkConnect':'ConnectedTo', 'ImageLoad':'LoadedImage', 'ProcessTampering':'Tampered'}\nif(classname in _edgeLookup){\n\treturn _edgeLookup[classname];\n}\nelse return \"ProcessGuid\";","name":"edgeLookup","language":"javascript","parameters":["classname"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// rid of a ProcessCreate record \n// this is called from frontend.js\n\nvar db = orient.getDatabase();\nvar r = db.query(\"SELECT FROM \" + rid)\nif(r.length == 0) return\nr = r[0]\n\nvar e = db.query(\"select from Sysmon where Organisation = ? AND Hostname = ? AND ProcessGuid = ? AND ToBeProcessed = true AND @rid <> ?\", r.field(\"Organisation\"), r.field(\"Hostname\"), r.field(\"ProcessGuid\"), rid)\nif(e.length == 0) return\n\nfor(var i = 0; i < e.length; i++){\n  if(e[i].field('@class') == \"CreateRemoteThread\" || e[i].field('@class') == \"ProcessAccess\"){\n\t  this[e[i].field('@class')](e[i])\n  }\n  else{\n\t\tvar sql = 'CREATE EDGE ' + edgeLookup(e[i].field('@class')) + ' FROM ' + rid + ' TO ' + e[i].field('@rid')\n       retry(\"db.command('\" + sql + \"')\")\n       retry(\"db.command('UPDATE \"+ e[i].field('@rid') + \" SET ToBeProcessed = false')\")\n  }\n} ","name":"LinkNonProcessCreate","language":"javascript","parameters":["rid"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\n\n// use Image/ImageLoaded string to search last FileCreate \nprint('\\nSearching for FileCreate ' + searchFilename + '\\n');\nvar foundFile = db.query('SELECT FROM FileCreate WHERE Hostname = ? AND Organisation = ? AND \\\n     TargetFilename = ? order by id desc limit 1', Hostname, Organisation, searchFilename);\n\nif(foundFile.length == 0) return \n\nprint('Found for FileCreate ' + searchFilename + '\\n');\t\nretry(\"db.command('CREATE EDGE ExecuteAfterWrite FROM \" + foundFile[0].field('@rid') + \" to \" + pc_rid + \"')\")\n","name":"findExecuteAfterWrite","language":"javascript","parameters":["searchFilename","Hostname","Organisation","pc_rid"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// find whitespace in key string; {key,value} database property name won't accept space\nvar notValid = /[\\W_]+/g \nif (typeof obj !== \"object\") return obj;\nfor (var prop in obj) {\n\tif (obj.hasOwnProperty(prop)) {\n    \tobj[prop.replace(notValid, \"\")] = removeSpaceFromKey(obj[prop]);\n        if (notValid.test(prop)) {\n        \tdelete obj[prop];\n\t\t}\n\t}\n}\nreturn obj;","name":"removeSpaceFromKey","language":"javascript","parameters":["obj"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// EventId to Sysmon Sub-Classname \nvar _eventIdLookup = {1:'ProcessCreate', 2:'FileCreateTime', 3:'NetworkConnect', \n                    4:'SysmonStatus', 5:'ProcessTerminate',6:'DriverLoad', \n                    7:'ImageLoad', 8:'CreateRemoteThread', 9:'RawAccessRead', \n                    10:'ProcessAccess', 11:'FileCreate', 12:'RegistryEvent', \n                    13:'RegistryEvent', 14:'RegistryEvent', 15:'FileCreateStreamHash', \n                    16:'ConfigChanged', 17:'PipeCreated', 18:'PipeConnected', \n                    19:'WmiEvent', 20:'WmiEvent', 21:'WmiEvent', 22:'DnsQuery', 23:'FileDelete', \n                    25:'ProcessTampering', 255:'Error' }\n\nif(id in _eventIdLookup){\n\treturn _eventIdLookup[id]\n}\nelse\n    return \"Sysmon\"","name":"eventIdLookup","language":"javascript","parameters":["id"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\nvar rid = r.field('@rid')\nvar spoof = db.query('SELECT @rid, TrueParentProcessId FROM SpoofParentProcessId \\\n                          Where Hostname = ? AND Organisation = ? AND ProcessGuid = ?', r.field('Hostname'), \t\t                      r.field('Organisation'), r.field('ProcessGuid'));\nif(spoof.length == 0) return\n    \nprint('\\nfound spoof for ' + rid + ' true parentPID = ' + spoof[0].field('TrueParentProcessId') + '\\n')\nretry(\"db.command('CREATE EDGE SpoofedParentProcess FROM \" + spoof[0].field('@rid') + \" to \" + rid + \"')\")\nvar trueParent = null\n\nif(spoof[0].field('TrueParentProcessGuid')) {\n\ttrueParent = db.query('SELECT FROM ProcessCreate WHERE ProcessGuid = ? AND Hostname = ? \\\n\tAND Organisation = ? order by id desc limit 1', spoof[0].field('TrueParentProcessGuid'), r.field('Hostname'), r.field('Organisation') )\n}\nelse {\n\ttrueParent = db.query('SELECT FROM ProcessCreate WHERE ProcessId = ? AND Hostname = ? AND \\\n\tOrganisation = ? order by id desc limit 1',spoof[0].field('TrueParentProcessId'), r.field('Hostname'), \t\tr.field('Organisation') )\n}\nif(trueParent.length > 0) {\n retry(\"db.command('CREATE EDGE TrueParentOf FROM \" + trueParent[0].field('@rid') + \" to \" + rid + \"')\")\n}\n\ndb.command('UPDATE ? SET ToBeProcessed = false', spoof[0].field('@rid'))","name":"CheckSpoof","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\nvar classname = r.field('@class')\nvar pc_rid = r.field('@rid')\n\nvar fullpath = classname == 'ProcessCreate' ? r.field('Image') : r.field('ImageLoaded');\nvar foreign = db.query('SELECT * FROM UntrustedFile Where ToBeProcessed = true AND Type = ? AND \\\n\t\t\t\t\t\tHostname = ? AND Organisation = ? AND ProcessGuid = ? AND FullPath = ?', \n\t\t\t  classname, r.field('Hostname'), r.field('Organisation'), r.field('ProcessGuid'), fullpath);\nif(foreign.length == 0) return    \n\nvar edgename = classname == 'ProcessCreate' ? \"ExeSighted\" : \"DllSighted\";\nretry(\"db.command('CREATE EDGE \" + edgename + \" FROM \" + foreign[0].field('@rid') +\" TO \" + pc_rid + \"')\")\nretry(\"db.command('UPDATE \" + foreign[0].field('@rid') +\" SET ToBeProcessed = false')\")\nprint('Linked '+ edgename + ' from ' + foreign[0].field('@rid') + ' to ' + pc_rid)\n\n  // use Image/ImageLoaded string to search last FileCreate \nvar searchFilename = r.field('ImageLoaded') ? r.field('ImageLoaded') : r.field('Image');\nfindExecuteAfterWrite(searchFilename, r.field('Hostname'), r.field('Organisation'), pc_rid)\n","name":"CheckForeign","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// pre-processing routine called by AddEvent\nvar db = orient.getDatabase();\n\nif(e['EventID']==3 || e['EventID']==4) {\n\tvar lp = db.command('UPDATE NetworkListeningPort set Count = Count + 1 \\\n             UPSERT RETURN AFTER @rid, Count WHERE Hostname = ? AND Organisation = ? AND \\\n\t\t\t TransportProtocol = ? AND LocalAddress = ? AND LocalPort = ? AND \\\n \t\t\t ProcessId = ? AND ProcessName = ?',\n             e['Hostname'], e['Organisation'], e['TransportProtocol'], e['LocalAddress'],\n             e['LocalPort'],e['ProcessId'],e['ProcessName'])\n              \n\tif(lp[0].getProperty('Count') == 1 && e['ProcessName'] != 'System'){ // new listening port\n        db.command('CREATE EDGE ListeningPortSighted FROM ? TO \\\n        (SELECT FROM ProcessCreate WHERE Hostname = ? AND Organisation = ? AND \\\n\t\tProcessId = ? order by id desc LIMIT 1) RETRY 10 WAIT 10', lp[0].getProperty('@rid'),e['Hostname'],\n        e['Organisation'], e['ProcessId'])\n\t}\t\n}\n  \nif(e['EventID']==1 || e['EventID']==2) {\n//\tprint('network address for ' + e['Hostname'] + ' ' + e['IpAddress'])\n    db.command('UPDATE NetworkAddress set Count = Count + 1 \\\n                   UPSERT RETURN AFTER @rid, Count WHERE Hostname = ? AND \\\n\t\t\t\t   Organisation = ? AND PhysicalAddress = ? AND IpAddress = ?',\n                   e['Hostname'], e['Organisation'], e['PhysicalAddress'],e['IpAddress'])\n}\n\n// returning zero tells AddEvent to not continue any further\nreturn 0","name":"DataFuseNetwork_v2","language":"javascript","parameters":["e"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// pre-processing routine called by AddEvent\ne['_classname'] = e['Class']; \nif(e['_classname'] == 'SpoofParentProcessId') print('Spoof found: ' + e['ProcessGuid'])\ndelete e['Class'];\nreturn e","name":"DataFusionProcMon","language":"javascript","parameters":["e"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// pre-processing routine called by AddEvent\nvar db = orient.getDatabase();\ne['_classname'] = 'UserActionTracking'\ndelete e['ProcessID']\ntry {\n\tvar uat = JSON.parse(e['Message'])\n}\ncatch(err) {\n\tprint(Date() + ' Offending DataFuseUserActions ' + e['Message'])\n    //print(logline)\n    db.command('INSERT INTO FailedJSON SET line = ?', logline)\n    return 0\n}\nfor(var k in uat){ e[k] = uat[k] }\nreturn e","name":"DataFuseUserActions","language":"javascript","parameters":["e"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// pre-processing routine called by AddEvent\nvar db = orient.getDatabase();\n// handle OSQuery results\nvar re = /FROM\\s+(.+)\\s*/gi\nvar match = re.exec(e['Query'])\nif(match.length < 2) return 0\nvar _classname = \"OSQuery_\" + match[1];  \nfor(var i = 0; i < e['Results'].length ; i++) {\n\tvar eachline = e['Results'][i]\n    eachline['Organisation'] = e['Organisation']\n    eachline['Hostname'] = e['Hostname']\n    eachline['QueryStart'] = e['QueryStart']\n    eachline['QueryEnd'] = e['QueryEnd']\n    eachline['RequestRequestRid'] = e['RequestRequestRid']\n    var stmt = 'INSERT INTO '+ _classname + ' CONTENT ' + JSON.stringify(eachline)\n    print(stmt);\n    try { r = db.command(stmt); }\n    catch(err){\n       print(Date() + ' Error inserting: ' + err)\n       db.command('INSERT INTO Errors SET OffendingStatement = ?, Error = ?', stmt, err)\n    }\n}\nreturn 0\n\n","name":"OSQuery","language":"javascript","parameters":["e"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// pre-processing routine called by AddEvent\nvar db = orient.getDatabase();\n\ne['_classname'] = eventIdLookup(e['EventID'])\n// Nxlog puts Sysmon ProcessId into this field, we want the ProcessCreate.ProcessId\ne['SysmonProcessId'] = e['ProcessID']\ndelete e['ProcessID']\nvar re = /ProcessId: (\\d+)/g\nvar match = re.exec(e['Message'])\nif(match != null) e['ProcessId'] = parseInt(match[1]);\n\n// general correction, on some endpoints, these field names are inconsistent \nif(e[\"SourceProcessGUID\"]) e[\"SourceProcessGuid\"] = e[\"SourceProcessGUID\"]; \nif(e[\"TargetProcessGUID\"]) e[\"TargetProcessGuid\"] = e[\"TargetProcessGUID\"]; \n//force ProcessGuid fields to upper case, these fields end up lower-case on some endpoints \nif(e['ProcessGuid']) e['ProcessGuid'] = e['ProcessGuid'].toUpperCase()\nif(e['ParentProcessGuid']) e['ParentProcessGuid'] = e['ParentProcessGuid'].toUpperCase()\nif(e['SourceProcessGuid']) e['SourceProcessGuid'] = e['SourceProcessGuid'].toUpperCase()  \nif(e['TargetProcessGuid']) e['TargetProcessGuid'] = e['TargetProcessGuid'].toUpperCase()   \n    \nif(e['_classname'] == 'ProcessCreate') {\n\t// for building parentOf-sequence; see UpdateSequence function\n    if(e['ParentImage'] == \"System\") {  \n    \te['Sequence'] = 'System > smss.exe'\n        e['ToBeProcessed'] = false\n\t}\n    UpdateProcessTypeLookup(e)\n    AssignProcessType(e)\n    CheckSysmonBug(e)\n  \n    if(e['ParentImage'] != \"System\") {  \n      var parent = db.query('SELECT FROM ProcessCreate \\\n\t  where Organisation = ? AND Hostname = ? AND ProcessGuid = ?', e['Organisation'], \t\t\t  e['Hostname'], e['ParentProcessGuid'])\n      if(parent.length > 0) {\n         //print('Assigned parent RID ' + parent[0].field('@rid') + ' for ' + e['Image'])\n         e['ParentRID'] = parent[0].field('@rid')\n         // valid lineage sequence starts with System > ...\n         if(parent[0].field('Sequence') != null && parent[0].field('Sequence').indexOf('System') == 0) {\n         \tvar exename = e['Image'].split(\"\\\\\")\n\t\t\texename = exename[exename.length - 1]\n            e['Sequence'] = parent[0].field('Sequence') + ' > ' + exename\n         }\n      }\n      //else print('Parent NOT found ' + e['Image'])\n    }\n}\n\nif(e['_classname'] == 'NetworkConnect') {\n  AssignDestinationType(e)\n}\n\nreturn e","name":"Microsoft_Windows_Sysmon","language":"javascript","parameters":["e"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\n\nif(e['ParentImage'] == \"System\") { \n\tprint(''); print(Date() + \" Found \" + e['Image'] + \" on \" + e['Hostname']); print('');\n    db.command('UPDATE ProcessType_id_cache SET smss_id = ? UPSERT WHERE Hostname = ? AND \\\n\t\t\t\t\t\tOrganisation = ?',e['id'],e['Hostname'],e['Organisation'])\n}\n\n// update explorer.exe ID into cache table to find Type A (BeforeExplorer) process      \nif(e['ParentImage'].indexOf(\"Windows\\\\System32\\\\userinit.exe\") > 0 && e['Image'].indexOf('explorer.exe') > 0){\n\tprint('')\n    print(Date() + \" Found \" + e['Image'] + \" on \" + e['Hostname'])\n    print('')\n\tdb.command('UPDATE ProcessType_id_cache SET explorer_id = ? UPSERT WHERE Hostname = ? AND \\\n                       Organisation = ?',e['id'],e['Hostname'],e['Organisation'])\n}","name":"UpdateProcessTypeLookup","language":"javascript","parameters":["e"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// called by Microsoft_Windows_Sysmon pre-processing function\nvar db = orient.getDatabase();\n\nvar t = db.query('select from ProcessType_id_cache Where Hostname = ? AND Organisation = ?', \n\t\t\t\t e['Hostname'], e['Organisation'])\nif(t.length > 0 && t[0].field('smss_id') > 0) {\n\tif(e['id'] > t[0].field('smss_id') && e['id'] > t[0].field('explorer_id')  \n       && t[0].getProperty('explorer_id') > t[0].field('smss_id')) {\n           e['ProcessType'] = \"AfterExplorerBackground\"\n     }\n\t else {\n           e['ProcessType'] = \"BeforeExplorer\"\n\t }\n\n}\nelse {\n\tprint('Found orphan @ ' + e['Hostname'] + ' | ' + e['Image'])\n\te['ProcessType'] = \"Orphan\"\n  \te['ToBeProcessed'] = false\n}","name":"AssignProcessType","language":"javascript","parameters":["e"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\n\nvar destinationType = 'external'\nvar ipv6LocalCheck = /^fe80|^fc00|^fd00|^ff0/\nif(e['DestinationIp'].indexOf(':') > 0) {\n\tif(ipv6LocalCheck.test(e['DestinationIp'])) destinationType = 'internal'  \n}\nelse {\n   var internalCheck = /(^127\\.)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.)|(^169\\.254\\.)|(^255\\.255\\.255\\.255)|(^239\\.255\\.255\\.250)/\n   if(internalCheck.test(e['DestinationIp'])) destinationType = 'internal'\n}\n\nif(destinationType == 'internal' ){ // check if it's proxy\n\tvar proxy = db.query('SELECT from WebProxies WHERE Organisation = ? AND Address = ? AND Port = ?', \n                             e['Organisation'], e['DestinationIp'], e['DestinationPort'] )\n    if(proxy.length > 0) destinationType = 'proxy'       \n}\n\ne['DestinationType'] = destinationType","name":"AssignDestinationType","language":"javascript","parameters":["e"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\n\ndb.command(\"DELETE VERTEX WATCHLIST WHERE Organisation = '\"+r.field(\"Organisation\")+\"' AND Hostname = '\"+r.field(\"Hostname\")+\"' AND ProcessGuid = '\"+r.field(\"ProcessGuid\")+\"'\"); \n\nConnectToProcessCreate(r);\n","name":"ProcessTerminate","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\n\nvar u = db.command('UPDATE ImageLoadedHashes set Count = Count + 1 \\\n                    UPSERT RETURN AFTER @rid, Count, BaseLined WHERE ImageLoaded = ? \\\n                    AND Hashes = ?', r.field('ImageLoaded'),r.field('Hashes'))\n// BasedLined means allowed (aka whitelisted)\nif(u[0].field('BaseLined') == true) return \n\nprint()\nprint(Date() + \"Sys First Sighting of \" + r.field('ImageLoaded'))\nprint()\n\nretry(\"db.command('CREATE EDGE SysSighted from \"+u[0].field('@rid')+\" TO \"+r.field('@rid')+\"')\")\n\ndb.command('CREATE EDGE UsedAsDriver FROM (SELECT FROM FileCreate WHERE Hostname = ? AND Organisation = ? AND TargetFilename.toLowerCase() = ? order by id desc limit 1) TO ? RETRY 10 WAIT 10',r.field('Hostname'),r.field('Organisation'),r.field('ImageLoaded').toLowerCase(),r.field('@rid'))\n\nretry(\"db.command('UPDATE \" + r.field('@rid') + \" SET ToBeProcessed = false')\")","name":"DriverLoad","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\n\n// ImageHashes tracking\nvar u = db.command('UPDATE ImageHashes set Count = Count + 1 UPSERT RETURN AFTER @rid, Count \\\n\t\t\t\t\tWHERE Image = ? AND Hashes = ?', r.field('Image'), r.field('Hashes'))\nu = db.command('UPDATE ImageHashes set HashCount = HashCount + 1 \\\n                        RETURN AFTER @rid, Count, HashCount, BaseLined WHERE Hashes = ?',r.field('Hashes'))\nvar IHT_rid = u[0].field('@rid')\n              \n// CommandLine tracking\nu = db.command('UPDATE HostUserPrivilegeCommandLine set Count = Count + 1 \\\n\t\t\t\tUPSERT RETURN AFTER @rid, Count, Score WHERE \\\n                Hostname = ? AND Organisation = ? AND User = ? AND CommandLine = ? AND IntegrityLevel = ?',r.field('Hostname'),r.field('Organisation'),r.field('User'),r.field('CommandLine'),r.field('IntegrityLevel'))\t\nvar HUPC_rid = u[0].field('@rid')\n    \n        // Reboot Tracking\nif(r.field('ParentImage').indexOf('dfpm.exe') > 0 && r.field('Image').indexOf('shutdown.exe') > 0) {\n\tretry(\"db.command('CREATE EDGE Rebooted from \"+HUPC_rid+\" TO \"+r.field('@rid')+\"')\")\n\tprint(r.field('Hostname') + ' reboot command issued')\n}\n    \n// assign if any exact same commandline with existing score > 0\nvar score = db.query('select from commandlinecluster \\\n\t\t\t\t\twhere Score > 0 AND CommandLine = ?',r.field('CommandLine'))\n// note OR condition\nif(u[0].getProperty('Count') == 1 || score.length > 0 || u[0].field('Score') > 0) {\n\tretry(\"db.command('CREATE EDGE CommandLineSighted FROM \"+HUPC_rid+\" TO \"+r.field('@rid')+\"')\")\n    retry(\"db.command('CREATE EDGE HasHashes FROM \"+HUPC_rid+\" to \"+IHT_rid+\"')\")\n    //print('CommandLineSighted ' + r.field('CommandLine'))\n}","name":"TrackProcess","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\nvar wpc = db.query('SELECT FROM WatchList WHERE Organisation = ? AND Hostname = ? \\\n\t\t  AND ProcessGuid = ?', e['Organisation'], e['Hostname'], e['ProcessGuid'])\n\nif(wpc.length == 0) return null\n\nif(wpc[0].field('id') == null) {\n\t// we assign this id so that the triggered function can look for events b4 this id\n    retry(\"db.command('UPDATE \" + wpc[0].field('@rid') + \" SET id = \" + e['id'] + \"')\")\n    LinkWatchListRecord(wpc)\n}\n\nreturn wpc[0]","name":"CheckProcessWatchlist","language":"javascript","parameters":["e"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// fix Sysmon bug: wrong ParentImage, ParentProcessGuid, ParentCommandLine\n// this bug results to circular ParentOf references\n\nvar db = orient.getDatabase();\n\nif(e['ParentImage'].indexOf('svchost.exe') > 0 && (e['Image'].indexOf('wininit.exe') > 0 || e['Image'].indexOf('csrss.exe') > 0)) {\n\tprint('')\n\tprint('Sysmon bug found! ' + e['Image'])\n\tprint('')         \n\tvar parent = db.query(\"select from pc Where ParentImage like '%smss.exe' AND \\\n\t\t\t\t\t\t\t\tImage like '%smss.exe' AND ProcessId = ? AND Hostname = ? AND \\\n\t\t\t\t\t\t\t\tOrganisation = ? order by id desc \\\n\t\t\t\t\t\t\t\tlimit 1\", e['ParentProcessId'], e['Hostname'], e['Organisation'])\n\tif(parent.length == 0) return \n\tprint('Found CORRECT parent process')\n    e['ParentImage'] = parent[0].field('Image')\n    e['ParentCommandLine'] = parent[0].field('CommandLine')\n    e['ParentProcessGuid'] = parent[0].field('ProcessGuid')\n}","name":"CheckSysmonBug","language":"javascript","parameters":["e"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"// eg: System > smss.exe > smss.exe > wininit.exe > services.exe > svchost.exe > wuauclt.exe > AM_Delta_Patch_1.321.2229.1.exe\n// note the frontend whitelisting need to use this function otherwise matching won't work\n\nvar exenames = sequence.split(\" > \")\nlastone = exenames[exenames.length - 1]\nlastone = lastone.replace('.exe','').replace(/[0-9]/g,'').replace(/[.]/g,'')\nvar newseq = ''\n// names like blahX64.exe will get affected too\nfor(var i = 0; i < exenames.length - 1; i++) \n  newseq = newseq + (exenames[i].replace('.exe','').replace(/[0-9]/g,'').replace(/[.]/g,'') + ' > ')\n\nreturn newseq + lastone\n\n\n\n","name":"stripDottedNumbers","language":"javascript","parameters":["sequence"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase()\n\nvar cf = {\"Class\":\"CapturedFile\",\"ProcessGuid\":\"{6F9463F8-8DA1-606A-852E-000000001800}\",\"OriginalPath\":\"c:\\\\users\\\\q\\\\desktop\\\\21dbgview - copy - copy.exe\",\"UploadedFileName\":\"sample_F7F649EFE114DB7E4EDD93BD11171AAD7072C4006F36EA4D7BC683A541DB9781.ex_\",\"SourceName\":\"DataFusionProcMon\",\"Hostname\":\"DESKTOP-KTN8LG3\"}\n\n// Upload.exe will do this before transmitting...\nvar cfEscaped = escape(JSON.stringify(cf))\nprint(cfEscaped)\n\n// Simulating a upload instead of just direct INSERT\nAddEvent(cfEscaped)\n\nreturn 1\n","name":"test_CapturedFile","language":"javascript","parameters":null},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase()\n\nvar pt = {\"EventTime\":\"2021-04-05 12:10:09\",\"Hostname\":\"DESKTOP-KTN8LG3\",\"Keywords\":-9223372036854775808,\"EventType\":\"INFO\",\"SeverityValue\":2,\"Severity\":\"INFO\",\"EventID\":25,\"SourceName\":\"Microsoft-Windows-Sysmon\",\"ProviderGuid\":\"{5770385F-C22A-43E0-BF4C-06F5698FFBD9}\",\"Version\":5,\"Task\":25,\"OpcodeValue\":0,\"RecordNumber\":113745,\"ProcessID\":11220,\"ThreadID\":4416,\"Channel\":\"Microsoft-Windows-Sysmon/Operational\",\"Domain\":\"NT AUTHORITY\",\"AccountName\":\"SYSTEM\",\"UserID\":\"S-1-5-18\",\"AccountType\":\"User\",\"Message\":\"Process Tampering:\\r\\nRuleName: -\\r\\nUtcTime: 2021-04-05 04:10:09.363\\r\\nProcessGuid: {6f9463f8-8da1-606a-852e-000000001800}\\r\\nProcessId: 13636\\r\\nImage: C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\\r\\nType: Image is replaced\",\"Category\":\"Process Tampering (rule: ProcessTampering)\",\"Opcode\":\"Info\",\"RuleName\":\"-\",\"UtcTime\":\"2021-04-05 04:10:09.363\",\"ProcessGuid\":\"{6f9463f8-8da1-606a-852e-000000001800}\",\"Image\":\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\",\"Type\":\"Image is replaced\",\"EventReceivedTime\":\"2021-04-05 12:11:16\",\"SourceModuleName\":\"in\",\"SourceModuleType\":\"im_msvistalog\",\"DeviceVendor\":\"Microsoft\",\"DeviceProduct\":\"EventLog\"}\n\nAddEvent( escape(JSON.stringify(pt)) )\n\n\n","name":"test_ProcessTampering","language":"javascript","parameters":null},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\n\nvar pc = db.query('SELECT from ProcessCreate WHERE Hostname = ? AND Organisation = ? AND ProcessGuid = ?',r.field('Hostname'),r.field('Organisation'),r.field('ProcessGuid'))\t\n\nif(pc.length > 0) {\nvar n = db.query(\"traverse in('CommandLineSighted'), out('SimilarTo') from \" + pc[0].field('@rid'));\n  print(n.length)\n  for(var i = 0; i < n.length; i++) {\n     if(n[i].field('BaseLined') == true) {\n        print('ProcessTampering found whitelisted')\n        return;\n     }\n  }  \n  ConnectToProcessCreate(r);\n}\n// it is possible to have missing ProcessCreate while still capturing ProcessTampering events\n// something to consider how to deal with orphan ProcessTamper\n\n","name":"ProcessTampering","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase()\n\nvar pc = {\"EventTime\":\"2021-04-05 12:10:09\",\"Hostname\":\"DESKTOP-KTN8LG3\",\"Keywords\":-9223372036854775808,\"EventType\":\"INFO\",\"SeverityValue\":2,\"Severity\":\"INFO\",\"EventID\":1,\"SourceName\":\"Microsoft-Windows-Sysmon\",\"ProviderGuid\":\"{5770385F-C22A-43E0-BF4C-06F5698FFBD9}\",\"Version\":5,\"Task\":1,\"OpcodeValue\":0,\"RecordNumber\":113744,\"ProcessID\":11220,\"ThreadID\":4416,\"Channel\":\"Microsoft-Windows-Sysmon/Operational\",\"Domain\":\"NT AUTHORITY\",\"AccountName\":\"SYSTEM\",\"UserID\":\"S-1-5-18\",\"AccountType\":\"User\",\"Message\":\"Process Create:\\r\\nRuleName: -\\r\\nUtcTime: 2021-04-05 04:10:09.353\\r\\nProcessGuid: {6f9463f8-8da1-606a-852e-000000001800}\\r\\nProcessId: 13636\\r\\nImage: C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\\r\\nFileVersion: 89.0.774.68\\r\\nDescription: Microsoft Edge\\r\\nProduct: Microsoft Edge\\r\\nCompany: Microsoft Corporation\\r\\nOriginalFileName: msedge.exe\\r\\nCommandLine: \\\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\\\" --type=renderer --field-trial-handle=1956,13556612160138863865,13153239581568388022,131072 --lang=en-US --disable-client-side-phishing-detection --device-scale-factor=1 --num-raster-threads=4 --enable-main-frame-before-activation --renderer-client-id=9 --no-v8-untrusted-code-mitigations --mojo-platform-channel-handle=164 /prefetch:1\\r\\nCurrentDirectory: C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\89.0.774.68\\\\\\r\\nUser: DESKTOP-KTN8LG3\\\\q\\r\\nLogonGuid: {6f9463f8-6084-6065-d4d2-1b0000000000}\\r\\nLogonId: 0x1BD2D4\\r\\nTerminalSessionId: 2\\r\\nIntegrityLevel: Low\\r\\nHashes: MD5=FC449610FB8823F74414DF453B0E636E,SHA256=A9E592770FA1A63126ADA4F3B2F35FAE5EBF38D40A8178E412D5DF187D4D6162,IMPHASH=AA958B231113F22EC7CBE355F040ECED\\r\\nParentProcessGuid: {6f9463f8-8d7f-606a-4f2e-000000001800}\\r\\nParentProcessId: 7436\\r\\nParentImage: C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\\r\\nParentCommandLine: \\\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\\\" --profile-directory=Default\",\"Category\":\"Process Create (rule: ProcessCreate)\",\"Opcode\":\"Info\",\"RuleName\":\"-\",\"UtcTime\":\"2021-04-05 04:10:09.353\",\"ProcessGuid\":\"{6f9463f8-8da1-606a-852e-000000001800}\",\"Image\":\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\",\"FileVersion\":\"89.0.774.68\",\"Description\":\"Microsoft Edge\",\"Product\":\"Microsoft Edge\",\"Company\":\"Microsoft Corporation\",\"OriginalFileName\":\"msedge.exe\",\"CommandLine\":\"\\\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\\\" --type=renderer --field-trial-handle=1956,13556612160138863865,13153239581568388022,131072 --lang=en-US --disable-client-side-phishing-detection --device-scale-factor=1 --num-raster-threads=4 --enable-main-frame-before-activation --renderer-client-id=9 --no-v8-untrusted-code-mitigations --mojo-platform-channel-handle=164 /prefetch:1\",\"CurrentDirectory\":\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\89.0.774.68\\\\\",\"User\":\"DESKTOP-KTN8LG3\\\\q\",\"LogonGuid\":\"{6f9463f8-6084-6065-d4d2-1b0000000000}\",\"LogonId\":\"0x1bd2d4\",\"TerminalSessionId\":\"2\",\"IntegrityLevel\":\"Low\",\"Hashes\":\"MD5=FC449610FB8823F74414DF453B0E636E,SHA256=A9E592770FA1A63126ADA4F3B2F35FAE5EBF38D40A8178E412D5DF187D4D6162,IMPHASH=AA958B231113F22EC7CBE355F040ECED\",\"ParentProcessGuid\":\"{6f9463f8-8d7f-606a-4f2e-000000001800}\",\"ParentProcessId\":\"7436\",\"ParentImage\":\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\",\"ParentCommandLine\":\"\\\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\\\" --profile-directory=Default\",\"EventReceivedTime\":\"2021-04-05 12:11:16\",\"SourceModuleName\":\"in\",\"SourceModuleType\":\"im_msvistalog\",\"DeviceVendor\":\"Microsoft\",\"DeviceProduct\":\"EventLog\"}\n\n\nAddEvent( escape(JSON.stringify(pc)) )\n\nprint(pc['ProcessGuid'])\n\nvar r = db.query('SELECT FROM ProcessCreate WHERE ProcessGuid = ? limit 1', pc['ProcessGuid'].toUpperCase())\n\nprint('query length: ' + r.length)\nr = r[0]\n\nvar s = db.query('SELECT FROM ProcessCreate WHERE ProcessGuid = ? AND Hostname = ? \\\n\tAND Organisation = ? limit 1', r.field('ProcessGuid'), r.field('Hostname'), r.field('Organisation') )\n\nprint('requery length: ' + s.length)\n\n\n ","name":"test_ProcessCreate","language":"javascript","parameters":null},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\nvar size = db.getSize()\nprint(size)","name":"sizeofdb","language":"javascript","parameters":null},{"@type":"d","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\n\nprint()\nprint(Date() + \"||\" + r.field('@rid') + \" CapturedFile \" + r.field('ProcessGuid') + ' OriginalPath: ' + r.field('OriginalPath'))\nprint()\n\nvar pc = db.query('SELECT FROM ProcessCreate WHERE Organisation = ? AND Hostname = ? AND ProcessGuid = ? limit 1', r.field('Organisation'), r.field('Hostname'),  r.field('ProcessGuid'));\n\nif(pc.length == 0) return\n\nretry(\"db.command('CREATE EDGE WrittenFileSighted FROM \" + pc[0].field('@rid') + \" to \" + r.field('@rid') + \"')\")\nprint('linked CapturedFile ' + r.field('@rid') + ' to ' + pc[0].field('@rid'))","name":"CapturedFile","language":"javascript","parameters":["r"]},{"@type":"d","@version":1,"@class":"ORole","mode":0,"name":"writer","rules":{"database.cluster.internal":6,"database.class.oschedule":15,"database.class.osequence":2,"database.class.ouser":0,"database.systemclusters":0,"database.hook.record":31,"database":2,"database.function":2,"database.schema":7,"database.class.otriggered":2,"database.cluster":31,"database.command":31,"database.class":31},"inheritedRole":null,"@fieldTypes":"mode=b"},{"@type":"d","@version":1,"@class":"ORole","mode":0,"name":"reader","rules":{"database.cluster.internal":2,"database.cluster.orole":0,"database":2,"database.function":2,"database.schema":2,"database.class.ouser":0,"database.systemclusters":0,"database.cluster.ouser":0,"database.cluster":2,"database.command":2,"database.class":2,"database.hook.record":2},"inheritedRole":null,"@fieldTypes":"mode=b"},{"@type":"d","@version":2,"@class":"OUser","password":"{PBKDF2WithHmacSHA256}5D1171F227E1BD077059C4B3DBF2DAC5BED92D333DD16606:8EBF685C3778877175ADC9293B64C94159F0A72B4F1EF6CB:65536","roles":["#4:0"],"name":"writer","status":"ACTIVE","@fieldTypes":"roles=n"},{"@type":"d","@version":1,"@class":"OUser","password":"{PBKDF2WithHmacSHA256}54D0D9D0E98342165FBF3F72A7142407D1AC8759E457EC53:74C5E10F426D81B482D870A7A6E4BDBB766AD0A4F6A708D0:65536","roles":["#4:0"],"name":"test","status":"ACTIVE","@fieldTypes":"roles=n"}]}